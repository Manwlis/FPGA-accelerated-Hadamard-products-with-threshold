// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _myFuncAccel_HH_
#define _myFuncAccel_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "myFuncAccel_fadd_32ns_32ns_32_5_full_dsp_1.h"
#include "myFuncAccel_fmul_32ns_32ns_32_4_max_dsp_1.h"
#include "myFuncAccel_fcmp_32ns_32ns_1_2_1.h"

namespace ap_rtl {

struct myFuncAccel : public sc_module {
    // Port declarations 30
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_in< sc_lv<32> > size;
    sc_in< sc_lv<32> > dim;
    sc_in< sc_lv<32> > threshold;
    sc_out< sc_lv<4> > data0_address0;
    sc_out< sc_logic > data0_ce0;
    sc_in< sc_lv<32> > data0_q0;
    sc_out< sc_logic > data1_req_din;
    sc_in< sc_logic > data1_req_full_n;
    sc_out< sc_logic > data1_req_write;
    sc_in< sc_logic > data1_rsp_empty_n;
    sc_out< sc_logic > data1_rsp_read;
    sc_out< sc_lv<32> > data1_address;
    sc_in< sc_lv<32> > data1_datain;
    sc_out< sc_lv<32> > data1_dataout;
    sc_out< sc_lv<32> > data1_size;
    sc_out< sc_logic > data2_req_din;
    sc_in< sc_logic > data2_req_full_n;
    sc_out< sc_logic > data2_req_write;
    sc_in< sc_logic > data2_rsp_empty_n;
    sc_out< sc_logic > data2_rsp_read;
    sc_out< sc_lv<32> > data2_address;
    sc_in< sc_lv<32> > data2_datain;
    sc_out< sc_lv<32> > data2_dataout;
    sc_out< sc_lv<32> > data2_size;
    sc_signal< sc_logic > ap_var_for_const0;
    sc_signal< sc_lv<5> > ap_var_for_const1;


    // Module declarations
    myFuncAccel(sc_module_name name);
    SC_HAS_PROCESS(myFuncAccel);

    ~myFuncAccel();

    sc_trace_file* mVcdFile;

    ofstream mHdltvinHandle;
    ofstream mHdltvoutHandle;
    myFuncAccel_fadd_32ns_32ns_32_5_full_dsp_1<1,5,32,32,32>* myFuncAccel_fadd_32ns_32ns_32_5_full_dsp_1_U1;
    myFuncAccel_fmul_32ns_32ns_32_4_max_dsp_1<1,4,32,32,32>* myFuncAccel_fmul_32ns_32ns_32_4_max_dsp_1_U2;
    myFuncAccel_fcmp_32ns_32ns_1_2_1<1,2,32,32,1>* myFuncAccel_fcmp_32ns_32ns_1_2_1_U3;
    sc_signal< sc_lv<16> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_lv<32> > bitcast_ln43_1_fu_240_p1;
    sc_signal< sc_lv<1> > icmp_ln43_3_fu_248_p2;
    sc_signal< sc_lv<32> > add_ln20_fu_254_p2;
    sc_signal< sc_lv<32> > add_ln20_reg_465;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_lv<32> > i_fu_264_p2;
    sc_signal< sc_lv<32> > i_reg_473;
    sc_signal< sc_lv<32> > data1_addr_reg_478;
    sc_signal< sc_lv<1> > icmp_ln20_fu_259_p2;
    sc_signal< sc_lv<32> > data2_addr_reg_484;
    sc_signal< sc_lv<32> > add_ln26_fu_286_p2;
    sc_signal< sc_lv<32> > add_ln26_reg_489;
    sc_signal< sc_logic > ap_CS_fsm_state3;
    sc_signal< sc_lv<32> > k_fu_296_p2;
    sc_signal< sc_lv<32> > k_reg_497;
    sc_signal< sc_lv<1> > icmp_ln46_fu_302_p2;
    sc_signal< sc_lv<1> > icmp_ln46_reg_502;
    sc_signal< sc_lv<1> > icmp_ln26_fu_291_p2;
    sc_signal< sc_lv<32> > l_fu_313_p2;
    sc_signal< sc_lv<32> > l_reg_509;
    sc_signal< sc_logic > ap_CS_fsm_state5;
    sc_signal< sc_lv<1> > icmp_ln33_fu_308_p2;
    sc_signal< bool > ap_block_state5;
    sc_signal< sc_lv<32> > data1_addr_read_reg_519;
    sc_signal< sc_lv<1> > icmp_ln43_2_fu_345_p2;
    sc_signal< sc_logic > ap_CS_fsm_state6;
    sc_signal< sc_lv<32> > grp_fu_230_p2;
    sc_signal< sc_lv<32> > tmp_2_reg_537;
    sc_signal< sc_logic > ap_CS_fsm_state9;
    sc_signal< sc_lv<32> > grp_fu_225_p2;
    sc_signal< sc_logic > ap_CS_fsm_state14;
    sc_signal< sc_lv<32> > r_fu_411_p2;
    sc_signal< sc_logic > ap_CS_fsm_state15;
    sc_signal< sc_lv<32> > l_2_fu_422_p2;
    sc_signal< sc_logic > ap_CS_fsm_state16;
    sc_signal< sc_lv<1> > icmp_ln47_fu_417_p2;
    sc_signal< bool > ap_predicate_op121_write_state16;
    sc_signal< bool > ap_block_state16;
    sc_signal< sc_lv<32> > i_0_reg_132;
    sc_signal< sc_lv<32> > phi_mul1_reg_143;
    sc_signal< sc_lv<32> > k_0_reg_154;
    sc_signal< sc_lv<32> > r_0_reg_166;
    sc_signal< sc_lv<32> > phi_mul_reg_178;
    sc_signal< sc_lv<32> > l_0_reg_190;
    sc_signal< sc_logic > ap_CS_fsm_state4;
    sc_signal< sc_lv<32> > temp_0_reg_201;
    sc_signal< sc_lv<32> > l_1_reg_214;
    sc_signal< sc_lv<64> > zext_ln35_fu_325_p1;
    sc_signal< sc_lv<64> > zext_ln37_fu_270_p1;
    sc_signal< sc_lv<1> > icmp_ln37_fu_330_p2;
    sc_signal< sc_lv<1> > icmp_ln49_fu_428_p2;
    sc_signal< sc_logic > ap_CS_fsm_state10;
    sc_signal< sc_lv<23> > trunc_ln43_fu_244_p1;
    sc_signal< sc_lv<32> > add_ln35_fu_319_p2;
    sc_signal< sc_lv<8> > tmp_6_fu_336_p4;
    sc_signal< sc_lv<32> > bitcast_ln43_fu_351_p1;
    sc_signal< sc_lv<8> > tmp_1_fu_355_p4;
    sc_signal< sc_lv<23> > trunc_ln43_1_fu_365_p1;
    sc_signal< sc_lv<1> > icmp_ln43_1_fu_375_p2;
    sc_signal< sc_lv<1> > icmp_ln43_fu_369_p2;
    sc_signal< sc_lv<1> > or_ln43_fu_381_p2;
    sc_signal< sc_lv<1> > or_ln43_1_fu_387_p2;
    sc_signal< sc_lv<1> > and_ln43_fu_391_p2;
    sc_signal< sc_lv<1> > grp_fu_235_p2;
    sc_signal< sc_lv<1> > and_ln43_1_fu_397_p2;
    sc_signal< sc_lv<32> > select_ln43_fu_403_p3;
    sc_signal< sc_logic > grp_fu_235_ce;
    sc_signal< sc_lv<16> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<16> ap_ST_fsm_state1;
    static const sc_lv<16> ap_ST_fsm_state2;
    static const sc_lv<16> ap_ST_fsm_state3;
    static const sc_lv<16> ap_ST_fsm_state4;
    static const sc_lv<16> ap_ST_fsm_state5;
    static const sc_lv<16> ap_ST_fsm_state6;
    static const sc_lv<16> ap_ST_fsm_state7;
    static const sc_lv<16> ap_ST_fsm_state8;
    static const sc_lv<16> ap_ST_fsm_state9;
    static const sc_lv<16> ap_ST_fsm_state10;
    static const sc_lv<16> ap_ST_fsm_state11;
    static const sc_lv<16> ap_ST_fsm_state12;
    static const sc_lv<16> ap_ST_fsm_state13;
    static const sc_lv<16> ap_ST_fsm_state14;
    static const sc_lv<16> ap_ST_fsm_state15;
    static const sc_lv<16> ap_ST_fsm_state16;
    static const sc_lv<32> ap_const_lv32_0;
    static const bool ap_const_boolean_1;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<32> ap_const_lv32_4;
    static const sc_lv<32> ap_const_lv32_5;
    static const sc_lv<32> ap_const_lv32_8;
    static const sc_lv<32> ap_const_lv32_D;
    static const sc_lv<32> ap_const_lv32_E;
    static const sc_lv<32> ap_const_lv32_F;
    static const sc_lv<32> ap_const_lv32_3;
    static const sc_lv<32> ap_const_lv32_9;
    static const sc_lv<23> ap_const_lv23_0;
    static const sc_lv<32> ap_const_lv32_17;
    static const sc_lv<32> ap_const_lv32_1E;
    static const sc_lv<8> ap_const_lv8_FF;
    static const sc_lv<32> ap_const_lv32_FFFFFFFF;
    static const sc_lv<5> ap_const_lv5_2;
    // Thread declarations
    void thread_ap_var_for_const0();
    void thread_ap_var_for_const1();
    void thread_ap_clk_no_reset_();
    void thread_add_ln20_fu_254_p2();
    void thread_add_ln26_fu_286_p2();
    void thread_add_ln35_fu_319_p2();
    void thread_and_ln43_1_fu_397_p2();
    void thread_and_ln43_fu_391_p2();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state10();
    void thread_ap_CS_fsm_state14();
    void thread_ap_CS_fsm_state15();
    void thread_ap_CS_fsm_state16();
    void thread_ap_CS_fsm_state2();
    void thread_ap_CS_fsm_state3();
    void thread_ap_CS_fsm_state4();
    void thread_ap_CS_fsm_state5();
    void thread_ap_CS_fsm_state6();
    void thread_ap_CS_fsm_state9();
    void thread_ap_block_state16();
    void thread_ap_block_state5();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_predicate_op121_write_state16();
    void thread_ap_ready();
    void thread_bitcast_ln43_1_fu_240_p1();
    void thread_bitcast_ln43_fu_351_p1();
    void thread_data0_address0();
    void thread_data0_ce0();
    void thread_data1_address();
    void thread_data1_dataout();
    void thread_data1_req_din();
    void thread_data1_req_write();
    void thread_data1_rsp_read();
    void thread_data1_size();
    void thread_data2_address();
    void thread_data2_dataout();
    void thread_data2_req_din();
    void thread_data2_req_write();
    void thread_data2_rsp_read();
    void thread_data2_size();
    void thread_grp_fu_235_ce();
    void thread_i_fu_264_p2();
    void thread_icmp_ln20_fu_259_p2();
    void thread_icmp_ln26_fu_291_p2();
    void thread_icmp_ln33_fu_308_p2();
    void thread_icmp_ln37_fu_330_p2();
    void thread_icmp_ln43_1_fu_375_p2();
    void thread_icmp_ln43_2_fu_345_p2();
    void thread_icmp_ln43_3_fu_248_p2();
    void thread_icmp_ln43_fu_369_p2();
    void thread_icmp_ln46_fu_302_p2();
    void thread_icmp_ln47_fu_417_p2();
    void thread_icmp_ln49_fu_428_p2();
    void thread_k_fu_296_p2();
    void thread_l_2_fu_422_p2();
    void thread_l_fu_313_p2();
    void thread_or_ln43_1_fu_387_p2();
    void thread_or_ln43_fu_381_p2();
    void thread_r_fu_411_p2();
    void thread_select_ln43_fu_403_p3();
    void thread_tmp_1_fu_355_p4();
    void thread_tmp_6_fu_336_p4();
    void thread_trunc_ln43_1_fu_365_p1();
    void thread_trunc_ln43_fu_244_p1();
    void thread_zext_ln35_fu_325_p1();
    void thread_zext_ln37_fu_270_p1();
    void thread_ap_NS_fsm();
    void thread_hdltv_gen();
};

}

using namespace ap_rtl;

#endif
