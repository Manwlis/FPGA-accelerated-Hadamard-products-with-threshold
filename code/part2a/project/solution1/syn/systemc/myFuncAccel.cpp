// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "myFuncAccel.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic myFuncAccel::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic myFuncAccel::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<16> myFuncAccel::ap_ST_fsm_state1 = "1";
const sc_lv<16> myFuncAccel::ap_ST_fsm_state2 = "10";
const sc_lv<16> myFuncAccel::ap_ST_fsm_state3 = "100";
const sc_lv<16> myFuncAccel::ap_ST_fsm_state4 = "1000";
const sc_lv<16> myFuncAccel::ap_ST_fsm_state5 = "10000";
const sc_lv<16> myFuncAccel::ap_ST_fsm_state6 = "100000";
const sc_lv<16> myFuncAccel::ap_ST_fsm_state7 = "1000000";
const sc_lv<16> myFuncAccel::ap_ST_fsm_state8 = "10000000";
const sc_lv<16> myFuncAccel::ap_ST_fsm_state9 = "100000000";
const sc_lv<16> myFuncAccel::ap_ST_fsm_state10 = "1000000000";
const sc_lv<16> myFuncAccel::ap_ST_fsm_state11 = "10000000000";
const sc_lv<16> myFuncAccel::ap_ST_fsm_state12 = "100000000000";
const sc_lv<16> myFuncAccel::ap_ST_fsm_state13 = "1000000000000";
const sc_lv<16> myFuncAccel::ap_ST_fsm_state14 = "10000000000000";
const sc_lv<16> myFuncAccel::ap_ST_fsm_state15 = "100000000000000";
const sc_lv<16> myFuncAccel::ap_ST_fsm_state16 = "1000000000000000";
const sc_lv<32> myFuncAccel::ap_const_lv32_0 = "00000000000000000000000000000000";
const bool myFuncAccel::ap_const_boolean_1 = true;
const sc_lv<32> myFuncAccel::ap_const_lv32_1 = "1";
const sc_lv<1> myFuncAccel::ap_const_lv1_0 = "0";
const sc_lv<32> myFuncAccel::ap_const_lv32_2 = "10";
const sc_lv<1> myFuncAccel::ap_const_lv1_1 = "1";
const sc_lv<32> myFuncAccel::ap_const_lv32_4 = "100";
const sc_lv<32> myFuncAccel::ap_const_lv32_5 = "101";
const sc_lv<32> myFuncAccel::ap_const_lv32_8 = "1000";
const sc_lv<32> myFuncAccel::ap_const_lv32_D = "1101";
const sc_lv<32> myFuncAccel::ap_const_lv32_E = "1110";
const sc_lv<32> myFuncAccel::ap_const_lv32_F = "1111";
const sc_lv<32> myFuncAccel::ap_const_lv32_3 = "11";
const sc_lv<32> myFuncAccel::ap_const_lv32_9 = "1001";
const sc_lv<23> myFuncAccel::ap_const_lv23_0 = "00000000000000000000000";
const sc_lv<32> myFuncAccel::ap_const_lv32_17 = "10111";
const sc_lv<32> myFuncAccel::ap_const_lv32_1E = "11110";
const sc_lv<8> myFuncAccel::ap_const_lv8_FF = "11111111";
const sc_lv<32> myFuncAccel::ap_const_lv32_FFFFFFFF = "11111111111111111111111111111111";
const sc_lv<5> myFuncAccel::ap_const_lv5_2 = "10";

myFuncAccel::myFuncAccel(sc_module_name name) : sc_module(name), mVcdFile(0) {
    myFuncAccel_fadd_32ns_32ns_32_5_full_dsp_1_U1 = new myFuncAccel_fadd_32ns_32ns_32_5_full_dsp_1<1,5,32,32,32>("myFuncAccel_fadd_32ns_32ns_32_5_full_dsp_1_U1");
    myFuncAccel_fadd_32ns_32ns_32_5_full_dsp_1_U1->clk(ap_clk);
    myFuncAccel_fadd_32ns_32ns_32_5_full_dsp_1_U1->reset(ap_rst);
    myFuncAccel_fadd_32ns_32ns_32_5_full_dsp_1_U1->din0(temp_0_reg_201);
    myFuncAccel_fadd_32ns_32ns_32_5_full_dsp_1_U1->din1(tmp_2_reg_537);
    myFuncAccel_fadd_32ns_32ns_32_5_full_dsp_1_U1->ce(ap_var_for_const0);
    myFuncAccel_fadd_32ns_32ns_32_5_full_dsp_1_U1->dout(grp_fu_225_p2);
    myFuncAccel_fmul_32ns_32ns_32_4_max_dsp_1_U2 = new myFuncAccel_fmul_32ns_32ns_32_4_max_dsp_1<1,4,32,32,32>("myFuncAccel_fmul_32ns_32ns_32_4_max_dsp_1_U2");
    myFuncAccel_fmul_32ns_32ns_32_4_max_dsp_1_U2->clk(ap_clk);
    myFuncAccel_fmul_32ns_32ns_32_4_max_dsp_1_U2->reset(ap_rst);
    myFuncAccel_fmul_32ns_32ns_32_4_max_dsp_1_U2->din0(data0_q0);
    myFuncAccel_fmul_32ns_32ns_32_4_max_dsp_1_U2->din1(data1_addr_read_reg_519);
    myFuncAccel_fmul_32ns_32ns_32_4_max_dsp_1_U2->ce(ap_var_for_const0);
    myFuncAccel_fmul_32ns_32ns_32_4_max_dsp_1_U2->dout(grp_fu_230_p2);
    myFuncAccel_fcmp_32ns_32ns_1_2_1_U3 = new myFuncAccel_fcmp_32ns_32ns_1_2_1<1,2,32,32,1>("myFuncAccel_fcmp_32ns_32ns_1_2_1_U3");
    myFuncAccel_fcmp_32ns_32ns_1_2_1_U3->clk(ap_clk);
    myFuncAccel_fcmp_32ns_32ns_1_2_1_U3->reset(ap_rst);
    myFuncAccel_fcmp_32ns_32ns_1_2_1_U3->din0(temp_0_reg_201);
    myFuncAccel_fcmp_32ns_32ns_1_2_1_U3->din1(threshold);
    myFuncAccel_fcmp_32ns_32ns_1_2_1_U3->ce(grp_fu_235_ce);
    myFuncAccel_fcmp_32ns_32ns_1_2_1_U3->opcode(ap_var_for_const1);
    myFuncAccel_fcmp_32ns_32ns_1_2_1_U3->dout(grp_fu_235_p2);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_add_ln20_fu_254_p2);
    sensitive << ( dim );
    sensitive << ( phi_mul1_reg_143 );

    SC_METHOD(thread_add_ln26_fu_286_p2);
    sensitive << ( dim );
    sensitive << ( phi_mul_reg_178 );

    SC_METHOD(thread_add_ln35_fu_319_p2);
    sensitive << ( phi_mul_reg_178 );
    sensitive << ( l_0_reg_190 );

    SC_METHOD(thread_and_ln43_1_fu_397_p2);
    sensitive << ( and_ln43_fu_391_p2 );
    sensitive << ( grp_fu_235_p2 );

    SC_METHOD(thread_and_ln43_fu_391_p2);
    sensitive << ( or_ln43_fu_381_p2 );
    sensitive << ( or_ln43_1_fu_387_p2 );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state10);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state14);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state15);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state16);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state5);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state6);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state9);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_block_state16);
    sensitive << ( data2_req_full_n );
    sensitive << ( ap_predicate_op121_write_state16 );

    SC_METHOD(thread_ap_block_state5);
    sensitive << ( data1_rsp_empty_n );
    sensitive << ( data2_req_full_n );
    sensitive << ( icmp_ln33_fu_308_p2 );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln20_fu_259_p2 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_predicate_op121_write_state16);
    sensitive << ( icmp_ln46_reg_502 );
    sensitive << ( icmp_ln47_fu_417_p2 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln20_fu_259_p2 );

    SC_METHOD(thread_bitcast_ln43_1_fu_240_p1);
    sensitive << ( threshold );

    SC_METHOD(thread_bitcast_ln43_fu_351_p1);
    sensitive << ( temp_0_reg_201 );

    SC_METHOD(thread_data0_address0);
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( zext_ln35_fu_325_p1 );

    SC_METHOD(thread_data0_ce0);
    sensitive << ( data1_rsp_empty_n );
    sensitive << ( data2_req_full_n );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( icmp_ln33_fu_308_p2 );

    SC_METHOD(thread_data1_address);
    sensitive << ( data1_addr_reg_478 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( icmp_ln26_fu_291_p2 );

    SC_METHOD(thread_data1_dataout);

    SC_METHOD(thread_data1_req_din);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( icmp_ln26_fu_291_p2 );

    SC_METHOD(thread_data1_req_write);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( icmp_ln26_fu_291_p2 );

    SC_METHOD(thread_data1_rsp_read);
    sensitive << ( data1_rsp_empty_n );
    sensitive << ( data2_req_full_n );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( icmp_ln33_fu_308_p2 );

    SC_METHOD(thread_data1_size);
    sensitive << ( dim );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( icmp_ln26_fu_291_p2 );

    SC_METHOD(thread_data2_address);
    sensitive << ( data1_rsp_empty_n );
    sensitive << ( data2_req_full_n );
    sensitive << ( data2_addr_reg_484 );
    sensitive << ( icmp_ln46_reg_502 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( icmp_ln33_fu_308_p2 );
    sensitive << ( ap_CS_fsm_state16 );
    sensitive << ( icmp_ln47_fu_417_p2 );
    sensitive << ( ap_predicate_op121_write_state16 );
    sensitive << ( icmp_ln37_fu_330_p2 );
    sensitive << ( icmp_ln49_fu_428_p2 );

    SC_METHOD(thread_data2_dataout);
    sensitive << ( data1_rsp_empty_n );
    sensitive << ( data2_req_full_n );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( icmp_ln33_fu_308_p2 );
    sensitive << ( ap_CS_fsm_state16 );
    sensitive << ( ap_predicate_op121_write_state16 );
    sensitive << ( temp_0_reg_201 );

    SC_METHOD(thread_data2_req_din);
    sensitive << ( data1_rsp_empty_n );
    sensitive << ( data2_req_full_n );
    sensitive << ( icmp_ln46_reg_502 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( icmp_ln33_fu_308_p2 );
    sensitive << ( ap_CS_fsm_state16 );
    sensitive << ( icmp_ln47_fu_417_p2 );
    sensitive << ( ap_predicate_op121_write_state16 );
    sensitive << ( icmp_ln49_fu_428_p2 );

    SC_METHOD(thread_data2_req_write);
    sensitive << ( data1_rsp_empty_n );
    sensitive << ( data2_req_full_n );
    sensitive << ( icmp_ln46_reg_502 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( icmp_ln33_fu_308_p2 );
    sensitive << ( ap_CS_fsm_state16 );
    sensitive << ( icmp_ln47_fu_417_p2 );
    sensitive << ( ap_predicate_op121_write_state16 );
    sensitive << ( icmp_ln49_fu_428_p2 );

    SC_METHOD(thread_data2_rsp_read);

    SC_METHOD(thread_data2_size);
    sensitive << ( dim );
    sensitive << ( data1_rsp_empty_n );
    sensitive << ( data2_req_full_n );
    sensitive << ( icmp_ln46_reg_502 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( icmp_ln33_fu_308_p2 );
    sensitive << ( ap_CS_fsm_state16 );
    sensitive << ( icmp_ln47_fu_417_p2 );
    sensitive << ( ap_predicate_op121_write_state16 );
    sensitive << ( icmp_ln37_fu_330_p2 );
    sensitive << ( icmp_ln49_fu_428_p2 );

    SC_METHOD(thread_grp_fu_235_ce);
    sensitive << ( data1_rsp_empty_n );
    sensitive << ( data2_req_full_n );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( icmp_ln33_fu_308_p2 );
    sensitive << ( ap_CS_fsm_state15 );

    SC_METHOD(thread_i_fu_264_p2);
    sensitive << ( i_0_reg_132 );

    SC_METHOD(thread_icmp_ln20_fu_259_p2);
    sensitive << ( size );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( i_0_reg_132 );

    SC_METHOD(thread_icmp_ln26_fu_291_p2);
    sensitive << ( dim );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( k_0_reg_154 );

    SC_METHOD(thread_icmp_ln33_fu_308_p2);
    sensitive << ( dim );
    sensitive << ( data1_rsp_empty_n );
    sensitive << ( data2_req_full_n );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( icmp_ln33_fu_308_p2 );
    sensitive << ( l_0_reg_190 );

    SC_METHOD(thread_icmp_ln37_fu_330_p2);
    sensitive << ( data1_rsp_empty_n );
    sensitive << ( data2_req_full_n );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( icmp_ln33_fu_308_p2 );
    sensitive << ( k_0_reg_154 );

    SC_METHOD(thread_icmp_ln43_1_fu_375_p2);
    sensitive << ( ap_CS_fsm_state15 );
    sensitive << ( trunc_ln43_1_fu_365_p1 );

    SC_METHOD(thread_icmp_ln43_2_fu_345_p2);
    sensitive << ( data1_rsp_empty_n );
    sensitive << ( data2_req_full_n );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( icmp_ln33_fu_308_p2 );
    sensitive << ( tmp_6_fu_336_p4 );

    SC_METHOD(thread_icmp_ln43_3_fu_248_p2);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( trunc_ln43_fu_244_p1 );

    SC_METHOD(thread_icmp_ln43_fu_369_p2);
    sensitive << ( ap_CS_fsm_state15 );
    sensitive << ( tmp_1_fu_355_p4 );

    SC_METHOD(thread_icmp_ln46_fu_302_p2);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( icmp_ln26_fu_291_p2 );
    sensitive << ( r_0_reg_166 );

    SC_METHOD(thread_icmp_ln47_fu_417_p2);
    sensitive << ( dim );
    sensitive << ( data2_req_full_n );
    sensitive << ( icmp_ln46_reg_502 );
    sensitive << ( ap_CS_fsm_state16 );
    sensitive << ( ap_predicate_op121_write_state16 );
    sensitive << ( l_1_reg_214 );

    SC_METHOD(thread_icmp_ln49_fu_428_p2);
    sensitive << ( data2_req_full_n );
    sensitive << ( icmp_ln46_reg_502 );
    sensitive << ( ap_CS_fsm_state16 );
    sensitive << ( icmp_ln47_fu_417_p2 );
    sensitive << ( ap_predicate_op121_write_state16 );
    sensitive << ( l_1_reg_214 );

    SC_METHOD(thread_k_fu_296_p2);
    sensitive << ( k_0_reg_154 );

    SC_METHOD(thread_l_2_fu_422_p2);
    sensitive << ( l_1_reg_214 );

    SC_METHOD(thread_l_fu_313_p2);
    sensitive << ( l_0_reg_190 );

    SC_METHOD(thread_or_ln43_1_fu_387_p2);
    sensitive << ( icmp_ln43_3_fu_248_p2 );
    sensitive << ( icmp_ln43_2_fu_345_p2 );

    SC_METHOD(thread_or_ln43_fu_381_p2);
    sensitive << ( icmp_ln43_1_fu_375_p2 );
    sensitive << ( icmp_ln43_fu_369_p2 );

    SC_METHOD(thread_r_fu_411_p2);
    sensitive << ( r_0_reg_166 );
    sensitive << ( select_ln43_fu_403_p3 );

    SC_METHOD(thread_select_ln43_fu_403_p3);
    sensitive << ( and_ln43_1_fu_397_p2 );

    SC_METHOD(thread_tmp_1_fu_355_p4);
    sensitive << ( bitcast_ln43_fu_351_p1 );

    SC_METHOD(thread_tmp_6_fu_336_p4);
    sensitive << ( bitcast_ln43_1_fu_240_p1 );

    SC_METHOD(thread_trunc_ln43_1_fu_365_p1);
    sensitive << ( bitcast_ln43_fu_351_p1 );

    SC_METHOD(thread_trunc_ln43_fu_244_p1);
    sensitive << ( bitcast_ln43_1_fu_240_p1 );

    SC_METHOD(thread_zext_ln35_fu_325_p1);
    sensitive << ( add_ln35_fu_319_p2 );

    SC_METHOD(thread_zext_ln37_fu_270_p1);
    sensitive << ( phi_mul1_reg_143 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( data1_rsp_empty_n );
    sensitive << ( data2_req_full_n );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln20_fu_259_p2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( icmp_ln46_reg_502 );
    sensitive << ( icmp_ln26_fu_291_p2 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( icmp_ln33_fu_308_p2 );
    sensitive << ( ap_CS_fsm_state16 );
    sensitive << ( icmp_ln47_fu_417_p2 );
    sensitive << ( ap_predicate_op121_write_state16 );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    SC_THREAD(thread_ap_var_for_const0);

    SC_THREAD(thread_ap_var_for_const1);

    ap_CS_fsm = "0000000000000001";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "myFuncAccel_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, size, "(port)size");
    sc_trace(mVcdFile, dim, "(port)dim");
    sc_trace(mVcdFile, threshold, "(port)threshold");
    sc_trace(mVcdFile, data0_address0, "(port)data0_address0");
    sc_trace(mVcdFile, data0_ce0, "(port)data0_ce0");
    sc_trace(mVcdFile, data0_q0, "(port)data0_q0");
    sc_trace(mVcdFile, data1_req_din, "(port)data1_req_din");
    sc_trace(mVcdFile, data1_req_full_n, "(port)data1_req_full_n");
    sc_trace(mVcdFile, data1_req_write, "(port)data1_req_write");
    sc_trace(mVcdFile, data1_rsp_empty_n, "(port)data1_rsp_empty_n");
    sc_trace(mVcdFile, data1_rsp_read, "(port)data1_rsp_read");
    sc_trace(mVcdFile, data1_address, "(port)data1_address");
    sc_trace(mVcdFile, data1_datain, "(port)data1_datain");
    sc_trace(mVcdFile, data1_dataout, "(port)data1_dataout");
    sc_trace(mVcdFile, data1_size, "(port)data1_size");
    sc_trace(mVcdFile, data2_req_din, "(port)data2_req_din");
    sc_trace(mVcdFile, data2_req_full_n, "(port)data2_req_full_n");
    sc_trace(mVcdFile, data2_req_write, "(port)data2_req_write");
    sc_trace(mVcdFile, data2_rsp_empty_n, "(port)data2_rsp_empty_n");
    sc_trace(mVcdFile, data2_rsp_read, "(port)data2_rsp_read");
    sc_trace(mVcdFile, data2_address, "(port)data2_address");
    sc_trace(mVcdFile, data2_datain, "(port)data2_datain");
    sc_trace(mVcdFile, data2_dataout, "(port)data2_dataout");
    sc_trace(mVcdFile, data2_size, "(port)data2_size");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, bitcast_ln43_1_fu_240_p1, "bitcast_ln43_1_fu_240_p1");
    sc_trace(mVcdFile, icmp_ln43_3_fu_248_p2, "icmp_ln43_3_fu_248_p2");
    sc_trace(mVcdFile, add_ln20_fu_254_p2, "add_ln20_fu_254_p2");
    sc_trace(mVcdFile, add_ln20_reg_465, "add_ln20_reg_465");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, i_fu_264_p2, "i_fu_264_p2");
    sc_trace(mVcdFile, i_reg_473, "i_reg_473");
    sc_trace(mVcdFile, data1_addr_reg_478, "data1_addr_reg_478");
    sc_trace(mVcdFile, icmp_ln20_fu_259_p2, "icmp_ln20_fu_259_p2");
    sc_trace(mVcdFile, data2_addr_reg_484, "data2_addr_reg_484");
    sc_trace(mVcdFile, add_ln26_fu_286_p2, "add_ln26_fu_286_p2");
    sc_trace(mVcdFile, add_ln26_reg_489, "add_ln26_reg_489");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, k_fu_296_p2, "k_fu_296_p2");
    sc_trace(mVcdFile, k_reg_497, "k_reg_497");
    sc_trace(mVcdFile, icmp_ln46_fu_302_p2, "icmp_ln46_fu_302_p2");
    sc_trace(mVcdFile, icmp_ln46_reg_502, "icmp_ln46_reg_502");
    sc_trace(mVcdFile, icmp_ln26_fu_291_p2, "icmp_ln26_fu_291_p2");
    sc_trace(mVcdFile, l_fu_313_p2, "l_fu_313_p2");
    sc_trace(mVcdFile, l_reg_509, "l_reg_509");
    sc_trace(mVcdFile, ap_CS_fsm_state5, "ap_CS_fsm_state5");
    sc_trace(mVcdFile, icmp_ln33_fu_308_p2, "icmp_ln33_fu_308_p2");
    sc_trace(mVcdFile, ap_block_state5, "ap_block_state5");
    sc_trace(mVcdFile, data1_addr_read_reg_519, "data1_addr_read_reg_519");
    sc_trace(mVcdFile, icmp_ln43_2_fu_345_p2, "icmp_ln43_2_fu_345_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state6, "ap_CS_fsm_state6");
    sc_trace(mVcdFile, grp_fu_230_p2, "grp_fu_230_p2");
    sc_trace(mVcdFile, tmp_2_reg_537, "tmp_2_reg_537");
    sc_trace(mVcdFile, ap_CS_fsm_state9, "ap_CS_fsm_state9");
    sc_trace(mVcdFile, grp_fu_225_p2, "grp_fu_225_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state14, "ap_CS_fsm_state14");
    sc_trace(mVcdFile, r_fu_411_p2, "r_fu_411_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state15, "ap_CS_fsm_state15");
    sc_trace(mVcdFile, l_2_fu_422_p2, "l_2_fu_422_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state16, "ap_CS_fsm_state16");
    sc_trace(mVcdFile, icmp_ln47_fu_417_p2, "icmp_ln47_fu_417_p2");
    sc_trace(mVcdFile, ap_predicate_op121_write_state16, "ap_predicate_op121_write_state16");
    sc_trace(mVcdFile, ap_block_state16, "ap_block_state16");
    sc_trace(mVcdFile, i_0_reg_132, "i_0_reg_132");
    sc_trace(mVcdFile, phi_mul1_reg_143, "phi_mul1_reg_143");
    sc_trace(mVcdFile, k_0_reg_154, "k_0_reg_154");
    sc_trace(mVcdFile, r_0_reg_166, "r_0_reg_166");
    sc_trace(mVcdFile, phi_mul_reg_178, "phi_mul_reg_178");
    sc_trace(mVcdFile, l_0_reg_190, "l_0_reg_190");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, temp_0_reg_201, "temp_0_reg_201");
    sc_trace(mVcdFile, l_1_reg_214, "l_1_reg_214");
    sc_trace(mVcdFile, zext_ln35_fu_325_p1, "zext_ln35_fu_325_p1");
    sc_trace(mVcdFile, zext_ln37_fu_270_p1, "zext_ln37_fu_270_p1");
    sc_trace(mVcdFile, icmp_ln37_fu_330_p2, "icmp_ln37_fu_330_p2");
    sc_trace(mVcdFile, icmp_ln49_fu_428_p2, "icmp_ln49_fu_428_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state10, "ap_CS_fsm_state10");
    sc_trace(mVcdFile, trunc_ln43_fu_244_p1, "trunc_ln43_fu_244_p1");
    sc_trace(mVcdFile, add_ln35_fu_319_p2, "add_ln35_fu_319_p2");
    sc_trace(mVcdFile, tmp_6_fu_336_p4, "tmp_6_fu_336_p4");
    sc_trace(mVcdFile, bitcast_ln43_fu_351_p1, "bitcast_ln43_fu_351_p1");
    sc_trace(mVcdFile, tmp_1_fu_355_p4, "tmp_1_fu_355_p4");
    sc_trace(mVcdFile, trunc_ln43_1_fu_365_p1, "trunc_ln43_1_fu_365_p1");
    sc_trace(mVcdFile, icmp_ln43_1_fu_375_p2, "icmp_ln43_1_fu_375_p2");
    sc_trace(mVcdFile, icmp_ln43_fu_369_p2, "icmp_ln43_fu_369_p2");
    sc_trace(mVcdFile, or_ln43_fu_381_p2, "or_ln43_fu_381_p2");
    sc_trace(mVcdFile, or_ln43_1_fu_387_p2, "or_ln43_1_fu_387_p2");
    sc_trace(mVcdFile, and_ln43_fu_391_p2, "and_ln43_fu_391_p2");
    sc_trace(mVcdFile, grp_fu_235_p2, "grp_fu_235_p2");
    sc_trace(mVcdFile, and_ln43_1_fu_397_p2, "and_ln43_1_fu_397_p2");
    sc_trace(mVcdFile, select_ln43_fu_403_p3, "select_ln43_fu_403_p3");
    sc_trace(mVcdFile, grp_fu_235_ce, "grp_fu_235_ce");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
    mHdltvinHandle.open("myFuncAccel.hdltvin.dat");
    mHdltvoutHandle.open("myFuncAccel.hdltvout.dat");
}

myFuncAccel::~myFuncAccel() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
    delete myFuncAccel_fadd_32ns_32ns_32_5_full_dsp_1_U1;
    delete myFuncAccel_fmul_32ns_32ns_32_4_max_dsp_1_U2;
    delete myFuncAccel_fcmp_32ns_32ns_1_2_1_U3;
}

void myFuncAccel::thread_ap_var_for_const0() {
    ap_var_for_const0 = ap_const_logic_1;
}

void myFuncAccel::thread_ap_var_for_const1() {
    ap_var_for_const1 = ap_const_lv5_2;
}

void myFuncAccel::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, data2_req_full_n.read()) && esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op121_write_state16.read())) && 
         (esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln47_fu_417_p2.read()) || 
          esl_seteq<1,1,1>(icmp_ln46_reg_502.read(), ap_const_lv1_1)))) {
        i_0_reg_132 = i_reg_473.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        i_0_reg_132 = ap_const_lv32_0;
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read())) {
        k_0_reg_154 = k_reg_497.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
                esl_seteq<1,1,1>(icmp_ln20_fu_259_p2.read(), ap_const_lv1_0))) {
        k_0_reg_154 = ap_const_lv32_0;
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read())) {
        l_0_reg_190 = l_reg_509.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        l_0_reg_190 = ap_const_lv32_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
         esl_seteq<1,1,1>(icmp_ln26_fu_291_p2.read(), ap_const_lv1_1) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln46_fu_302_p2.read()))) {
        l_1_reg_214 = ap_const_lv32_0;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln46_reg_502.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln47_fu_417_p2.read()) && 
                !(esl_seteq<1,1,1>(ap_const_logic_0, data2_req_full_n.read()) && esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op121_write_state16.read())))) {
        l_1_reg_214 = l_2_fu_422_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, data2_req_full_n.read()) && esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op121_write_state16.read())) && 
         (esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln47_fu_417_p2.read()) || 
          esl_seteq<1,1,1>(icmp_ln46_reg_502.read(), ap_const_lv1_1)))) {
        phi_mul1_reg_143 = add_ln20_reg_465.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        phi_mul1_reg_143 = ap_const_lv32_0;
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read())) {
        phi_mul_reg_178 = add_ln26_reg_489.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
                esl_seteq<1,1,1>(icmp_ln20_fu_259_p2.read(), ap_const_lv1_0))) {
        phi_mul_reg_178 = ap_const_lv32_0;
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read())) {
        r_0_reg_166 = r_fu_411_p2.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
                esl_seteq<1,1,1>(icmp_ln20_fu_259_p2.read(), ap_const_lv1_0))) {
        r_0_reg_166 = ap_const_lv32_1;
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read())) {
        temp_0_reg_201 = grp_fu_225_p2.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        temp_0_reg_201 = ap_const_lv32_0;
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        add_ln20_reg_465 = add_ln20_fu_254_p2.read();
        i_reg_473 = i_fu_264_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        add_ln26_reg_489 = add_ln26_fu_286_p2.read();
        k_reg_497 = k_fu_296_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln33_fu_308_p2.read()) && !((esl_seteq<1,1,1>(ap_const_logic_0, data1_rsp_empty_n.read()) && 
  esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln33_fu_308_p2.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, data2_req_full_n.read()) && 
  esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln33_fu_308_p2.read()))))) {
        data1_addr_read_reg_519 = data1_datain.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(icmp_ln20_fu_259_p2.read(), ap_const_lv1_0))) {
        data1_addr_reg_478 =  (sc_lv<32>) (zext_ln37_fu_270_p1.read());
        data2_addr_reg_484 =  (sc_lv<32>) (zext_ln37_fu_270_p1.read());
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && esl_seteq<1,1,1>(icmp_ln26_fu_291_p2.read(), ap_const_lv1_1))) {
        icmp_ln46_reg_502 = icmp_ln46_fu_302_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && !((esl_seteq<1,1,1>(ap_const_logic_0, data1_rsp_empty_n.read()) && 
  esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln33_fu_308_p2.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, data2_req_full_n.read()) && 
  esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln33_fu_308_p2.read()))))) {
        l_reg_509 = l_fu_313_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) {
        tmp_2_reg_537 = grp_fu_230_p2.read();
    }
}

void myFuncAccel::thread_add_ln20_fu_254_p2() {
    add_ln20_fu_254_p2 = (!phi_mul1_reg_143.read().is_01() || !dim.read().is_01())? sc_lv<32>(): (sc_biguint<32>(phi_mul1_reg_143.read()) + sc_biguint<32>(dim.read()));
}

void myFuncAccel::thread_add_ln26_fu_286_p2() {
    add_ln26_fu_286_p2 = (!phi_mul_reg_178.read().is_01() || !dim.read().is_01())? sc_lv<32>(): (sc_biguint<32>(phi_mul_reg_178.read()) + sc_biguint<32>(dim.read()));
}

void myFuncAccel::thread_add_ln35_fu_319_p2() {
    add_ln35_fu_319_p2 = (!l_0_reg_190.read().is_01() || !phi_mul_reg_178.read().is_01())? sc_lv<32>(): (sc_biguint<32>(l_0_reg_190.read()) + sc_biguint<32>(phi_mul_reg_178.read()));
}

void myFuncAccel::thread_and_ln43_1_fu_397_p2() {
    and_ln43_1_fu_397_p2 = (and_ln43_fu_391_p2.read() & grp_fu_235_p2.read());
}

void myFuncAccel::thread_and_ln43_fu_391_p2() {
    and_ln43_fu_391_p2 = (or_ln43_fu_381_p2.read() & or_ln43_1_fu_387_p2.read());
}

void myFuncAccel::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void myFuncAccel::thread_ap_CS_fsm_state10() {
    ap_CS_fsm_state10 = ap_CS_fsm.read()[9];
}

void myFuncAccel::thread_ap_CS_fsm_state14() {
    ap_CS_fsm_state14 = ap_CS_fsm.read()[13];
}

void myFuncAccel::thread_ap_CS_fsm_state15() {
    ap_CS_fsm_state15 = ap_CS_fsm.read()[14];
}

void myFuncAccel::thread_ap_CS_fsm_state16() {
    ap_CS_fsm_state16 = ap_CS_fsm.read()[15];
}

void myFuncAccel::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void myFuncAccel::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void myFuncAccel::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read()[3];
}

void myFuncAccel::thread_ap_CS_fsm_state5() {
    ap_CS_fsm_state5 = ap_CS_fsm.read()[4];
}

void myFuncAccel::thread_ap_CS_fsm_state6() {
    ap_CS_fsm_state6 = ap_CS_fsm.read()[5];
}

void myFuncAccel::thread_ap_CS_fsm_state9() {
    ap_CS_fsm_state9 = ap_CS_fsm.read()[8];
}

void myFuncAccel::thread_ap_block_state16() {
    ap_block_state16 = (esl_seteq<1,1,1>(ap_const_logic_0, data2_req_full_n.read()) && esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op121_write_state16.read()));
}

void myFuncAccel::thread_ap_block_state5() {
    ap_block_state5 = ((esl_seteq<1,1,1>(ap_const_logic_0, data1_rsp_empty_n.read()) && 
  esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln33_fu_308_p2.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, data2_req_full_n.read()) && 
  esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln33_fu_308_p2.read())));
}

void myFuncAccel::thread_ap_done() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(icmp_ln20_fu_259_p2.read(), ap_const_lv1_1))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void myFuncAccel::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void myFuncAccel::thread_ap_predicate_op121_write_state16() {
    ap_predicate_op121_write_state16 = (esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln46_reg_502.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln47_fu_417_p2.read()));
}

void myFuncAccel::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(icmp_ln20_fu_259_p2.read(), ap_const_lv1_1))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void myFuncAccel::thread_bitcast_ln43_1_fu_240_p1() {
    bitcast_ln43_1_fu_240_p1 = threshold.read();
}

void myFuncAccel::thread_bitcast_ln43_fu_351_p1() {
    bitcast_ln43_fu_351_p1 = temp_0_reg_201.read();
}

void myFuncAccel::thread_data0_address0() {
    data0_address0 =  (sc_lv<4>) (zext_ln35_fu_325_p1.read());
}

void myFuncAccel::thread_data0_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
         !((esl_seteq<1,1,1>(ap_const_logic_0, data1_rsp_empty_n.read()) && 
  esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln33_fu_308_p2.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, data2_req_full_n.read()) && 
  esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln33_fu_308_p2.read()))))) {
        data0_ce0 = ap_const_logic_1;
    } else {
        data0_ce0 = ap_const_logic_0;
    }
}

void myFuncAccel::thread_data1_address() {
    data1_address = data1_addr_reg_478.read();
}

void myFuncAccel::thread_data1_dataout() {
    data1_dataout = ap_const_lv32_0;
}

void myFuncAccel::thread_data1_req_din() {
    data1_req_din = ap_const_logic_0;
}

void myFuncAccel::thread_data1_req_write() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln26_fu_291_p2.read()))) {
        data1_req_write = ap_const_logic_1;
    } else {
        data1_req_write = ap_const_logic_0;
    }
}

void myFuncAccel::thread_data1_rsp_read() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln33_fu_308_p2.read()) && 
         !((esl_seteq<1,1,1>(ap_const_logic_0, data1_rsp_empty_n.read()) && 
  esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln33_fu_308_p2.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, data2_req_full_n.read()) && 
  esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln33_fu_308_p2.read()))))) {
        data1_rsp_read = ap_const_logic_1;
    } else {
        data1_rsp_read = ap_const_logic_0;
    }
}

void myFuncAccel::thread_data1_size() {
    data1_size = dim.read();
}

void myFuncAccel::thread_data2_address() {
    data2_address = data2_addr_reg_484.read();
}

void myFuncAccel::thread_data2_dataout() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read()) && 
         esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op121_write_state16.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, data2_req_full_n.read()) && esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op121_write_state16.read())))) {
        data2_dataout = ap_const_lv32_0;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln33_fu_308_p2.read()) && 
                !((esl_seteq<1,1,1>(ap_const_logic_0, data1_rsp_empty_n.read()) && 
  esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln33_fu_308_p2.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, data2_req_full_n.read()) && 
  esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln33_fu_308_p2.read()))))) {
        data2_dataout = temp_0_reg_201.read();
    } else {
        data2_dataout = "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    }
}

void myFuncAccel::thread_data2_req_din() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln33_fu_308_p2.read()) && 
          !((esl_seteq<1,1,1>(ap_const_logic_0, data1_rsp_empty_n.read()) && 
  esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln33_fu_308_p2.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, data2_req_full_n.read()) && 
  esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln33_fu_308_p2.read())))) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln46_reg_502.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln47_fu_417_p2.read()) && 
          !(esl_seteq<1,1,1>(ap_const_logic_0, data2_req_full_n.read()) && esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op121_write_state16.read())) && 
          esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln49_fu_428_p2.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read()) && 
          esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op121_write_state16.read()) && 
          !(esl_seteq<1,1,1>(ap_const_logic_0, data2_req_full_n.read()) && esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op121_write_state16.read()))))) {
        data2_req_din = ap_const_logic_1;
    } else {
        data2_req_din = ap_const_logic_0;
    }
}

void myFuncAccel::thread_data2_req_write() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln33_fu_308_p2.read()) && 
          !((esl_seteq<1,1,1>(ap_const_logic_0, data1_rsp_empty_n.read()) && 
  esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln33_fu_308_p2.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, data2_req_full_n.read()) && 
  esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln33_fu_308_p2.read())))) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln46_reg_502.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln47_fu_417_p2.read()) && 
          !(esl_seteq<1,1,1>(ap_const_logic_0, data2_req_full_n.read()) && esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op121_write_state16.read())) && 
          esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln49_fu_428_p2.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read()) && 
          esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op121_write_state16.read()) && 
          !(esl_seteq<1,1,1>(ap_const_logic_0, data2_req_full_n.read()) && esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op121_write_state16.read()))))) {
        data2_req_write = ap_const_logic_1;
    } else {
        data2_req_write = ap_const_logic_0;
    }
}

void myFuncAccel::thread_data2_rsp_read() {
    data2_rsp_read = ap_const_logic_0;
}

void myFuncAccel::thread_data2_size() {
    data2_size = dim.read();
}

void myFuncAccel::thread_grp_fu_235_ce() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
          !((esl_seteq<1,1,1>(ap_const_logic_0, data1_rsp_empty_n.read()) && 
  esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln33_fu_308_p2.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, data2_req_full_n.read()) && 
  esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln33_fu_308_p2.read())))) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read()))) {
        grp_fu_235_ce = ap_const_logic_1;
    } else {
        grp_fu_235_ce = ap_const_logic_0;
    }
}

void myFuncAccel::thread_i_fu_264_p2() {
    i_fu_264_p2 = (!i_0_reg_132.read().is_01() || !ap_const_lv32_1.is_01())? sc_lv<32>(): (sc_biguint<32>(i_0_reg_132.read()) + sc_biguint<32>(ap_const_lv32_1));
}

void myFuncAccel::thread_icmp_ln20_fu_259_p2() {
    icmp_ln20_fu_259_p2 = (!i_0_reg_132.read().is_01() || !size.read().is_01())? sc_lv<1>(): sc_lv<1>(i_0_reg_132.read() == size.read());
}

void myFuncAccel::thread_icmp_ln26_fu_291_p2() {
    icmp_ln26_fu_291_p2 = (!k_0_reg_154.read().is_01() || !dim.read().is_01())? sc_lv<1>(): sc_lv<1>(k_0_reg_154.read() == dim.read());
}

void myFuncAccel::thread_icmp_ln33_fu_308_p2() {
    icmp_ln33_fu_308_p2 = (!l_0_reg_190.read().is_01() || !dim.read().is_01())? sc_lv<1>(): sc_lv<1>(l_0_reg_190.read() == dim.read());
}

void myFuncAccel::thread_icmp_ln37_fu_330_p2() {
    icmp_ln37_fu_330_p2 = (!k_0_reg_154.read().is_01() || !ap_const_lv32_0.is_01())? sc_lv<1>(): sc_lv<1>(k_0_reg_154.read() == ap_const_lv32_0);
}

void myFuncAccel::thread_icmp_ln43_1_fu_375_p2() {
    icmp_ln43_1_fu_375_p2 = (!trunc_ln43_1_fu_365_p1.read().is_01() || !ap_const_lv23_0.is_01())? sc_lv<1>(): sc_lv<1>(trunc_ln43_1_fu_365_p1.read() == ap_const_lv23_0);
}

void myFuncAccel::thread_icmp_ln43_2_fu_345_p2() {
    icmp_ln43_2_fu_345_p2 = (!tmp_6_fu_336_p4.read().is_01() || !ap_const_lv8_FF.is_01())? sc_lv<1>(): sc_lv<1>(tmp_6_fu_336_p4.read() != ap_const_lv8_FF);
}

void myFuncAccel::thread_icmp_ln43_3_fu_248_p2() {
    icmp_ln43_3_fu_248_p2 = (!trunc_ln43_fu_244_p1.read().is_01() || !ap_const_lv23_0.is_01())? sc_lv<1>(): sc_lv<1>(trunc_ln43_fu_244_p1.read() == ap_const_lv23_0);
}

void myFuncAccel::thread_icmp_ln43_fu_369_p2() {
    icmp_ln43_fu_369_p2 = (!tmp_1_fu_355_p4.read().is_01() || !ap_const_lv8_FF.is_01())? sc_lv<1>(): sc_lv<1>(tmp_1_fu_355_p4.read() != ap_const_lv8_FF);
}

void myFuncAccel::thread_icmp_ln46_fu_302_p2() {
    icmp_ln46_fu_302_p2 = (!r_0_reg_166.read().is_01() || !ap_const_lv32_0.is_01())? sc_lv<1>(): sc_lv<1>(r_0_reg_166.read() == ap_const_lv32_0);
}

void myFuncAccel::thread_icmp_ln47_fu_417_p2() {
    icmp_ln47_fu_417_p2 = (!l_1_reg_214.read().is_01() || !dim.read().is_01())? sc_lv<1>(): sc_lv<1>(l_1_reg_214.read() == dim.read());
}

void myFuncAccel::thread_icmp_ln49_fu_428_p2() {
    icmp_ln49_fu_428_p2 = (!l_1_reg_214.read().is_01() || !ap_const_lv32_0.is_01())? sc_lv<1>(): sc_lv<1>(l_1_reg_214.read() == ap_const_lv32_0);
}

void myFuncAccel::thread_k_fu_296_p2() {
    k_fu_296_p2 = (!k_0_reg_154.read().is_01() || !ap_const_lv32_1.is_01())? sc_lv<32>(): (sc_biguint<32>(k_0_reg_154.read()) + sc_biguint<32>(ap_const_lv32_1));
}

void myFuncAccel::thread_l_2_fu_422_p2() {
    l_2_fu_422_p2 = (!l_1_reg_214.read().is_01() || !ap_const_lv32_1.is_01())? sc_lv<32>(): (sc_biguint<32>(l_1_reg_214.read()) + sc_biguint<32>(ap_const_lv32_1));
}

void myFuncAccel::thread_l_fu_313_p2() {
    l_fu_313_p2 = (!l_0_reg_190.read().is_01() || !ap_const_lv32_1.is_01())? sc_lv<32>(): (sc_biguint<32>(l_0_reg_190.read()) + sc_biguint<32>(ap_const_lv32_1));
}

void myFuncAccel::thread_or_ln43_1_fu_387_p2() {
    or_ln43_1_fu_387_p2 = (icmp_ln43_3_fu_248_p2.read() | icmp_ln43_2_fu_345_p2.read());
}

void myFuncAccel::thread_or_ln43_fu_381_p2() {
    or_ln43_fu_381_p2 = (icmp_ln43_1_fu_375_p2.read() | icmp_ln43_fu_369_p2.read());
}

void myFuncAccel::thread_r_fu_411_p2() {
    r_fu_411_p2 = (select_ln43_fu_403_p3.read() & r_0_reg_166.read());
}

void myFuncAccel::thread_select_ln43_fu_403_p3() {
    select_ln43_fu_403_p3 = (!and_ln43_1_fu_397_p2.read()[0].is_01())? sc_lv<32>(): ((and_ln43_1_fu_397_p2.read()[0].to_bool())? ap_const_lv32_FFFFFFFF: ap_const_lv32_0);
}

void myFuncAccel::thread_tmp_1_fu_355_p4() {
    tmp_1_fu_355_p4 = bitcast_ln43_fu_351_p1.read().range(30, 23);
}

void myFuncAccel::thread_tmp_6_fu_336_p4() {
    tmp_6_fu_336_p4 = bitcast_ln43_1_fu_240_p1.read().range(30, 23);
}

void myFuncAccel::thread_trunc_ln43_1_fu_365_p1() {
    trunc_ln43_1_fu_365_p1 = bitcast_ln43_fu_351_p1.read().range(23-1, 0);
}

void myFuncAccel::thread_trunc_ln43_fu_244_p1() {
    trunc_ln43_fu_244_p1 = bitcast_ln43_1_fu_240_p1.read().range(23-1, 0);
}

void myFuncAccel::thread_zext_ln35_fu_325_p1() {
    zext_ln35_fu_325_p1 = esl_zext<64,32>(add_ln35_fu_319_p2.read());
}

void myFuncAccel::thread_zext_ln37_fu_270_p1() {
    zext_ln37_fu_270_p1 = esl_zext<64,32>(phi_mul1_reg_143.read());
}

void myFuncAccel::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(icmp_ln20_fu_259_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else {
                ap_NS_fsm = ap_ST_fsm_state3;
            }
            break;
        case 4 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && esl_seteq<1,1,1>(icmp_ln26_fu_291_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state16;
            } else {
                ap_NS_fsm = ap_ST_fsm_state4;
            }
            break;
        case 8 : 
            ap_NS_fsm = ap_ST_fsm_state5;
            break;
        case 16 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln33_fu_308_p2.read()) && !((esl_seteq<1,1,1>(ap_const_logic_0, data1_rsp_empty_n.read()) && 
  esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln33_fu_308_p2.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, data2_req_full_n.read()) && 
  esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln33_fu_308_p2.read()))))) {
                ap_NS_fsm = ap_ST_fsm_state15;
            } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln33_fu_308_p2.read()) && !((esl_seteq<1,1,1>(ap_const_logic_0, data1_rsp_empty_n.read()) && 
  esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln33_fu_308_p2.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, data2_req_full_n.read()) && 
  esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln33_fu_308_p2.read()))))) {
                ap_NS_fsm = ap_ST_fsm_state6;
            } else {
                ap_NS_fsm = ap_ST_fsm_state5;
            }
            break;
        case 32 : 
            ap_NS_fsm = ap_ST_fsm_state7;
            break;
        case 64 : 
            ap_NS_fsm = ap_ST_fsm_state8;
            break;
        case 128 : 
            ap_NS_fsm = ap_ST_fsm_state9;
            break;
        case 256 : 
            ap_NS_fsm = ap_ST_fsm_state10;
            break;
        case 512 : 
            ap_NS_fsm = ap_ST_fsm_state11;
            break;
        case 1024 : 
            ap_NS_fsm = ap_ST_fsm_state12;
            break;
        case 2048 : 
            ap_NS_fsm = ap_ST_fsm_state13;
            break;
        case 4096 : 
            ap_NS_fsm = ap_ST_fsm_state14;
            break;
        case 8192 : 
            ap_NS_fsm = ap_ST_fsm_state5;
            break;
        case 16384 : 
            ap_NS_fsm = ap_ST_fsm_state3;
            break;
        case 32768 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read()) && !(esl_seteq<1,1,1>(ap_const_logic_0, data2_req_full_n.read()) && esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op121_write_state16.read())) && (esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln47_fu_417_p2.read()) || 
  esl_seteq<1,1,1>(icmp_ln46_reg_502.read(), ap_const_lv1_1)))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln46_reg_502.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln47_fu_417_p2.read()) && !(esl_seteq<1,1,1>(ap_const_logic_0, data2_req_full_n.read()) && esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op121_write_state16.read())))) {
                ap_NS_fsm = ap_ST_fsm_state16;
            } else {
                ap_NS_fsm = ap_ST_fsm_state16;
            }
            break;
        default : 
            ap_NS_fsm =  (sc_lv<16>) ("XXXXXXXXXXXXXXXX");
            break;
    }
}

void myFuncAccel::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst\" :  \"" << ap_rst.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"ap_start\" :  \"" << ap_start.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"ap_done\" :  \"" << ap_done.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_idle\" :  \"" << ap_idle.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_ready\" :  \"" << ap_ready.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"size\" :  \"" << size.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"dim\" :  \"" << dim.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"threshold\" :  \"" << threshold.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"data0_address0\" :  \"" << data0_address0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"data0_ce0\" :  \"" << data0_ce0.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"data0_q0\" :  \"" << data0_q0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"data1_req_din\" :  \"" << data1_req_din.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"data1_req_full_n\" :  \"" << data1_req_full_n.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"data1_req_write\" :  \"" << data1_req_write.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"data1_rsp_empty_n\" :  \"" << data1_rsp_empty_n.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"data1_rsp_read\" :  \"" << data1_rsp_read.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"data1_address\" :  \"" << data1_address.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"data1_datain\" :  \"" << data1_datain.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"data1_dataout\" :  \"" << data1_dataout.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"data1_size\" :  \"" << data1_size.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"data2_req_din\" :  \"" << data2_req_din.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"data2_req_full_n\" :  \"" << data2_req_full_n.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"data2_req_write\" :  \"" << data2_req_write.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"data2_rsp_empty_n\" :  \"" << data2_rsp_empty_n.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"data2_rsp_read\" :  \"" << data2_rsp_read.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"data2_address\" :  \"" << data2_address.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"data2_datain\" :  \"" << data2_datain.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"data2_dataout\" :  \"" << data2_dataout.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"data2_size\" :  \"" << data2_size.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

