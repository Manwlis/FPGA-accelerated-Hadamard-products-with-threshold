// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="myFuncAccel,hls_ip_2019_1,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z010i-clg225-1L,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.750000,HLS_SYN_LAT=104801,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=5,HLS_SYN_FF=975,HLS_SYN_LUT=1627,HLS_VERSION=2019_1}" *)

module myFuncAccel (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        size,
        dim,
        threshold,
        data0_address0,
        data0_ce0,
        data0_q0,
        data1_req_din,
        data1_req_full_n,
        data1_req_write,
        data1_rsp_empty_n,
        data1_rsp_read,
        data1_address,
        data1_datain,
        data1_dataout,
        data1_size,
        data2_req_din,
        data2_req_full_n,
        data2_req_write,
        data2_rsp_empty_n,
        data2_rsp_read,
        data2_address,
        data2_datain,
        data2_dataout,
        data2_size
);

parameter    ap_ST_fsm_state1 = 16'd1;
parameter    ap_ST_fsm_state2 = 16'd2;
parameter    ap_ST_fsm_state3 = 16'd4;
parameter    ap_ST_fsm_state4 = 16'd8;
parameter    ap_ST_fsm_state5 = 16'd16;
parameter    ap_ST_fsm_state6 = 16'd32;
parameter    ap_ST_fsm_state7 = 16'd64;
parameter    ap_ST_fsm_state8 = 16'd128;
parameter    ap_ST_fsm_state9 = 16'd256;
parameter    ap_ST_fsm_state10 = 16'd512;
parameter    ap_ST_fsm_state11 = 16'd1024;
parameter    ap_ST_fsm_state12 = 16'd2048;
parameter    ap_ST_fsm_state13 = 16'd4096;
parameter    ap_ST_fsm_state14 = 16'd8192;
parameter    ap_ST_fsm_state15 = 16'd16384;
parameter    ap_ST_fsm_state16 = 16'd32768;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] size;
input  [31:0] dim;
input  [31:0] threshold;
output  [3:0] data0_address0;
output   data0_ce0;
input  [31:0] data0_q0;
output   data1_req_din;
input   data1_req_full_n;
output   data1_req_write;
input   data1_rsp_empty_n;
output   data1_rsp_read;
output  [31:0] data1_address;
input  [31:0] data1_datain;
output  [31:0] data1_dataout;
output  [31:0] data1_size;
output   data2_req_din;
input   data2_req_full_n;
output   data2_req_write;
input   data2_rsp_empty_n;
output   data2_rsp_read;
output  [31:0] data2_address;
input  [31:0] data2_datain;
output  [31:0] data2_dataout;
output  [31:0] data2_size;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg data0_ce0;
reg data1_req_write;
reg data1_rsp_read;
reg data2_req_din;
reg data2_req_write;
reg[31:0] data2_dataout;

(* fsm_encoding = "none" *) reg   [15:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [31:0] bitcast_ln43_1_fu_240_p1;
wire   [0:0] icmp_ln43_3_fu_248_p2;
wire   [31:0] add_ln20_fu_254_p2;
reg   [31:0] add_ln20_reg_465;
wire    ap_CS_fsm_state2;
wire   [31:0] i_fu_264_p2;
reg   [31:0] i_reg_473;
reg   [31:0] data1_addr_reg_478;
wire   [0:0] icmp_ln20_fu_259_p2;
reg   [31:0] data2_addr_reg_484;
wire   [31:0] add_ln26_fu_286_p2;
reg   [31:0] add_ln26_reg_489;
wire    ap_CS_fsm_state3;
wire   [31:0] k_fu_296_p2;
reg   [31:0] k_reg_497;
wire   [0:0] icmp_ln46_fu_302_p2;
reg   [0:0] icmp_ln46_reg_502;
wire   [0:0] icmp_ln26_fu_291_p2;
wire   [31:0] l_fu_313_p2;
reg   [31:0] l_reg_509;
wire    ap_CS_fsm_state5;
wire   [0:0] icmp_ln33_fu_308_p2;
reg    ap_block_state5;
reg   [31:0] data1_addr_read_reg_519;
wire   [0:0] icmp_ln43_2_fu_345_p2;
wire    ap_CS_fsm_state6;
wire   [31:0] grp_fu_230_p2;
reg   [31:0] tmp_2_reg_537;
wire    ap_CS_fsm_state9;
wire   [31:0] grp_fu_225_p2;
wire    ap_CS_fsm_state14;
wire   [31:0] r_fu_411_p2;
wire    ap_CS_fsm_state15;
wire   [31:0] l_2_fu_422_p2;
wire    ap_CS_fsm_state16;
wire   [0:0] icmp_ln47_fu_417_p2;
reg    ap_predicate_op121_write_state16;
reg    ap_block_state16;
reg   [31:0] i_0_reg_132;
reg   [31:0] phi_mul1_reg_143;
reg   [31:0] k_0_reg_154;
reg   [31:0] r_0_reg_166;
reg   [31:0] phi_mul_reg_178;
reg   [31:0] l_0_reg_190;
wire    ap_CS_fsm_state4;
reg   [31:0] temp_0_reg_201;
reg   [31:0] l_1_reg_214;
wire   [63:0] zext_ln35_fu_325_p1;
wire   [63:0] zext_ln37_fu_270_p1;
wire   [0:0] icmp_ln37_fu_330_p2;
wire   [0:0] icmp_ln49_fu_428_p2;
wire    ap_CS_fsm_state10;
wire   [22:0] trunc_ln43_fu_244_p1;
wire   [31:0] add_ln35_fu_319_p2;
wire   [7:0] tmp_6_fu_336_p4;
wire   [31:0] bitcast_ln43_fu_351_p1;
wire   [7:0] tmp_1_fu_355_p4;
wire   [22:0] trunc_ln43_1_fu_365_p1;
wire   [0:0] icmp_ln43_1_fu_375_p2;
wire   [0:0] icmp_ln43_fu_369_p2;
wire   [0:0] or_ln43_fu_381_p2;
wire   [0:0] or_ln43_1_fu_387_p2;
wire   [0:0] and_ln43_fu_391_p2;
wire   [0:0] grp_fu_235_p2;
wire   [0:0] and_ln43_1_fu_397_p2;
wire   [31:0] select_ln43_fu_403_p3;
reg    grp_fu_235_ce;
reg   [15:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 16'd1;
end

myFuncAccel_fadd_32ns_32ns_32_5_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
myFuncAccel_fadd_32ns_32ns_32_5_full_dsp_1_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(temp_0_reg_201),
    .din1(tmp_2_reg_537),
    .ce(1'b1),
    .dout(grp_fu_225_p2)
);

myFuncAccel_fmul_32ns_32ns_32_4_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
myFuncAccel_fmul_32ns_32ns_32_4_max_dsp_1_U2(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(data0_q0),
    .din1(data1_addr_read_reg_519),
    .ce(1'b1),
    .dout(grp_fu_230_p2)
);

myFuncAccel_fcmp_32ns_32ns_1_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
myFuncAccel_fcmp_32ns_32ns_1_2_1_U3(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(temp_0_reg_201),
    .din1(threshold),
    .ce(grp_fu_235_ce),
    .opcode(5'd2),
    .dout(grp_fu_235_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_predicate_op121_write_state16 == 1'b1) & (data2_req_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state16) & ((icmp_ln47_fu_417_p2 == 1'd1) | (icmp_ln46_reg_502 == 1'd1)))) begin
        i_0_reg_132 <= i_reg_473;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        i_0_reg_132 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        k_0_reg_154 <= k_reg_497;
    end else if (((icmp_ln20_fu_259_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        k_0_reg_154 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        l_0_reg_190 <= l_reg_509;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        l_0_reg_190 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln46_fu_302_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3) & (icmp_ln26_fu_291_p2 == 1'd1))) begin
        l_1_reg_214 <= 32'd0;
    end else if ((~((ap_predicate_op121_write_state16 == 1'b1) & (data2_req_full_n == 1'b0)) & (icmp_ln47_fu_417_p2 == 1'd0) & (icmp_ln46_reg_502 == 1'd0) & (1'b1 == ap_CS_fsm_state16))) begin
        l_1_reg_214 <= l_2_fu_422_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_predicate_op121_write_state16 == 1'b1) & (data2_req_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state16) & ((icmp_ln47_fu_417_p2 == 1'd1) | (icmp_ln46_reg_502 == 1'd1)))) begin
        phi_mul1_reg_143 <= add_ln20_reg_465;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        phi_mul1_reg_143 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        phi_mul_reg_178 <= add_ln26_reg_489;
    end else if (((icmp_ln20_fu_259_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        phi_mul_reg_178 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        r_0_reg_166 <= r_fu_411_p2;
    end else if (((icmp_ln20_fu_259_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        r_0_reg_166 <= 32'd1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        temp_0_reg_201 <= grp_fu_225_p2;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        temp_0_reg_201 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        add_ln20_reg_465 <= add_ln20_fu_254_p2;
        i_reg_473 <= i_fu_264_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        add_ln26_reg_489 <= add_ln26_fu_286_p2;
        k_reg_497 <= k_fu_296_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~(((data2_req_full_n == 1'b0) & (icmp_ln33_fu_308_p2 == 1'd1)) | ((icmp_ln33_fu_308_p2 == 1'd0) & (data1_rsp_empty_n == 1'b0))) & (icmp_ln33_fu_308_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        data1_addr_read_reg_519 <= data1_datain;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln20_fu_259_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        data1_addr_reg_478 <= zext_ln37_fu_270_p1;
        data2_addr_reg_484 <= zext_ln37_fu_270_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln26_fu_291_p2 == 1'd1))) begin
        icmp_ln46_reg_502 <= icmp_ln46_fu_302_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~(((data2_req_full_n == 1'b0) & (icmp_ln33_fu_308_p2 == 1'd1)) | ((icmp_ln33_fu_308_p2 == 1'd0) & (data1_rsp_empty_n == 1'b0))) & (1'b1 == ap_CS_fsm_state5))) begin
        l_reg_509 <= l_fu_313_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        tmp_2_reg_537 <= grp_fu_230_p2;
    end
end

always @ (*) begin
    if (((icmp_ln20_fu_259_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln20_fu_259_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((~(((data2_req_full_n == 1'b0) & (icmp_ln33_fu_308_p2 == 1'd1)) | ((icmp_ln33_fu_308_p2 == 1'd0) & (data1_rsp_empty_n == 1'b0))) & (1'b1 == ap_CS_fsm_state5))) begin
        data0_ce0 = 1'b1;
    end else begin
        data0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln26_fu_291_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        data1_req_write = 1'b1;
    end else begin
        data1_req_write = 1'b0;
    end
end

always @ (*) begin
    if ((~(((data2_req_full_n == 1'b0) & (icmp_ln33_fu_308_p2 == 1'd1)) | ((icmp_ln33_fu_308_p2 == 1'd0) & (data1_rsp_empty_n == 1'b0))) & (icmp_ln33_fu_308_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        data1_rsp_read = 1'b1;
    end else begin
        data1_rsp_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_predicate_op121_write_state16 == 1'b1) & (data2_req_full_n == 1'b0)) & (ap_predicate_op121_write_state16 == 1'b1) & (1'b1 == ap_CS_fsm_state16))) begin
        data2_dataout = 32'd0;
    end else if ((~(((data2_req_full_n == 1'b0) & (icmp_ln33_fu_308_p2 == 1'd1)) | ((icmp_ln33_fu_308_p2 == 1'd0) & (data1_rsp_empty_n == 1'b0))) & (1'b1 == ap_CS_fsm_state5) & (icmp_ln33_fu_308_p2 == 1'd1))) begin
        data2_dataout = temp_0_reg_201;
    end else begin
        data2_dataout = 'bx;
    end
end

always @ (*) begin
    if (((~((ap_predicate_op121_write_state16 == 1'b1) & (data2_req_full_n == 1'b0)) & (ap_predicate_op121_write_state16 == 1'b1) & (1'b1 == ap_CS_fsm_state16)) | (~((ap_predicate_op121_write_state16 == 1'b1) & (data2_req_full_n == 1'b0)) & (icmp_ln47_fu_417_p2 == 1'd0) & (icmp_ln46_reg_502 == 1'd0) & (1'b1 == ap_CS_fsm_state16) & (icmp_ln49_fu_428_p2 == 1'd1)) | (~(((data2_req_full_n == 1'b0) & (icmp_ln33_fu_308_p2 == 1'd1)) | ((icmp_ln33_fu_308_p2 == 1'd0) & (data1_rsp_empty_n == 1'b0))) & (1'b1 == ap_CS_fsm_state5) & (icmp_ln33_fu_308_p2 == 1'd1)))) begin
        data2_req_din = 1'b1;
    end else begin
        data2_req_din = 1'b0;
    end
end

always @ (*) begin
    if (((~((ap_predicate_op121_write_state16 == 1'b1) & (data2_req_full_n == 1'b0)) & (ap_predicate_op121_write_state16 == 1'b1) & (1'b1 == ap_CS_fsm_state16)) | (~((ap_predicate_op121_write_state16 == 1'b1) & (data2_req_full_n == 1'b0)) & (icmp_ln47_fu_417_p2 == 1'd0) & (icmp_ln46_reg_502 == 1'd0) & (1'b1 == ap_CS_fsm_state16) & (icmp_ln49_fu_428_p2 == 1'd1)) | (~(((data2_req_full_n == 1'b0) & (icmp_ln33_fu_308_p2 == 1'd1)) | ((icmp_ln33_fu_308_p2 == 1'd0) & (data1_rsp_empty_n == 1'b0))) & (1'b1 == ap_CS_fsm_state5) & (icmp_ln33_fu_308_p2 == 1'd1)))) begin
        data2_req_write = 1'b1;
    end else begin
        data2_req_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state15) | (~(((data2_req_full_n == 1'b0) & (icmp_ln33_fu_308_p2 == 1'd1)) | ((icmp_ln33_fu_308_p2 == 1'd0) & (data1_rsp_empty_n == 1'b0))) & (1'b1 == ap_CS_fsm_state5)))) begin
        grp_fu_235_ce = 1'b1;
    end else begin
        grp_fu_235_ce = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln20_fu_259_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln26_fu_291_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            if ((~(((data2_req_full_n == 1'b0) & (icmp_ln33_fu_308_p2 == 1'd1)) | ((icmp_ln33_fu_308_p2 == 1'd0) & (data1_rsp_empty_n == 1'b0))) & (1'b1 == ap_CS_fsm_state5) & (icmp_ln33_fu_308_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end else if ((~(((data2_req_full_n == 1'b0) & (icmp_ln33_fu_308_p2 == 1'd1)) | ((icmp_ln33_fu_308_p2 == 1'd0) & (data1_rsp_empty_n == 1'b0))) & (icmp_ln33_fu_308_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state16 : begin
            if ((~((ap_predicate_op121_write_state16 == 1'b1) & (data2_req_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state16) & ((icmp_ln47_fu_417_p2 == 1'd1) | (icmp_ln46_reg_502 == 1'd1)))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else if ((~((ap_predicate_op121_write_state16 == 1'b1) & (data2_req_full_n == 1'b0)) & (icmp_ln47_fu_417_p2 == 1'd0) & (icmp_ln46_reg_502 == 1'd0) & (1'b1 == ap_CS_fsm_state16))) begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln20_fu_254_p2 = (phi_mul1_reg_143 + dim);

assign add_ln26_fu_286_p2 = (phi_mul_reg_178 + dim);

assign add_ln35_fu_319_p2 = (l_0_reg_190 + phi_mul_reg_178);

assign and_ln43_1_fu_397_p2 = (grp_fu_235_p2 & and_ln43_fu_391_p2);

assign and_ln43_fu_391_p2 = (or_ln43_fu_381_p2 & or_ln43_1_fu_387_p2);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

always @ (*) begin
    ap_block_state16 = ((ap_predicate_op121_write_state16 == 1'b1) & (data2_req_full_n == 1'b0));
end

always @ (*) begin
    ap_block_state5 = (((data2_req_full_n == 1'b0) & (icmp_ln33_fu_308_p2 == 1'd1)) | ((icmp_ln33_fu_308_p2 == 1'd0) & (data1_rsp_empty_n == 1'b0)));
end

always @ (*) begin
    ap_predicate_op121_write_state16 = ((icmp_ln47_fu_417_p2 == 1'd0) & (icmp_ln46_reg_502 == 1'd0));
end

assign bitcast_ln43_1_fu_240_p1 = threshold;

assign bitcast_ln43_fu_351_p1 = temp_0_reg_201;

assign data0_address0 = zext_ln35_fu_325_p1;

assign data1_address = data1_addr_reg_478;

assign data1_dataout = 32'd0;

assign data1_req_din = 1'b0;

assign data1_size = dim;

assign data2_address = data2_addr_reg_484;

assign data2_rsp_read = 1'b0;

assign data2_size = dim;

assign i_fu_264_p2 = (i_0_reg_132 + 32'd1);

assign icmp_ln20_fu_259_p2 = ((i_0_reg_132 == size) ? 1'b1 : 1'b0);

assign icmp_ln26_fu_291_p2 = ((k_0_reg_154 == dim) ? 1'b1 : 1'b0);

assign icmp_ln33_fu_308_p2 = ((l_0_reg_190 == dim) ? 1'b1 : 1'b0);

assign icmp_ln37_fu_330_p2 = ((k_0_reg_154 == 32'd0) ? 1'b1 : 1'b0);

assign icmp_ln43_1_fu_375_p2 = ((trunc_ln43_1_fu_365_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln43_2_fu_345_p2 = ((tmp_6_fu_336_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln43_3_fu_248_p2 = ((trunc_ln43_fu_244_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln43_fu_369_p2 = ((tmp_1_fu_355_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln46_fu_302_p2 = ((r_0_reg_166 == 32'd0) ? 1'b1 : 1'b0);

assign icmp_ln47_fu_417_p2 = ((l_1_reg_214 == dim) ? 1'b1 : 1'b0);

assign icmp_ln49_fu_428_p2 = ((l_1_reg_214 == 32'd0) ? 1'b1 : 1'b0);

assign k_fu_296_p2 = (k_0_reg_154 + 32'd1);

assign l_2_fu_422_p2 = (l_1_reg_214 + 32'd1);

assign l_fu_313_p2 = (l_0_reg_190 + 32'd1);

assign or_ln43_1_fu_387_p2 = (icmp_ln43_3_fu_248_p2 | icmp_ln43_2_fu_345_p2);

assign or_ln43_fu_381_p2 = (icmp_ln43_fu_369_p2 | icmp_ln43_1_fu_375_p2);

assign r_fu_411_p2 = (select_ln43_fu_403_p3 & r_0_reg_166);

assign select_ln43_fu_403_p3 = ((and_ln43_1_fu_397_p2[0:0] === 1'b1) ? 32'd4294967295 : 32'd0);

assign tmp_1_fu_355_p4 = {{bitcast_ln43_fu_351_p1[30:23]}};

assign tmp_6_fu_336_p4 = {{bitcast_ln43_1_fu_240_p1[30:23]}};

assign trunc_ln43_1_fu_365_p1 = bitcast_ln43_fu_351_p1[22:0];

assign trunc_ln43_fu_244_p1 = bitcast_ln43_1_fu_240_p1[22:0];

assign zext_ln35_fu_325_p1 = add_ln35_fu_319_p2;

assign zext_ln37_fu_270_p1 = phi_mul1_reg_143;

endmodule //myFuncAccel
