// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="myFuncAccel4,hls_ip_2019_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z020-clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.974200,HLS_SYN_LAT=1028,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=80,HLS_SYN_FF=8052,HLS_SYN_LUT=13011,HLS_VERSION=2019_1}" *)

module myFuncAccel4 (
        ap_clk,
        ap_rst_n,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        size,
        dim,
        threshold,
        data0_0,
        data0_1,
        data0_2,
        data0_3,
        data0_4,
        data0_5,
        data0_6,
        data0_7,
        data0_8,
        data0_9,
        data0_10,
        data0_11,
        data0_12,
        data0_13,
        data0_14,
        data0_15,
        data1_V_TDATA,
        data1_V_TVALID,
        data1_V_TREADY,
        data_out_V_TDATA,
        data_out_V_TVALID,
        data_out_V_TREADY
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_pp0_stage0 = 3'd2;
parameter    ap_ST_fsm_state30 = 3'd4;

input   ap_clk;
input   ap_rst_n;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] size;
input  [31:0] dim;
input  [31:0] threshold;
input  [31:0] data0_0;
input  [31:0] data0_1;
input  [31:0] data0_2;
input  [31:0] data0_3;
input  [31:0] data0_4;
input  [31:0] data0_5;
input  [31:0] data0_6;
input  [31:0] data0_7;
input  [31:0] data0_8;
input  [31:0] data0_9;
input  [31:0] data0_10;
input  [31:0] data0_11;
input  [31:0] data0_12;
input  [31:0] data0_13;
input  [31:0] data0_14;
input  [31:0] data0_15;
input  [127:0] data1_V_TDATA;
input   data1_V_TVALID;
output   data1_V_TREADY;
output  [127:0] data_out_V_TDATA;
output   data_out_V_TVALID;
input   data_out_V_TREADY;

reg ap_done;
reg ap_idle;
reg ap_ready;

 reg    ap_rst_n_inv;
(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [127:0] data1_V_0_data_out;
wire    data1_V_0_vld_in;
wire    data1_V_0_vld_out;
wire    data1_V_0_ack_in;
reg    data1_V_0_ack_out;
reg   [127:0] data1_V_0_payload_A;
reg   [127:0] data1_V_0_payload_B;
reg    data1_V_0_sel_rd;
reg    data1_V_0_sel_wr;
wire    data1_V_0_sel;
wire    data1_V_0_load_A;
wire    data1_V_0_load_B;
reg   [1:0] data1_V_0_state;
wire    data1_V_0_state_cmp_full;
reg   [127:0] data_out_V_1_data_out;
reg    data_out_V_1_vld_in;
wire    data_out_V_1_vld_out;
wire    data_out_V_1_ack_in;
wire    data_out_V_1_ack_out;
reg   [127:0] data_out_V_1_payload_A;
reg   [127:0] data_out_V_1_payload_B;
reg    data_out_V_1_sel_rd;
reg    data_out_V_1_sel_wr;
wire    data_out_V_1_sel;
wire    data_out_V_1_load_A;
wire    data_out_V_1_load_B;
reg   [1:0] data_out_V_1_state;
wire    data_out_V_1_state_cmp_full;
reg    data1_V_TDATA_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_pp0_stage0;
wire   [0:0] icmp_ln45_fu_410_p2;
reg    data_out_V_TDATA_blk_n;
reg    ap_enable_reg_pp0_iter26;
reg   [0:0] icmp_ln45_reg_878;
reg   [0:0] icmp_ln45_reg_878_pp0_iter25_reg;
reg    ap_enable_reg_pp0_iter27;
reg   [0:0] icmp_ln45_reg_878_pp0_iter26_reg;
reg   [31:0] i_1_reg_237;
wire   [31:0] bitcast_ln69_1_fu_396_p1;
wire   [0:0] icmp_ln69_3_fu_404_p2;
reg    ap_block_state2_pp0_stage0_iter0;
wire    ap_block_state3_pp0_stage0_iter1;
wire    ap_block_state4_pp0_stage0_iter2;
wire    ap_block_state5_pp0_stage0_iter3;
wire    ap_block_state6_pp0_stage0_iter4;
wire    ap_block_state7_pp0_stage0_iter5;
wire    ap_block_state8_pp0_stage0_iter6;
wire    ap_block_state9_pp0_stage0_iter7;
wire    ap_block_state10_pp0_stage0_iter8;
wire    ap_block_state11_pp0_stage0_iter9;
wire    ap_block_state12_pp0_stage0_iter10;
wire    ap_block_state13_pp0_stage0_iter11;
wire    ap_block_state14_pp0_stage0_iter12;
wire    ap_block_state15_pp0_stage0_iter13;
wire    ap_block_state16_pp0_stage0_iter14;
wire    ap_block_state17_pp0_stage0_iter15;
wire    ap_block_state18_pp0_stage0_iter16;
wire    ap_block_state19_pp0_stage0_iter17;
wire    ap_block_state20_pp0_stage0_iter18;
wire    ap_block_state21_pp0_stage0_iter19;
wire    ap_block_state22_pp0_stage0_iter20;
wire    ap_block_state23_pp0_stage0_iter21;
wire    ap_block_state24_pp0_stage0_iter22;
wire    ap_block_state25_pp0_stage0_iter23;
wire    ap_block_state26_pp0_stage0_iter24;
wire    ap_block_state27_pp0_stage0_iter25;
wire    ap_block_state28_pp0_stage0_iter26;
reg    ap_block_state28_io;
wire    ap_block_state29_pp0_stage0_iter27;
reg    ap_block_state29_io;
reg    ap_block_pp0_stage0_11001;
reg   [0:0] icmp_ln45_reg_878_pp0_iter1_reg;
reg   [0:0] icmp_ln45_reg_878_pp0_iter2_reg;
reg   [0:0] icmp_ln45_reg_878_pp0_iter3_reg;
reg   [0:0] icmp_ln45_reg_878_pp0_iter4_reg;
reg   [0:0] icmp_ln45_reg_878_pp0_iter5_reg;
reg   [0:0] icmp_ln45_reg_878_pp0_iter6_reg;
reg   [0:0] icmp_ln45_reg_878_pp0_iter7_reg;
reg   [0:0] icmp_ln45_reg_878_pp0_iter8_reg;
reg   [0:0] icmp_ln45_reg_878_pp0_iter9_reg;
reg   [0:0] icmp_ln45_reg_878_pp0_iter10_reg;
reg   [0:0] icmp_ln45_reg_878_pp0_iter11_reg;
reg   [0:0] icmp_ln45_reg_878_pp0_iter12_reg;
reg   [0:0] icmp_ln45_reg_878_pp0_iter13_reg;
reg   [0:0] icmp_ln45_reg_878_pp0_iter14_reg;
reg   [0:0] icmp_ln45_reg_878_pp0_iter15_reg;
reg   [0:0] icmp_ln45_reg_878_pp0_iter16_reg;
reg   [0:0] icmp_ln45_reg_878_pp0_iter17_reg;
reg   [0:0] icmp_ln45_reg_878_pp0_iter18_reg;
reg   [0:0] icmp_ln45_reg_878_pp0_iter19_reg;
reg   [0:0] icmp_ln45_reg_878_pp0_iter20_reg;
reg   [0:0] icmp_ln45_reg_878_pp0_iter21_reg;
reg   [0:0] icmp_ln45_reg_878_pp0_iter22_reg;
reg   [0:0] icmp_ln45_reg_878_pp0_iter23_reg;
reg   [0:0] icmp_ln45_reg_878_pp0_iter24_reg;
wire   [31:0] i_fu_415_p2;
wire   [31:0] bitcast_ln56_fu_425_p1;
reg   [31:0] p_Result_1_reg_895;
reg   [31:0] p_Result_1_reg_895_pp0_iter1_reg;
reg   [31:0] p_Result_1_reg_895_pp0_iter2_reg;
reg   [31:0] p_Result_1_reg_895_pp0_iter3_reg;
reg   [31:0] p_Result_1_reg_895_pp0_iter4_reg;
reg   [31:0] p_Result_s_reg_900;
reg   [31:0] p_Result_s_reg_900_pp0_iter1_reg;
reg   [31:0] p_Result_s_reg_900_pp0_iter2_reg;
reg   [31:0] p_Result_s_reg_900_pp0_iter3_reg;
reg   [31:0] p_Result_s_reg_900_pp0_iter4_reg;
reg   [31:0] p_Result_s_reg_900_pp0_iter5_reg;
reg   [31:0] p_Result_s_reg_900_pp0_iter6_reg;
reg   [31:0] p_Result_s_reg_900_pp0_iter7_reg;
reg   [31:0] p_Result_s_reg_900_pp0_iter8_reg;
reg   [31:0] p_Result_s_reg_900_pp0_iter9_reg;
reg   [31:0] p_Result_3_reg_905;
reg   [31:0] p_Result_3_reg_905_pp0_iter1_reg;
reg   [31:0] p_Result_3_reg_905_pp0_iter2_reg;
reg   [31:0] p_Result_3_reg_905_pp0_iter3_reg;
reg   [31:0] p_Result_3_reg_905_pp0_iter4_reg;
reg   [31:0] p_Result_3_reg_905_pp0_iter5_reg;
reg   [31:0] p_Result_3_reg_905_pp0_iter6_reg;
reg   [31:0] p_Result_3_reg_905_pp0_iter7_reg;
reg   [31:0] p_Result_3_reg_905_pp0_iter8_reg;
reg   [31:0] p_Result_3_reg_905_pp0_iter9_reg;
reg   [31:0] p_Result_3_reg_905_pp0_iter10_reg;
reg   [31:0] p_Result_3_reg_905_pp0_iter11_reg;
reg   [31:0] p_Result_3_reg_905_pp0_iter12_reg;
reg   [31:0] p_Result_3_reg_905_pp0_iter13_reg;
reg   [31:0] p_Result_3_reg_905_pp0_iter14_reg;
wire   [0:0] or_ln69_1_fu_478_p2;
wire   [31:0] grp_fu_316_p2;
reg   [31:0] tmp_2_reg_918;
wire   [31:0] grp_fu_320_p2;
reg   [31:0] tmp_2_1_reg_923;
wire   [31:0] grp_fu_324_p2;
reg   [31:0] tmp_2_2_reg_928;
wire   [31:0] grp_fu_328_p2;
reg   [31:0] tmp_2_3_reg_933;
wire   [31:0] bitcast_ln56_1_fu_483_p1;
wire   [31:0] grp_fu_248_p2;
reg   [31:0] tmp_3_reg_946;
wire   [31:0] grp_fu_332_p2;
reg   [31:0] tmp_2_0_1_reg_951;
wire   [31:0] grp_fu_253_p2;
reg   [31:0] tmp_3_1_reg_956;
wire   [31:0] grp_fu_336_p2;
reg   [31:0] tmp_2_1_1_reg_961;
wire   [31:0] grp_fu_258_p2;
reg   [31:0] tmp_3_2_reg_966;
wire   [31:0] grp_fu_340_p2;
reg   [31:0] tmp_2_2_1_reg_971;
wire   [31:0] grp_fu_263_p2;
reg   [31:0] tmp_3_3_reg_976;
wire   [31:0] grp_fu_344_p2;
reg   [31:0] tmp_2_3_1_reg_981;
wire   [31:0] bitcast_ln56_2_fu_490_p1;
wire   [31:0] grp_fu_268_p2;
reg   [31:0] tmp_3_0_1_reg_994;
wire   [31:0] grp_fu_348_p2;
reg   [31:0] tmp_2_0_2_reg_999;
wire   [31:0] grp_fu_272_p2;
reg   [31:0] tmp_3_1_1_reg_1004;
wire   [31:0] grp_fu_352_p2;
reg   [31:0] tmp_2_1_2_reg_1009;
wire   [31:0] grp_fu_276_p2;
reg   [31:0] tmp_3_2_1_reg_1014;
wire   [31:0] grp_fu_356_p2;
reg   [31:0] tmp_2_2_2_reg_1019;
wire   [31:0] grp_fu_280_p2;
reg   [31:0] tmp_3_3_1_reg_1024;
wire   [31:0] grp_fu_360_p2;
reg   [31:0] tmp_2_3_2_reg_1029;
wire   [31:0] bitcast_ln56_3_fu_497_p1;
wire   [31:0] grp_fu_284_p2;
reg   [31:0] tmp_3_0_2_reg_1042;
wire   [31:0] grp_fu_364_p2;
reg   [31:0] tmp_2_0_3_reg_1047;
wire   [31:0] grp_fu_288_p2;
reg   [31:0] tmp_3_1_2_reg_1052;
wire   [31:0] grp_fu_368_p2;
reg   [31:0] tmp_2_1_3_reg_1057;
wire   [31:0] grp_fu_292_p2;
reg   [31:0] tmp_3_2_2_reg_1062;
wire   [31:0] grp_fu_372_p2;
reg   [31:0] tmp_2_2_3_reg_1067;
wire   [31:0] grp_fu_296_p2;
reg   [31:0] tmp_3_3_2_reg_1072;
wire   [31:0] grp_fu_376_p2;
reg   [31:0] tmp_2_3_3_reg_1077;
wire   [31:0] grp_fu_300_p2;
reg   [31:0] tmp_3_0_3_reg_1082;
reg   [31:0] tmp_3_0_3_reg_1082_pp0_iter24_reg;
wire   [31:0] grp_fu_304_p2;
reg   [31:0] tmp_3_1_3_reg_1088;
reg   [31:0] tmp_3_1_3_reg_1088_pp0_iter24_reg;
wire   [31:0] grp_fu_308_p2;
reg   [31:0] tmp_3_2_3_reg_1094;
reg   [31:0] tmp_3_2_3_reg_1094_pp0_iter24_reg;
wire   [31:0] grp_fu_312_p2;
reg   [31:0] tmp_3_3_3_reg_1100;
reg   [31:0] tmp_3_3_3_reg_1100_pp0_iter24_reg;
wire   [31:0] bitcast_ln69_fu_504_p1;
reg   [31:0] bitcast_ln69_reg_1106;
wire   [31:0] bitcast_ln69_2_fu_554_p1;
reg   [31:0] bitcast_ln69_2_reg_1111;
wire   [31:0] bitcast_ln69_3_fu_604_p1;
reg   [31:0] bitcast_ln69_3_reg_1116;
wire   [31:0] bitcast_ln69_4_fu_654_p1;
reg   [31:0] bitcast_ln69_4_reg_1121;
wire   [1:0] add_ln69_fu_704_p2;
reg   [1:0] add_ln69_reg_1126;
wire   [1:0] add_ln69_1_fu_710_p2;
reg   [1:0] add_ln69_1_reg_1131;
wire   [127:0] p_Result_2_3_fu_762_p5;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_enable_reg_pp0_iter7;
reg    ap_enable_reg_pp0_iter8;
reg    ap_enable_reg_pp0_iter9;
reg    ap_enable_reg_pp0_iter10;
reg    ap_enable_reg_pp0_iter11;
reg    ap_enable_reg_pp0_iter12;
reg    ap_enable_reg_pp0_iter13;
reg    ap_enable_reg_pp0_iter14;
reg    ap_enable_reg_pp0_iter15;
reg    ap_enable_reg_pp0_iter16;
reg    ap_enable_reg_pp0_iter17;
reg    ap_enable_reg_pp0_iter18;
reg    ap_enable_reg_pp0_iter19;
reg    ap_enable_reg_pp0_iter20;
reg    ap_enable_reg_pp0_iter21;
reg    ap_enable_reg_pp0_iter22;
reg    ap_enable_reg_pp0_iter23;
reg    ap_enable_reg_pp0_iter24;
reg    ap_enable_reg_pp0_iter25;
reg    ap_block_pp0_stage0_01001;
wire   [22:0] trunc_ln69_fu_400_p1;
wire   [31:0] trunc_ln681_fu_421_p1;
wire   [7:0] tmp_4_fu_463_p4;
wire   [0:0] icmp_ln69_2_fu_472_p2;
wire   [7:0] tmp_1_fu_507_p4;
wire   [22:0] trunc_ln69_1_fu_517_p1;
wire   [0:0] icmp_ln69_1_fu_527_p2;
wire   [0:0] icmp_ln69_fu_521_p2;
wire   [0:0] or_ln69_fu_533_p2;
wire   [0:0] and_ln69_fu_539_p2;
wire   [0:0] grp_fu_380_p2;
wire   [0:0] and_ln69_1_fu_544_p2;
wire   [7:0] tmp_6_fu_557_p4;
wire   [22:0] trunc_ln69_2_fu_567_p1;
wire   [0:0] icmp_ln69_5_fu_577_p2;
wire   [0:0] icmp_ln69_4_fu_571_p2;
wire   [0:0] or_ln69_2_fu_583_p2;
wire   [0:0] and_ln69_2_fu_589_p2;
wire   [0:0] grp_fu_384_p2;
wire   [0:0] and_ln69_3_fu_594_p2;
wire   [7:0] tmp_9_fu_607_p4;
wire   [22:0] trunc_ln69_3_fu_617_p1;
wire   [0:0] icmp_ln69_7_fu_627_p2;
wire   [0:0] icmp_ln69_6_fu_621_p2;
wire   [0:0] or_ln69_3_fu_633_p2;
wire   [0:0] and_ln69_4_fu_639_p2;
wire   [0:0] grp_fu_388_p2;
wire   [0:0] and_ln69_5_fu_644_p2;
wire   [7:0] tmp_7_fu_657_p4;
wire   [22:0] trunc_ln69_4_fu_667_p1;
wire   [0:0] icmp_ln69_9_fu_677_p2;
wire   [0:0] icmp_ln69_8_fu_671_p2;
wire   [0:0] or_ln69_4_fu_683_p2;
wire   [0:0] and_ln69_6_fu_689_p2;
wire   [0:0] grp_fu_392_p2;
wire   [0:0] and_ln69_7_fu_694_p2;
wire   [1:0] zext_ln67_1_fu_600_p1;
wire   [1:0] zext_ln67_fu_550_p1;
wire   [1:0] zext_ln67_2_fu_650_p1;
wire   [1:0] zext_ln69_fu_700_p1;
wire   [2:0] zext_ln69_2_fu_719_p1;
wire   [2:0] zext_ln69_1_fu_716_p1;
wire   [2:0] add_ln69_2_fu_722_p2;
wire   [0:0] icmp_ln75_fu_728_p2;
wire   [31:0] select_ln76_3_fu_755_p3;
wire   [31:0] select_ln76_2_fu_748_p3;
wire   [31:0] select_ln76_1_fu_741_p3;
wire   [31:0] select_ln76_fu_734_p3;
reg    grp_fu_248_ce;
reg    grp_fu_253_ce;
reg    grp_fu_258_ce;
reg    grp_fu_263_ce;
reg    grp_fu_268_ce;
reg    grp_fu_272_ce;
reg    grp_fu_276_ce;
reg    grp_fu_280_ce;
reg    grp_fu_284_ce;
reg    grp_fu_288_ce;
reg    grp_fu_292_ce;
reg    grp_fu_296_ce;
reg    grp_fu_300_ce;
reg    grp_fu_304_ce;
reg    grp_fu_308_ce;
reg    grp_fu_312_ce;
reg    grp_fu_316_ce;
reg    grp_fu_320_ce;
reg    grp_fu_324_ce;
reg    grp_fu_328_ce;
reg    grp_fu_332_ce;
reg    grp_fu_336_ce;
reg    grp_fu_340_ce;
reg    grp_fu_344_ce;
reg    grp_fu_348_ce;
reg    grp_fu_352_ce;
reg    grp_fu_356_ce;
reg    grp_fu_360_ce;
reg    grp_fu_364_ce;
reg    grp_fu_368_ce;
reg    grp_fu_372_ce;
reg    grp_fu_376_ce;
reg    grp_fu_380_ce;
reg    ap_block_pp0_stage0_00001;
reg    grp_fu_384_ce;
reg    grp_fu_388_ce;
reg    grp_fu_392_ce;
wire    ap_CS_fsm_state30;
reg    ap_block_state30;
reg   [2:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 ap_CS_fsm = 3'd1;
#0 data1_V_0_sel_rd = 1'b0;
#0 data1_V_0_sel_wr = 1'b0;
#0 data1_V_0_state = 2'd0;
#0 data_out_V_1_sel_rd = 1'b0;
#0 data_out_V_1_sel_wr = 1'b0;
#0 data_out_V_1_state = 2'd0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter26 = 1'b0;
#0 ap_enable_reg_pp0_iter27 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
#0 ap_enable_reg_pp0_iter8 = 1'b0;
#0 ap_enable_reg_pp0_iter9 = 1'b0;
#0 ap_enable_reg_pp0_iter10 = 1'b0;
#0 ap_enable_reg_pp0_iter11 = 1'b0;
#0 ap_enable_reg_pp0_iter12 = 1'b0;
#0 ap_enable_reg_pp0_iter13 = 1'b0;
#0 ap_enable_reg_pp0_iter14 = 1'b0;
#0 ap_enable_reg_pp0_iter15 = 1'b0;
#0 ap_enable_reg_pp0_iter16 = 1'b0;
#0 ap_enable_reg_pp0_iter17 = 1'b0;
#0 ap_enable_reg_pp0_iter18 = 1'b0;
#0 ap_enable_reg_pp0_iter19 = 1'b0;
#0 ap_enable_reg_pp0_iter20 = 1'b0;
#0 ap_enable_reg_pp0_iter21 = 1'b0;
#0 ap_enable_reg_pp0_iter22 = 1'b0;
#0 ap_enable_reg_pp0_iter23 = 1'b0;
#0 ap_enable_reg_pp0_iter24 = 1'b0;
#0 ap_enable_reg_pp0_iter25 = 1'b0;
end

myFuncAccel4_fadd_32ns_32ns_32_5_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
myFuncAccel4_fadd_32ns_32ns_32_5_full_dsp_1_U1(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(tmp_2_reg_918),
    .din1(32'd0),
    .ce(grp_fu_248_ce),
    .dout(grp_fu_248_p2)
);

myFuncAccel4_fadd_32ns_32ns_32_5_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
myFuncAccel4_fadd_32ns_32ns_32_5_full_dsp_1_U2(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(tmp_2_1_reg_923),
    .din1(32'd0),
    .ce(grp_fu_253_ce),
    .dout(grp_fu_253_p2)
);

myFuncAccel4_fadd_32ns_32ns_32_5_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
myFuncAccel4_fadd_32ns_32ns_32_5_full_dsp_1_U3(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(tmp_2_2_reg_928),
    .din1(32'd0),
    .ce(grp_fu_258_ce),
    .dout(grp_fu_258_p2)
);

myFuncAccel4_fadd_32ns_32ns_32_5_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
myFuncAccel4_fadd_32ns_32ns_32_5_full_dsp_1_U4(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(tmp_2_3_reg_933),
    .din1(32'd0),
    .ce(grp_fu_263_ce),
    .dout(grp_fu_263_p2)
);

myFuncAccel4_fadd_32ns_32ns_32_5_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
myFuncAccel4_fadd_32ns_32ns_32_5_full_dsp_1_U5(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(tmp_3_reg_946),
    .din1(tmp_2_0_1_reg_951),
    .ce(grp_fu_268_ce),
    .dout(grp_fu_268_p2)
);

myFuncAccel4_fadd_32ns_32ns_32_5_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
myFuncAccel4_fadd_32ns_32ns_32_5_full_dsp_1_U6(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(tmp_3_1_reg_956),
    .din1(tmp_2_1_1_reg_961),
    .ce(grp_fu_272_ce),
    .dout(grp_fu_272_p2)
);

myFuncAccel4_fadd_32ns_32ns_32_5_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
myFuncAccel4_fadd_32ns_32ns_32_5_full_dsp_1_U7(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(tmp_3_2_reg_966),
    .din1(tmp_2_2_1_reg_971),
    .ce(grp_fu_276_ce),
    .dout(grp_fu_276_p2)
);

myFuncAccel4_fadd_32ns_32ns_32_5_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
myFuncAccel4_fadd_32ns_32ns_32_5_full_dsp_1_U8(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(tmp_3_3_reg_976),
    .din1(tmp_2_3_1_reg_981),
    .ce(grp_fu_280_ce),
    .dout(grp_fu_280_p2)
);

myFuncAccel4_fadd_32ns_32ns_32_5_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
myFuncAccel4_fadd_32ns_32ns_32_5_full_dsp_1_U9(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(tmp_3_0_1_reg_994),
    .din1(tmp_2_0_2_reg_999),
    .ce(grp_fu_284_ce),
    .dout(grp_fu_284_p2)
);

myFuncAccel4_fadd_32ns_32ns_32_5_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
myFuncAccel4_fadd_32ns_32ns_32_5_full_dsp_1_U10(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(tmp_3_1_1_reg_1004),
    .din1(tmp_2_1_2_reg_1009),
    .ce(grp_fu_288_ce),
    .dout(grp_fu_288_p2)
);

myFuncAccel4_fadd_32ns_32ns_32_5_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
myFuncAccel4_fadd_32ns_32ns_32_5_full_dsp_1_U11(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(tmp_3_2_1_reg_1014),
    .din1(tmp_2_2_2_reg_1019),
    .ce(grp_fu_292_ce),
    .dout(grp_fu_292_p2)
);

myFuncAccel4_fadd_32ns_32ns_32_5_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
myFuncAccel4_fadd_32ns_32ns_32_5_full_dsp_1_U12(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(tmp_3_3_1_reg_1024),
    .din1(tmp_2_3_2_reg_1029),
    .ce(grp_fu_296_ce),
    .dout(grp_fu_296_p2)
);

myFuncAccel4_fadd_32ns_32ns_32_5_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
myFuncAccel4_fadd_32ns_32ns_32_5_full_dsp_1_U13(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(tmp_3_0_2_reg_1042),
    .din1(tmp_2_0_3_reg_1047),
    .ce(grp_fu_300_ce),
    .dout(grp_fu_300_p2)
);

myFuncAccel4_fadd_32ns_32ns_32_5_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
myFuncAccel4_fadd_32ns_32ns_32_5_full_dsp_1_U14(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(tmp_3_1_2_reg_1052),
    .din1(tmp_2_1_3_reg_1057),
    .ce(grp_fu_304_ce),
    .dout(grp_fu_304_p2)
);

myFuncAccel4_fadd_32ns_32ns_32_5_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
myFuncAccel4_fadd_32ns_32ns_32_5_full_dsp_1_U15(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(tmp_3_2_2_reg_1062),
    .din1(tmp_2_2_3_reg_1067),
    .ce(grp_fu_308_ce),
    .dout(grp_fu_308_p2)
);

myFuncAccel4_fadd_32ns_32ns_32_5_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
myFuncAccel4_fadd_32ns_32ns_32_5_full_dsp_1_U16(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(tmp_3_3_2_reg_1072),
    .din1(tmp_2_3_3_reg_1077),
    .ce(grp_fu_312_ce),
    .dout(grp_fu_312_p2)
);

myFuncAccel4_fmul_32ns_32ns_32_4_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
myFuncAccel4_fmul_32ns_32ns_32_4_max_dsp_1_U17(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(data0_0),
    .din1(bitcast_ln56_fu_425_p1),
    .ce(grp_fu_316_ce),
    .dout(grp_fu_316_p2)
);

myFuncAccel4_fmul_32ns_32ns_32_4_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
myFuncAccel4_fmul_32ns_32ns_32_4_max_dsp_1_U18(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(data0_4),
    .din1(bitcast_ln56_fu_425_p1),
    .ce(grp_fu_320_ce),
    .dout(grp_fu_320_p2)
);

myFuncAccel4_fmul_32ns_32ns_32_4_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
myFuncAccel4_fmul_32ns_32ns_32_4_max_dsp_1_U19(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(data0_8),
    .din1(bitcast_ln56_fu_425_p1),
    .ce(grp_fu_324_ce),
    .dout(grp_fu_324_p2)
);

myFuncAccel4_fmul_32ns_32ns_32_4_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
myFuncAccel4_fmul_32ns_32ns_32_4_max_dsp_1_U20(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(data0_12),
    .din1(bitcast_ln56_fu_425_p1),
    .ce(grp_fu_328_ce),
    .dout(grp_fu_328_p2)
);

myFuncAccel4_fmul_32ns_32ns_32_4_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
myFuncAccel4_fmul_32ns_32ns_32_4_max_dsp_1_U21(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(data0_1),
    .din1(bitcast_ln56_1_fu_483_p1),
    .ce(grp_fu_332_ce),
    .dout(grp_fu_332_p2)
);

myFuncAccel4_fmul_32ns_32ns_32_4_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
myFuncAccel4_fmul_32ns_32ns_32_4_max_dsp_1_U22(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(data0_5),
    .din1(bitcast_ln56_1_fu_483_p1),
    .ce(grp_fu_336_ce),
    .dout(grp_fu_336_p2)
);

myFuncAccel4_fmul_32ns_32ns_32_4_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
myFuncAccel4_fmul_32ns_32ns_32_4_max_dsp_1_U23(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(data0_9),
    .din1(bitcast_ln56_1_fu_483_p1),
    .ce(grp_fu_340_ce),
    .dout(grp_fu_340_p2)
);

myFuncAccel4_fmul_32ns_32ns_32_4_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
myFuncAccel4_fmul_32ns_32ns_32_4_max_dsp_1_U24(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(data0_13),
    .din1(bitcast_ln56_1_fu_483_p1),
    .ce(grp_fu_344_ce),
    .dout(grp_fu_344_p2)
);

myFuncAccel4_fmul_32ns_32ns_32_4_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
myFuncAccel4_fmul_32ns_32ns_32_4_max_dsp_1_U25(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(data0_2),
    .din1(bitcast_ln56_2_fu_490_p1),
    .ce(grp_fu_348_ce),
    .dout(grp_fu_348_p2)
);

myFuncAccel4_fmul_32ns_32ns_32_4_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
myFuncAccel4_fmul_32ns_32ns_32_4_max_dsp_1_U26(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(data0_6),
    .din1(bitcast_ln56_2_fu_490_p1),
    .ce(grp_fu_352_ce),
    .dout(grp_fu_352_p2)
);

myFuncAccel4_fmul_32ns_32ns_32_4_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
myFuncAccel4_fmul_32ns_32ns_32_4_max_dsp_1_U27(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(data0_10),
    .din1(bitcast_ln56_2_fu_490_p1),
    .ce(grp_fu_356_ce),
    .dout(grp_fu_356_p2)
);

myFuncAccel4_fmul_32ns_32ns_32_4_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
myFuncAccel4_fmul_32ns_32ns_32_4_max_dsp_1_U28(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(data0_14),
    .din1(bitcast_ln56_2_fu_490_p1),
    .ce(grp_fu_360_ce),
    .dout(grp_fu_360_p2)
);

myFuncAccel4_fmul_32ns_32ns_32_4_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
myFuncAccel4_fmul_32ns_32ns_32_4_max_dsp_1_U29(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(data0_3),
    .din1(bitcast_ln56_3_fu_497_p1),
    .ce(grp_fu_364_ce),
    .dout(grp_fu_364_p2)
);

myFuncAccel4_fmul_32ns_32ns_32_4_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
myFuncAccel4_fmul_32ns_32ns_32_4_max_dsp_1_U30(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(data0_7),
    .din1(bitcast_ln56_3_fu_497_p1),
    .ce(grp_fu_368_ce),
    .dout(grp_fu_368_p2)
);

myFuncAccel4_fmul_32ns_32ns_32_4_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
myFuncAccel4_fmul_32ns_32ns_32_4_max_dsp_1_U31(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(data0_11),
    .din1(bitcast_ln56_3_fu_497_p1),
    .ce(grp_fu_372_ce),
    .dout(grp_fu_372_p2)
);

myFuncAccel4_fmul_32ns_32ns_32_4_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
myFuncAccel4_fmul_32ns_32ns_32_4_max_dsp_1_U32(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(data0_15),
    .din1(bitcast_ln56_3_fu_497_p1),
    .ce(grp_fu_376_ce),
    .dout(grp_fu_376_p2)
);

myFuncAccel4_fcmp_32ns_32ns_1_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
myFuncAccel4_fcmp_32ns_32ns_1_2_1_U33(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(tmp_3_0_3_reg_1082),
    .din1(threshold),
    .ce(grp_fu_380_ce),
    .opcode(5'd2),
    .dout(grp_fu_380_p2)
);

myFuncAccel4_fcmp_32ns_32ns_1_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
myFuncAccel4_fcmp_32ns_32ns_1_2_1_U34(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(tmp_3_1_3_reg_1088),
    .din1(threshold),
    .ce(grp_fu_384_ce),
    .opcode(5'd2),
    .dout(grp_fu_384_p2)
);

myFuncAccel4_fcmp_32ns_32ns_1_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
myFuncAccel4_fcmp_32ns_32ns_1_2_1_U35(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(tmp_3_2_3_reg_1094),
    .din1(threshold),
    .ce(grp_fu_388_ce),
    .opcode(5'd2),
    .dout(grp_fu_388_p2)
);

myFuncAccel4_fcmp_32ns_32ns_1_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
myFuncAccel4_fcmp_32ns_32ns_1_2_1_U36(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(tmp_3_3_3_reg_1100),
    .din1(threshold),
    .ce(grp_fu_392_ce),
    .opcode(5'd2),
    .dout(grp_fu_392_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state2) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state2)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state2);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter10 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter11 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter12 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter13 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter14 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter14 <= ap_enable_reg_pp0_iter13;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter15 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter15 <= ap_enable_reg_pp0_iter14;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter16 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter16 <= ap_enable_reg_pp0_iter15;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter17 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter17 <= ap_enable_reg_pp0_iter16;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter18 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter18 <= ap_enable_reg_pp0_iter17;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter19 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter19 <= ap_enable_reg_pp0_iter18;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter20 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter20 <= ap_enable_reg_pp0_iter19;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter21 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter21 <= ap_enable_reg_pp0_iter20;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter22 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter22 <= ap_enable_reg_pp0_iter21;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter23 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter23 <= ap_enable_reg_pp0_iter22;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter24 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter24 <= ap_enable_reg_pp0_iter23;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter25 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter25 <= ap_enable_reg_pp0_iter24;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter26 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter26 <= ap_enable_reg_pp0_iter25;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter27 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter27 <= ap_enable_reg_pp0_iter26;
        end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
            ap_enable_reg_pp0_iter27 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter8 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter9 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        data1_V_0_sel_rd <= 1'b0;
    end else begin
        if (((data1_V_0_ack_out == 1'b1) & (data1_V_0_vld_out == 1'b1))) begin
            data1_V_0_sel_rd <= ~data1_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        data1_V_0_sel_wr <= 1'b0;
    end else begin
        if (((data1_V_0_ack_in == 1'b1) & (data1_V_0_vld_in == 1'b1))) begin
            data1_V_0_sel_wr <= ~data1_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        data1_V_0_state <= 2'd0;
    end else begin
        if ((((data1_V_0_state == 2'd2) & (data1_V_0_vld_in == 1'b0)) | ((data1_V_0_state == 2'd3) & (data1_V_0_vld_in == 1'b0) & (data1_V_0_ack_out == 1'b1)))) begin
            data1_V_0_state <= 2'd2;
        end else if ((((data1_V_0_state == 2'd1) & (data1_V_0_ack_out == 1'b0)) | ((data1_V_0_state == 2'd3) & (data1_V_0_ack_out == 1'b0) & (data1_V_0_vld_in == 1'b1)))) begin
            data1_V_0_state <= 2'd1;
        end else if (((~((data1_V_0_vld_in == 1'b0) & (data1_V_0_ack_out == 1'b1)) & ~((data1_V_0_ack_out == 1'b0) & (data1_V_0_vld_in == 1'b1)) & (data1_V_0_state == 2'd3)) | ((data1_V_0_state == 2'd1) & (data1_V_0_ack_out == 1'b1)) | ((data1_V_0_state == 2'd2) & (data1_V_0_vld_in == 1'b1)))) begin
            data1_V_0_state <= 2'd3;
        end else begin
            data1_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        data_out_V_1_sel_rd <= 1'b0;
    end else begin
        if (((data_out_V_1_ack_out == 1'b1) & (data_out_V_1_vld_out == 1'b1))) begin
            data_out_V_1_sel_rd <= ~data_out_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        data_out_V_1_sel_wr <= 1'b0;
    end else begin
        if (((data_out_V_1_ack_in == 1'b1) & (data_out_V_1_vld_in == 1'b1))) begin
            data_out_V_1_sel_wr <= ~data_out_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        data_out_V_1_state <= 2'd0;
    end else begin
        if ((((data_out_V_1_state == 2'd2) & (data_out_V_1_vld_in == 1'b0)) | ((data_out_V_1_state == 2'd3) & (data_out_V_1_vld_in == 1'b0) & (data_out_V_1_ack_out == 1'b1)))) begin
            data_out_V_1_state <= 2'd2;
        end else if ((((data_out_V_1_state == 2'd1) & (data_out_V_TREADY == 1'b0)) | ((data_out_V_1_state == 2'd3) & (data_out_V_TREADY == 1'b0) & (data_out_V_1_vld_in == 1'b1)))) begin
            data_out_V_1_state <= 2'd1;
        end else if (((~((data_out_V_1_vld_in == 1'b0) & (data_out_V_1_ack_out == 1'b1)) & ~((data_out_V_TREADY == 1'b0) & (data_out_V_1_vld_in == 1'b1)) & (data_out_V_1_state == 2'd3)) | ((data_out_V_1_state == 2'd1) & (data_out_V_1_ack_out == 1'b1)) | ((data_out_V_1_state == 2'd2) & (data_out_V_1_vld_in == 1'b1)))) begin
            data_out_V_1_state <= 2'd3;
        end else begin
            data_out_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_1_reg_237 <= 32'd0;
    end else if (((icmp_ln45_fu_410_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        i_1_reg_237 <= i_fu_415_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln45_reg_878_pp0_iter24_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        add_ln69_1_reg_1131 <= add_ln69_1_fu_710_p2;
        add_ln69_reg_1126 <= add_ln69_fu_704_p2;
        bitcast_ln69_2_reg_1111 <= bitcast_ln69_2_fu_554_p1;
        bitcast_ln69_3_reg_1116 <= bitcast_ln69_3_fu_604_p1;
        bitcast_ln69_4_reg_1121 <= bitcast_ln69_4_fu_654_p1;
        bitcast_ln69_reg_1106 <= bitcast_ln69_fu_504_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((data1_V_0_load_A == 1'b1)) begin
        data1_V_0_payload_A <= data1_V_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((data1_V_0_load_B == 1'b1)) begin
        data1_V_0_payload_B <= data1_V_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((data_out_V_1_load_A == 1'b1)) begin
        data_out_V_1_payload_A <= p_Result_2_3_fu_762_p5;
    end
end

always @ (posedge ap_clk) begin
    if ((data_out_V_1_load_B == 1'b1)) begin
        data_out_V_1_payload_B <= p_Result_2_3_fu_762_p5;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln45_reg_878 <= icmp_ln45_fu_410_p2;
        icmp_ln45_reg_878_pp0_iter1_reg <= icmp_ln45_reg_878;
        p_Result_1_reg_895_pp0_iter1_reg <= p_Result_1_reg_895;
        p_Result_3_reg_905_pp0_iter1_reg <= p_Result_3_reg_905;
        p_Result_s_reg_900_pp0_iter1_reg <= p_Result_s_reg_900;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        icmp_ln45_reg_878_pp0_iter10_reg <= icmp_ln45_reg_878_pp0_iter9_reg;
        icmp_ln45_reg_878_pp0_iter11_reg <= icmp_ln45_reg_878_pp0_iter10_reg;
        icmp_ln45_reg_878_pp0_iter12_reg <= icmp_ln45_reg_878_pp0_iter11_reg;
        icmp_ln45_reg_878_pp0_iter13_reg <= icmp_ln45_reg_878_pp0_iter12_reg;
        icmp_ln45_reg_878_pp0_iter14_reg <= icmp_ln45_reg_878_pp0_iter13_reg;
        icmp_ln45_reg_878_pp0_iter15_reg <= icmp_ln45_reg_878_pp0_iter14_reg;
        icmp_ln45_reg_878_pp0_iter16_reg <= icmp_ln45_reg_878_pp0_iter15_reg;
        icmp_ln45_reg_878_pp0_iter17_reg <= icmp_ln45_reg_878_pp0_iter16_reg;
        icmp_ln45_reg_878_pp0_iter18_reg <= icmp_ln45_reg_878_pp0_iter17_reg;
        icmp_ln45_reg_878_pp0_iter19_reg <= icmp_ln45_reg_878_pp0_iter18_reg;
        icmp_ln45_reg_878_pp0_iter20_reg <= icmp_ln45_reg_878_pp0_iter19_reg;
        icmp_ln45_reg_878_pp0_iter21_reg <= icmp_ln45_reg_878_pp0_iter20_reg;
        icmp_ln45_reg_878_pp0_iter22_reg <= icmp_ln45_reg_878_pp0_iter21_reg;
        icmp_ln45_reg_878_pp0_iter23_reg <= icmp_ln45_reg_878_pp0_iter22_reg;
        icmp_ln45_reg_878_pp0_iter24_reg <= icmp_ln45_reg_878_pp0_iter23_reg;
        icmp_ln45_reg_878_pp0_iter25_reg <= icmp_ln45_reg_878_pp0_iter24_reg;
        icmp_ln45_reg_878_pp0_iter26_reg <= icmp_ln45_reg_878_pp0_iter25_reg;
        icmp_ln45_reg_878_pp0_iter2_reg <= icmp_ln45_reg_878_pp0_iter1_reg;
        icmp_ln45_reg_878_pp0_iter3_reg <= icmp_ln45_reg_878_pp0_iter2_reg;
        icmp_ln45_reg_878_pp0_iter4_reg <= icmp_ln45_reg_878_pp0_iter3_reg;
        icmp_ln45_reg_878_pp0_iter5_reg <= icmp_ln45_reg_878_pp0_iter4_reg;
        icmp_ln45_reg_878_pp0_iter6_reg <= icmp_ln45_reg_878_pp0_iter5_reg;
        icmp_ln45_reg_878_pp0_iter7_reg <= icmp_ln45_reg_878_pp0_iter6_reg;
        icmp_ln45_reg_878_pp0_iter8_reg <= icmp_ln45_reg_878_pp0_iter7_reg;
        icmp_ln45_reg_878_pp0_iter9_reg <= icmp_ln45_reg_878_pp0_iter8_reg;
        p_Result_1_reg_895_pp0_iter2_reg <= p_Result_1_reg_895_pp0_iter1_reg;
        p_Result_1_reg_895_pp0_iter3_reg <= p_Result_1_reg_895_pp0_iter2_reg;
        p_Result_1_reg_895_pp0_iter4_reg <= p_Result_1_reg_895_pp0_iter3_reg;
        p_Result_3_reg_905_pp0_iter10_reg <= p_Result_3_reg_905_pp0_iter9_reg;
        p_Result_3_reg_905_pp0_iter11_reg <= p_Result_3_reg_905_pp0_iter10_reg;
        p_Result_3_reg_905_pp0_iter12_reg <= p_Result_3_reg_905_pp0_iter11_reg;
        p_Result_3_reg_905_pp0_iter13_reg <= p_Result_3_reg_905_pp0_iter12_reg;
        p_Result_3_reg_905_pp0_iter14_reg <= p_Result_3_reg_905_pp0_iter13_reg;
        p_Result_3_reg_905_pp0_iter2_reg <= p_Result_3_reg_905_pp0_iter1_reg;
        p_Result_3_reg_905_pp0_iter3_reg <= p_Result_3_reg_905_pp0_iter2_reg;
        p_Result_3_reg_905_pp0_iter4_reg <= p_Result_3_reg_905_pp0_iter3_reg;
        p_Result_3_reg_905_pp0_iter5_reg <= p_Result_3_reg_905_pp0_iter4_reg;
        p_Result_3_reg_905_pp0_iter6_reg <= p_Result_3_reg_905_pp0_iter5_reg;
        p_Result_3_reg_905_pp0_iter7_reg <= p_Result_3_reg_905_pp0_iter6_reg;
        p_Result_3_reg_905_pp0_iter8_reg <= p_Result_3_reg_905_pp0_iter7_reg;
        p_Result_3_reg_905_pp0_iter9_reg <= p_Result_3_reg_905_pp0_iter8_reg;
        p_Result_s_reg_900_pp0_iter2_reg <= p_Result_s_reg_900_pp0_iter1_reg;
        p_Result_s_reg_900_pp0_iter3_reg <= p_Result_s_reg_900_pp0_iter2_reg;
        p_Result_s_reg_900_pp0_iter4_reg <= p_Result_s_reg_900_pp0_iter3_reg;
        p_Result_s_reg_900_pp0_iter5_reg <= p_Result_s_reg_900_pp0_iter4_reg;
        p_Result_s_reg_900_pp0_iter6_reg <= p_Result_s_reg_900_pp0_iter5_reg;
        p_Result_s_reg_900_pp0_iter7_reg <= p_Result_s_reg_900_pp0_iter6_reg;
        p_Result_s_reg_900_pp0_iter8_reg <= p_Result_s_reg_900_pp0_iter7_reg;
        p_Result_s_reg_900_pp0_iter9_reg <= p_Result_s_reg_900_pp0_iter8_reg;
        tmp_3_0_3_reg_1082_pp0_iter24_reg <= tmp_3_0_3_reg_1082;
        tmp_3_1_3_reg_1088_pp0_iter24_reg <= tmp_3_1_3_reg_1088;
        tmp_3_2_3_reg_1094_pp0_iter24_reg <= tmp_3_2_3_reg_1094;
        tmp_3_3_3_reg_1100_pp0_iter24_reg <= tmp_3_3_3_reg_1100;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln45_fu_410_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        p_Result_1_reg_895 <= {{data1_V_0_data_out[63:32]}};
        p_Result_3_reg_905 <= {{data1_V_0_data_out[127:96]}};
        p_Result_s_reg_900 <= {{data1_V_0_data_out[95:64]}};
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln45_reg_878_pp0_iter7_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tmp_2_0_1_reg_951 <= grp_fu_332_p2;
        tmp_2_1_1_reg_961 <= grp_fu_336_p2;
        tmp_2_2_1_reg_971 <= grp_fu_340_p2;
        tmp_2_3_1_reg_981 <= grp_fu_344_p2;
        tmp_3_1_reg_956 <= grp_fu_253_p2;
        tmp_3_2_reg_966 <= grp_fu_258_p2;
        tmp_3_3_reg_976 <= grp_fu_263_p2;
        tmp_3_reg_946 <= grp_fu_248_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln45_reg_878_pp0_iter12_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tmp_2_0_2_reg_999 <= grp_fu_348_p2;
        tmp_2_1_2_reg_1009 <= grp_fu_352_p2;
        tmp_2_2_2_reg_1019 <= grp_fu_356_p2;
        tmp_2_3_2_reg_1029 <= grp_fu_360_p2;
        tmp_3_0_1_reg_994 <= grp_fu_268_p2;
        tmp_3_1_1_reg_1004 <= grp_fu_272_p2;
        tmp_3_2_1_reg_1014 <= grp_fu_276_p2;
        tmp_3_3_1_reg_1024 <= grp_fu_280_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln45_reg_878_pp0_iter17_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tmp_2_0_3_reg_1047 <= grp_fu_364_p2;
        tmp_2_1_3_reg_1057 <= grp_fu_368_p2;
        tmp_2_2_3_reg_1067 <= grp_fu_372_p2;
        tmp_2_3_3_reg_1077 <= grp_fu_376_p2;
        tmp_3_0_2_reg_1042 <= grp_fu_284_p2;
        tmp_3_1_2_reg_1052 <= grp_fu_288_p2;
        tmp_3_2_2_reg_1062 <= grp_fu_292_p2;
        tmp_3_3_2_reg_1072 <= grp_fu_296_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln45_reg_878_pp0_iter2_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tmp_2_1_reg_923 <= grp_fu_320_p2;
        tmp_2_2_reg_928 <= grp_fu_324_p2;
        tmp_2_3_reg_933 <= grp_fu_328_p2;
        tmp_2_reg_918 <= grp_fu_316_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln45_reg_878_pp0_iter22_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tmp_3_0_3_reg_1082 <= grp_fu_300_p2;
        tmp_3_1_3_reg_1088 <= grp_fu_304_p2;
        tmp_3_2_3_reg_1094 <= grp_fu_308_p2;
        tmp_3_3_3_reg_1100 <= grp_fu_312_p2;
    end
end

always @ (*) begin
    if ((icmp_ln45_fu_410_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if ((~((data_out_V_1_state == 2'd1) | ((data_out_V_1_state == 2'd3) & (data_out_V_TREADY == 1'b0))) & (1'b1 == ap_CS_fsm_state30))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter25 == 1'b0) & (ap_enable_reg_pp0_iter24 == 1'b0) & (ap_enable_reg_pp0_iter23 == 1'b0) & (ap_enable_reg_pp0_iter22 == 1'b0) & (ap_enable_reg_pp0_iter21 == 1'b0) & (ap_enable_reg_pp0_iter20 == 1'b0) & (ap_enable_reg_pp0_iter19 == 1'b0) & (ap_enable_reg_pp0_iter18 == 1'b0) & (ap_enable_reg_pp0_iter17 == 1'b0) & (ap_enable_reg_pp0_iter16 == 1'b0) & (ap_enable_reg_pp0_iter15 == 1'b0) & (ap_enable_reg_pp0_iter14 == 1'b0) & (ap_enable_reg_pp0_iter13 == 1'b0) & (ap_enable_reg_pp0_iter12 == 1'b0) & (ap_enable_reg_pp0_iter11 == 1'b0) & (ap_enable_reg_pp0_iter10 == 1'b0) & (ap_enable_reg_pp0_iter9 == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter27 == 1'b0) & (ap_enable_reg_pp0_iter26 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((data_out_V_1_state == 2'd1) | ((data_out_V_1_state == 2'd3) & (data_out_V_TREADY == 1'b0))) & (1'b1 == ap_CS_fsm_state30))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln45_fu_410_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data1_V_0_ack_out = 1'b1;
    end else begin
        data1_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((data1_V_0_sel == 1'b1)) begin
        data1_V_0_data_out = data1_V_0_payload_B;
    end else begin
        data1_V_0_data_out = data1_V_0_payload_A;
    end
end

always @ (*) begin
    if (((icmp_ln45_fu_410_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        data1_V_TDATA_blk_n = data1_V_0_state[1'd0];
    end else begin
        data1_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((data_out_V_1_sel == 1'b1)) begin
        data_out_V_1_data_out = data_out_V_1_payload_B;
    end else begin
        data_out_V_1_data_out = data_out_V_1_payload_A;
    end
end

always @ (*) begin
    if (((icmp_ln45_reg_878_pp0_iter25_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter26 == 1'b1))) begin
        data_out_V_1_vld_in = 1'b1;
    end else begin
        data_out_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((((icmp_ln45_reg_878_pp0_iter26_reg == 1'd0) & (ap_enable_reg_pp0_iter27 == 1'b1) & (1'b0 == ap_block_pp0_stage0)) | ((icmp_ln45_reg_878_pp0_iter25_reg == 1'd0) & (ap_enable_reg_pp0_iter26 == 1'b1) & (1'b0 == ap_block_pp0_stage0)))) begin
        data_out_V_TDATA_blk_n = data_out_V_1_state[1'd1];
    end else begin
        data_out_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_248_ce = 1'b1;
    end else begin
        grp_fu_248_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_253_ce = 1'b1;
    end else begin
        grp_fu_253_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_258_ce = 1'b1;
    end else begin
        grp_fu_258_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_263_ce = 1'b1;
    end else begin
        grp_fu_263_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_268_ce = 1'b1;
    end else begin
        grp_fu_268_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_272_ce = 1'b1;
    end else begin
        grp_fu_272_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_276_ce = 1'b1;
    end else begin
        grp_fu_276_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_280_ce = 1'b1;
    end else begin
        grp_fu_280_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_284_ce = 1'b1;
    end else begin
        grp_fu_284_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_288_ce = 1'b1;
    end else begin
        grp_fu_288_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_292_ce = 1'b1;
    end else begin
        grp_fu_292_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_296_ce = 1'b1;
    end else begin
        grp_fu_296_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_300_ce = 1'b1;
    end else begin
        grp_fu_300_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_304_ce = 1'b1;
    end else begin
        grp_fu_304_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_308_ce = 1'b1;
    end else begin
        grp_fu_308_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_312_ce = 1'b1;
    end else begin
        grp_fu_312_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_316_ce = 1'b1;
    end else begin
        grp_fu_316_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_320_ce = 1'b1;
    end else begin
        grp_fu_320_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_324_ce = 1'b1;
    end else begin
        grp_fu_324_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_328_ce = 1'b1;
    end else begin
        grp_fu_328_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_332_ce = 1'b1;
    end else begin
        grp_fu_332_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_336_ce = 1'b1;
    end else begin
        grp_fu_336_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_340_ce = 1'b1;
    end else begin
        grp_fu_340_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_344_ce = 1'b1;
    end else begin
        grp_fu_344_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_348_ce = 1'b1;
    end else begin
        grp_fu_348_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_352_ce = 1'b1;
    end else begin
        grp_fu_352_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_356_ce = 1'b1;
    end else begin
        grp_fu_356_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_360_ce = 1'b1;
    end else begin
        grp_fu_360_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_364_ce = 1'b1;
    end else begin
        grp_fu_364_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_368_ce = 1'b1;
    end else begin
        grp_fu_368_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_372_ce = 1'b1;
    end else begin
        grp_fu_372_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_376_ce = 1'b1;
    end else begin
        grp_fu_376_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_380_ce = 1'b1;
    end else begin
        grp_fu_380_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_384_ce = 1'b1;
    end else begin
        grp_fu_384_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_388_ce = 1'b1;
    end else begin
        grp_fu_388_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_392_ce = 1'b1;
    end else begin
        grp_fu_392_ce = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((icmp_ln45_fu_410_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1)) & ~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter27 == 1'b1) & (ap_enable_reg_pp0_iter26 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter27 == 1'b1) & (ap_enable_reg_pp0_iter26 == 1'b0)) | ((icmp_ln45_fu_410_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_state30;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state30 : begin
            if ((~((data_out_V_1_state == 2'd1) | ((data_out_V_1_state == 2'd3) & (data_out_V_TREADY == 1'b0))) & (1'b1 == ap_CS_fsm_state30))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state30;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln69_1_fu_710_p2 = (zext_ln67_2_fu_650_p1 + zext_ln69_fu_700_p1);

assign add_ln69_2_fu_722_p2 = (zext_ln69_2_fu_719_p1 + zext_ln69_1_fu_716_p1);

assign add_ln69_fu_704_p2 = (zext_ln67_1_fu_600_p1 + zext_ln67_fu_550_p1);

assign and_ln69_1_fu_544_p2 = (grp_fu_380_p2 & and_ln69_fu_539_p2);

assign and_ln69_2_fu_589_p2 = (or_ln69_2_fu_583_p2 & or_ln69_1_fu_478_p2);

assign and_ln69_3_fu_594_p2 = (grp_fu_384_p2 & and_ln69_2_fu_589_p2);

assign and_ln69_4_fu_639_p2 = (or_ln69_3_fu_633_p2 & or_ln69_1_fu_478_p2);

assign and_ln69_5_fu_644_p2 = (grp_fu_388_p2 & and_ln69_4_fu_639_p2);

assign and_ln69_6_fu_689_p2 = (or_ln69_4_fu_683_p2 & or_ln69_1_fu_478_p2);

assign and_ln69_7_fu_694_p2 = (grp_fu_392_p2 & and_ln69_6_fu_689_p2);

assign and_ln69_fu_539_p2 = (or_ln69_fu_533_p2 & or_ln69_1_fu_478_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state30 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_00001 = ((icmp_ln45_fu_410_p2 == 1'd0) & (data1_V_0_vld_out == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((icmp_ln45_fu_410_p2 == 1'd0) & (data1_V_0_vld_out == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((1'b1 == ap_block_state29_io) & (ap_enable_reg_pp0_iter27 == 1'b1)) | ((1'b1 == ap_block_state28_io) & (ap_enable_reg_pp0_iter26 == 1'b1)) | ((icmp_ln45_fu_410_p2 == 1'd0) & (data1_V_0_vld_out == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((1'b1 == ap_block_state29_io) & (ap_enable_reg_pp0_iter27 == 1'b1)) | ((1'b1 == ap_block_state28_io) & (ap_enable_reg_pp0_iter26 == 1'b1)) | ((icmp_ln45_fu_410_p2 == 1'd0) & (data1_V_0_vld_out == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1)));
end

assign ap_block_state10_pp0_stage0_iter8 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage0_iter9 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp0_stage0_iter10 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp0_stage0_iter11 = ~(1'b1 == 1'b1);

assign ap_block_state14_pp0_stage0_iter12 = ~(1'b1 == 1'b1);

assign ap_block_state15_pp0_stage0_iter13 = ~(1'b1 == 1'b1);

assign ap_block_state16_pp0_stage0_iter14 = ~(1'b1 == 1'b1);

assign ap_block_state17_pp0_stage0_iter15 = ~(1'b1 == 1'b1);

assign ap_block_state18_pp0_stage0_iter16 = ~(1'b1 == 1'b1);

assign ap_block_state19_pp0_stage0_iter17 = ~(1'b1 == 1'b1);

assign ap_block_state20_pp0_stage0_iter18 = ~(1'b1 == 1'b1);

assign ap_block_state21_pp0_stage0_iter19 = ~(1'b1 == 1'b1);

assign ap_block_state22_pp0_stage0_iter20 = ~(1'b1 == 1'b1);

assign ap_block_state23_pp0_stage0_iter21 = ~(1'b1 == 1'b1);

assign ap_block_state24_pp0_stage0_iter22 = ~(1'b1 == 1'b1);

assign ap_block_state25_pp0_stage0_iter23 = ~(1'b1 == 1'b1);

assign ap_block_state26_pp0_stage0_iter24 = ~(1'b1 == 1'b1);

assign ap_block_state27_pp0_stage0_iter25 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state28_io = ((icmp_ln45_reg_878_pp0_iter25_reg == 1'd0) & (data_out_V_1_ack_in == 1'b0));
end

assign ap_block_state28_pp0_stage0_iter26 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state29_io = ((icmp_ln45_reg_878_pp0_iter26_reg == 1'd0) & (data_out_V_1_ack_in == 1'b0));
end

assign ap_block_state29_pp0_stage0_iter27 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state2_pp0_stage0_iter0 = ((icmp_ln45_fu_410_p2 == 1'd0) & (data1_V_0_vld_out == 1'b0));
end

always @ (*) begin
    ap_block_state30 = ((data_out_V_1_state == 2'd1) | ((data_out_V_1_state == 2'd3) & (data_out_V_TREADY == 1'b0)));
end

assign ap_block_state3_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage0_iter7 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign bitcast_ln56_1_fu_483_p1 = p_Result_1_reg_895_pp0_iter4_reg;

assign bitcast_ln56_2_fu_490_p1 = p_Result_s_reg_900_pp0_iter9_reg;

assign bitcast_ln56_3_fu_497_p1 = p_Result_3_reg_905_pp0_iter14_reg;

assign bitcast_ln56_fu_425_p1 = trunc_ln681_fu_421_p1;

assign bitcast_ln69_1_fu_396_p1 = threshold;

assign bitcast_ln69_2_fu_554_p1 = tmp_3_1_3_reg_1088_pp0_iter24_reg;

assign bitcast_ln69_3_fu_604_p1 = tmp_3_2_3_reg_1094_pp0_iter24_reg;

assign bitcast_ln69_4_fu_654_p1 = tmp_3_3_3_reg_1100_pp0_iter24_reg;

assign bitcast_ln69_fu_504_p1 = tmp_3_0_3_reg_1082_pp0_iter24_reg;

assign data1_V_0_ack_in = data1_V_0_state[1'd1];

assign data1_V_0_load_A = (~data1_V_0_sel_wr & data1_V_0_state_cmp_full);

assign data1_V_0_load_B = (data1_V_0_state_cmp_full & data1_V_0_sel_wr);

assign data1_V_0_sel = data1_V_0_sel_rd;

assign data1_V_0_state_cmp_full = ((data1_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign data1_V_0_vld_in = data1_V_TVALID;

assign data1_V_0_vld_out = data1_V_0_state[1'd0];

assign data1_V_TREADY = data1_V_0_state[1'd1];

assign data_out_V_1_ack_in = data_out_V_1_state[1'd1];

assign data_out_V_1_ack_out = data_out_V_TREADY;

assign data_out_V_1_load_A = (~data_out_V_1_sel_wr & data_out_V_1_state_cmp_full);

assign data_out_V_1_load_B = (data_out_V_1_state_cmp_full & data_out_V_1_sel_wr);

assign data_out_V_1_sel = data_out_V_1_sel_rd;

assign data_out_V_1_state_cmp_full = ((data_out_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign data_out_V_1_vld_out = data_out_V_1_state[1'd0];

assign data_out_V_TDATA = data_out_V_1_data_out;

assign data_out_V_TVALID = data_out_V_1_state[1'd0];

assign i_fu_415_p2 = (i_1_reg_237 + 32'd1);

assign icmp_ln45_fu_410_p2 = ((i_1_reg_237 == size) ? 1'b1 : 1'b0);

assign icmp_ln69_1_fu_527_p2 = ((trunc_ln69_1_fu_517_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln69_2_fu_472_p2 = ((tmp_4_fu_463_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln69_3_fu_404_p2 = ((trunc_ln69_fu_400_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln69_4_fu_571_p2 = ((tmp_6_fu_557_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln69_5_fu_577_p2 = ((trunc_ln69_2_fu_567_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln69_6_fu_621_p2 = ((tmp_9_fu_607_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln69_7_fu_627_p2 = ((trunc_ln69_3_fu_617_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln69_8_fu_671_p2 = ((tmp_7_fu_657_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln69_9_fu_677_p2 = ((trunc_ln69_4_fu_667_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln69_fu_521_p2 = ((tmp_1_fu_507_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln75_fu_728_p2 = ((add_ln69_2_fu_722_p2 == 3'd4) ? 1'b1 : 1'b0);

assign or_ln69_1_fu_478_p2 = (icmp_ln69_3_fu_404_p2 | icmp_ln69_2_fu_472_p2);

assign or_ln69_2_fu_583_p2 = (icmp_ln69_5_fu_577_p2 | icmp_ln69_4_fu_571_p2);

assign or_ln69_3_fu_633_p2 = (icmp_ln69_7_fu_627_p2 | icmp_ln69_6_fu_621_p2);

assign or_ln69_4_fu_683_p2 = (icmp_ln69_9_fu_677_p2 | icmp_ln69_8_fu_671_p2);

assign or_ln69_fu_533_p2 = (icmp_ln69_fu_521_p2 | icmp_ln69_1_fu_527_p2);

assign p_Result_2_3_fu_762_p5 = {{{{select_ln76_3_fu_755_p3}, {select_ln76_2_fu_748_p3}}, {select_ln76_1_fu_741_p3}}, {select_ln76_fu_734_p3}};

assign select_ln76_1_fu_741_p3 = ((icmp_ln75_fu_728_p2[0:0] === 1'b1) ? 32'd0 : bitcast_ln69_2_reg_1111);

assign select_ln76_2_fu_748_p3 = ((icmp_ln75_fu_728_p2[0:0] === 1'b1) ? 32'd0 : bitcast_ln69_3_reg_1116);

assign select_ln76_3_fu_755_p3 = ((icmp_ln75_fu_728_p2[0:0] === 1'b1) ? 32'd0 : bitcast_ln69_4_reg_1121);

assign select_ln76_fu_734_p3 = ((icmp_ln75_fu_728_p2[0:0] === 1'b1) ? 32'd0 : bitcast_ln69_reg_1106);

assign tmp_1_fu_507_p4 = {{bitcast_ln69_fu_504_p1[30:23]}};

assign tmp_4_fu_463_p4 = {{bitcast_ln69_1_fu_396_p1[30:23]}};

assign tmp_6_fu_557_p4 = {{bitcast_ln69_2_fu_554_p1[30:23]}};

assign tmp_7_fu_657_p4 = {{bitcast_ln69_4_fu_654_p1[30:23]}};

assign tmp_9_fu_607_p4 = {{bitcast_ln69_3_fu_604_p1[30:23]}};

assign trunc_ln681_fu_421_p1 = data1_V_0_data_out[31:0];

assign trunc_ln69_1_fu_517_p1 = bitcast_ln69_fu_504_p1[22:0];

assign trunc_ln69_2_fu_567_p1 = bitcast_ln69_2_fu_554_p1[22:0];

assign trunc_ln69_3_fu_617_p1 = bitcast_ln69_3_fu_604_p1[22:0];

assign trunc_ln69_4_fu_667_p1 = bitcast_ln69_4_fu_654_p1[22:0];

assign trunc_ln69_fu_400_p1 = bitcast_ln69_1_fu_396_p1[22:0];

assign zext_ln67_1_fu_600_p1 = and_ln69_3_fu_594_p2;

assign zext_ln67_2_fu_650_p1 = and_ln69_5_fu_644_p2;

assign zext_ln67_fu_550_p1 = and_ln69_1_fu_544_p2;

assign zext_ln69_1_fu_716_p1 = add_ln69_reg_1126;

assign zext_ln69_2_fu_719_p1 = add_ln69_1_reg_1131;

assign zext_ln69_fu_700_p1 = and_ln69_7_fu_694_p2;

endmodule //myFuncAccel4
