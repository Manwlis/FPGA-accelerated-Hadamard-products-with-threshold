-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity myFuncAccel4 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    size : IN STD_LOGIC_VECTOR (31 downto 0);
    dim : IN STD_LOGIC_VECTOR (31 downto 0);
    threshold : IN STD_LOGIC_VECTOR (31 downto 0);
    data0_0 : IN STD_LOGIC_VECTOR (31 downto 0);
    data0_1 : IN STD_LOGIC_VECTOR (31 downto 0);
    data0_2 : IN STD_LOGIC_VECTOR (31 downto 0);
    data0_3 : IN STD_LOGIC_VECTOR (31 downto 0);
    data0_4 : IN STD_LOGIC_VECTOR (31 downto 0);
    data0_5 : IN STD_LOGIC_VECTOR (31 downto 0);
    data0_6 : IN STD_LOGIC_VECTOR (31 downto 0);
    data0_7 : IN STD_LOGIC_VECTOR (31 downto 0);
    data0_8 : IN STD_LOGIC_VECTOR (31 downto 0);
    data0_9 : IN STD_LOGIC_VECTOR (31 downto 0);
    data0_10 : IN STD_LOGIC_VECTOR (31 downto 0);
    data0_11 : IN STD_LOGIC_VECTOR (31 downto 0);
    data0_12 : IN STD_LOGIC_VECTOR (31 downto 0);
    data0_13 : IN STD_LOGIC_VECTOR (31 downto 0);
    data0_14 : IN STD_LOGIC_VECTOR (31 downto 0);
    data0_15 : IN STD_LOGIC_VECTOR (31 downto 0);
    data1_V_TDATA : IN STD_LOGIC_VECTOR (127 downto 0);
    data1_V_TVALID : IN STD_LOGIC;
    data1_V_TREADY : OUT STD_LOGIC;
    data_out_V_TDATA : OUT STD_LOGIC_VECTOR (127 downto 0);
    data_out_V_TVALID : OUT STD_LOGIC;
    data_out_V_TREADY : IN STD_LOGIC );
end;


architecture behav of myFuncAccel4 is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "myFuncAccel4,hls_ip_2019_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z020-clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.974200,HLS_SYN_LAT=1028,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=80,HLS_SYN_FF=8052,HLS_SYN_LUT=13011,HLS_VERSION=2019_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_lv32_5F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011111";
    constant ap_const_lv32_60 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100000";
    constant ap_const_lv32_7F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111111";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal data1_V_0_data_out : STD_LOGIC_VECTOR (127 downto 0);
    signal data1_V_0_vld_in : STD_LOGIC;
    signal data1_V_0_vld_out : STD_LOGIC;
    signal data1_V_0_ack_in : STD_LOGIC;
    signal data1_V_0_ack_out : STD_LOGIC;
    signal data1_V_0_payload_A : STD_LOGIC_VECTOR (127 downto 0);
    signal data1_V_0_payload_B : STD_LOGIC_VECTOR (127 downto 0);
    signal data1_V_0_sel_rd : STD_LOGIC := '0';
    signal data1_V_0_sel_wr : STD_LOGIC := '0';
    signal data1_V_0_sel : STD_LOGIC;
    signal data1_V_0_load_A : STD_LOGIC;
    signal data1_V_0_load_B : STD_LOGIC;
    signal data1_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal data1_V_0_state_cmp_full : STD_LOGIC;
    signal data_out_V_1_data_out : STD_LOGIC_VECTOR (127 downto 0);
    signal data_out_V_1_vld_in : STD_LOGIC;
    signal data_out_V_1_vld_out : STD_LOGIC;
    signal data_out_V_1_ack_in : STD_LOGIC;
    signal data_out_V_1_ack_out : STD_LOGIC;
    signal data_out_V_1_payload_A : STD_LOGIC_VECTOR (127 downto 0);
    signal data_out_V_1_payload_B : STD_LOGIC_VECTOR (127 downto 0);
    signal data_out_V_1_sel_rd : STD_LOGIC := '0';
    signal data_out_V_1_sel_wr : STD_LOGIC := '0';
    signal data_out_V_1_sel : STD_LOGIC;
    signal data_out_V_1_load_A : STD_LOGIC;
    signal data_out_V_1_load_B : STD_LOGIC;
    signal data_out_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal data_out_V_1_state_cmp_full : STD_LOGIC;
    signal data1_V_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal icmp_ln45_fu_412_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal data_out_V_TDATA_blk_n : STD_LOGIC;
    signal ap_enable_reg_pp0_iter26 : STD_LOGIC := '0';
    signal icmp_ln45_reg_880 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln45_reg_880_pp0_iter25_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_reg_pp0_iter27 : STD_LOGIC := '0';
    signal icmp_ln45_reg_880_pp0_iter26_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal i_1_reg_239 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln72_1_fu_398_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln72_3_fu_406_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter7 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter8 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter9 : BOOLEAN;
    signal ap_block_state12_pp0_stage0_iter10 : BOOLEAN;
    signal ap_block_state13_pp0_stage0_iter11 : BOOLEAN;
    signal ap_block_state14_pp0_stage0_iter12 : BOOLEAN;
    signal ap_block_state15_pp0_stage0_iter13 : BOOLEAN;
    signal ap_block_state16_pp0_stage0_iter14 : BOOLEAN;
    signal ap_block_state17_pp0_stage0_iter15 : BOOLEAN;
    signal ap_block_state18_pp0_stage0_iter16 : BOOLEAN;
    signal ap_block_state19_pp0_stage0_iter17 : BOOLEAN;
    signal ap_block_state20_pp0_stage0_iter18 : BOOLEAN;
    signal ap_block_state21_pp0_stage0_iter19 : BOOLEAN;
    signal ap_block_state22_pp0_stage0_iter20 : BOOLEAN;
    signal ap_block_state23_pp0_stage0_iter21 : BOOLEAN;
    signal ap_block_state24_pp0_stage0_iter22 : BOOLEAN;
    signal ap_block_state25_pp0_stage0_iter23 : BOOLEAN;
    signal ap_block_state26_pp0_stage0_iter24 : BOOLEAN;
    signal ap_block_state27_pp0_stage0_iter25 : BOOLEAN;
    signal ap_block_state28_pp0_stage0_iter26 : BOOLEAN;
    signal ap_block_state28_io : BOOLEAN;
    signal ap_block_state29_pp0_stage0_iter27 : BOOLEAN;
    signal ap_block_state29_io : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln45_reg_880_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln45_reg_880_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln45_reg_880_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln45_reg_880_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln45_reg_880_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln45_reg_880_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln45_reg_880_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln45_reg_880_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln45_reg_880_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln45_reg_880_pp0_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln45_reg_880_pp0_iter11_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln45_reg_880_pp0_iter12_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln45_reg_880_pp0_iter13_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln45_reg_880_pp0_iter14_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln45_reg_880_pp0_iter15_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln45_reg_880_pp0_iter16_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln45_reg_880_pp0_iter17_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln45_reg_880_pp0_iter18_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln45_reg_880_pp0_iter19_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln45_reg_880_pp0_iter20_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln45_reg_880_pp0_iter21_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln45_reg_880_pp0_iter22_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln45_reg_880_pp0_iter23_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln45_reg_880_pp0_iter24_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal i_fu_417_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln56_fu_427_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_1_reg_897 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_1_reg_897_pp0_iter1_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_1_reg_897_pp0_iter2_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_1_reg_897_pp0_iter3_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_1_reg_897_pp0_iter4_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_s_reg_902 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_s_reg_902_pp0_iter1_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_s_reg_902_pp0_iter2_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_s_reg_902_pp0_iter3_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_s_reg_902_pp0_iter4_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_s_reg_902_pp0_iter5_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_s_reg_902_pp0_iter6_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_s_reg_902_pp0_iter7_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_s_reg_902_pp0_iter8_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_s_reg_902_pp0_iter9_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_3_reg_907 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_3_reg_907_pp0_iter1_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_3_reg_907_pp0_iter2_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_3_reg_907_pp0_iter3_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_3_reg_907_pp0_iter4_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_3_reg_907_pp0_iter5_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_3_reg_907_pp0_iter6_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_3_reg_907_pp0_iter7_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_3_reg_907_pp0_iter8_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_3_reg_907_pp0_iter9_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_3_reg_907_pp0_iter10_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_3_reg_907_pp0_iter11_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_3_reg_907_pp0_iter12_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_3_reg_907_pp0_iter13_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_3_reg_907_pp0_iter14_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln72_1_fu_480_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_318_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_reg_920 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_322_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_1_reg_925 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_326_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_2_reg_930 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_330_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_3_reg_935 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln56_1_fu_485_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_250_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_3_reg_948 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_334_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_0_1_reg_953 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_255_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_3_1_reg_958 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_338_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_1_1_reg_963 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_260_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_3_2_reg_968 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_342_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_2_1_reg_973 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_265_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_3_3_reg_978 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_346_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_3_1_reg_983 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln56_2_fu_492_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_270_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_3_0_1_reg_996 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_350_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_0_2_reg_1001 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_274_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_3_1_1_reg_1006 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_354_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_1_2_reg_1011 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_278_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_3_2_1_reg_1016 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_358_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_2_2_reg_1021 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_282_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_3_3_1_reg_1026 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_362_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_3_2_reg_1031 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln56_3_fu_499_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_286_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_3_0_2_reg_1044 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_366_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_0_3_reg_1049 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_290_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_3_1_2_reg_1054 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_370_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_1_3_reg_1059 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_294_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_3_2_2_reg_1064 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_374_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_2_3_reg_1069 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_298_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_3_3_2_reg_1074 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_378_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_3_3_reg_1079 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_302_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_3_0_3_reg_1084 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_3_0_3_reg_1084_pp0_iter24_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_306_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_3_1_3_reg_1090 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_3_1_3_reg_1090_pp0_iter24_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_310_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_3_2_3_reg_1096 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_3_2_3_reg_1096_pp0_iter24_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_314_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_3_3_3_reg_1102 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_3_3_3_reg_1102_pp0_iter24_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln72_fu_506_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln72_reg_1108 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln72_2_fu_556_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln72_2_reg_1113 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln72_3_fu_606_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln72_3_reg_1118 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln72_4_fu_656_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln72_4_reg_1123 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln72_fu_706_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln72_reg_1128 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln72_1_fu_712_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln72_1_reg_1133 : STD_LOGIC_VECTOR (1 downto 0);
    signal p_Result_2_3_fu_764_p5 : STD_LOGIC_VECTOR (127 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state2 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter9 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter10 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter11 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter12 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter13 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter14 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter15 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter16 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter17 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter18 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter19 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter20 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter21 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter22 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter23 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter24 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter25 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal trunc_ln72_fu_402_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal trunc_ln681_fu_423_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_fu_465_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln72_2_fu_474_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_1_fu_509_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln72_1_fu_519_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln72_1_fu_529_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln72_fu_523_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln72_fu_535_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln72_fu_541_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_382_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln72_1_fu_546_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_6_fu_559_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln72_2_fu_569_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln72_5_fu_579_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln72_4_fu_573_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln72_2_fu_585_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln72_2_fu_591_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_386_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln72_3_fu_596_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_9_fu_609_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln72_3_fu_619_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln72_7_fu_629_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln72_6_fu_623_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln72_3_fu_635_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln72_4_fu_641_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_390_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln72_5_fu_646_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_7_fu_659_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln72_4_fu_669_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln72_9_fu_679_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln72_8_fu_673_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln72_4_fu_685_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln72_6_fu_691_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_394_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln72_7_fu_696_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln68_1_fu_602_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal zext_ln68_fu_552_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal zext_ln68_2_fu_652_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal zext_ln72_fu_702_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal zext_ln72_2_fu_721_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal zext_ln72_1_fu_718_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln72_2_fu_724_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal icmp_ln78_fu_730_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln79_3_fu_757_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln79_2_fu_750_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln79_1_fu_743_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln79_fu_736_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_250_ce : STD_LOGIC;
    signal grp_fu_255_ce : STD_LOGIC;
    signal grp_fu_260_ce : STD_LOGIC;
    signal grp_fu_265_ce : STD_LOGIC;
    signal grp_fu_270_ce : STD_LOGIC;
    signal grp_fu_274_ce : STD_LOGIC;
    signal grp_fu_278_ce : STD_LOGIC;
    signal grp_fu_282_ce : STD_LOGIC;
    signal grp_fu_286_ce : STD_LOGIC;
    signal grp_fu_290_ce : STD_LOGIC;
    signal grp_fu_294_ce : STD_LOGIC;
    signal grp_fu_298_ce : STD_LOGIC;
    signal grp_fu_302_ce : STD_LOGIC;
    signal grp_fu_306_ce : STD_LOGIC;
    signal grp_fu_310_ce : STD_LOGIC;
    signal grp_fu_314_ce : STD_LOGIC;
    signal grp_fu_318_ce : STD_LOGIC;
    signal grp_fu_322_ce : STD_LOGIC;
    signal grp_fu_326_ce : STD_LOGIC;
    signal grp_fu_330_ce : STD_LOGIC;
    signal grp_fu_334_ce : STD_LOGIC;
    signal grp_fu_338_ce : STD_LOGIC;
    signal grp_fu_342_ce : STD_LOGIC;
    signal grp_fu_346_ce : STD_LOGIC;
    signal grp_fu_350_ce : STD_LOGIC;
    signal grp_fu_354_ce : STD_LOGIC;
    signal grp_fu_358_ce : STD_LOGIC;
    signal grp_fu_362_ce : STD_LOGIC;
    signal grp_fu_366_ce : STD_LOGIC;
    signal grp_fu_370_ce : STD_LOGIC;
    signal grp_fu_374_ce : STD_LOGIC;
    signal grp_fu_378_ce : STD_LOGIC;
    signal grp_fu_382_ce : STD_LOGIC;
    signal ap_block_pp0_stage0_00001 : BOOLEAN;
    signal grp_fu_386_ce : STD_LOGIC;
    signal grp_fu_390_ce : STD_LOGIC;
    signal grp_fu_394_ce : STD_LOGIC;
    signal ap_CS_fsm_state30 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state30 : signal is "none";
    signal ap_block_state30 : BOOLEAN;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;

    component myFuncAccel4_fadd_32ns_32ns_32_5_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component myFuncAccel4_fmul_32ns_32ns_32_4_max_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component myFuncAccel4_fcmp_32ns_32ns_1_2_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    myFuncAccel4_fadd_32ns_32ns_32_5_full_dsp_1_U1 : component myFuncAccel4_fadd_32ns_32ns_32_5_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => tmp_2_reg_920,
        din1 => ap_const_lv32_0,
        ce => grp_fu_250_ce,
        dout => grp_fu_250_p2);

    myFuncAccel4_fadd_32ns_32ns_32_5_full_dsp_1_U2 : component myFuncAccel4_fadd_32ns_32ns_32_5_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => tmp_2_1_reg_925,
        din1 => ap_const_lv32_0,
        ce => grp_fu_255_ce,
        dout => grp_fu_255_p2);

    myFuncAccel4_fadd_32ns_32ns_32_5_full_dsp_1_U3 : component myFuncAccel4_fadd_32ns_32ns_32_5_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => tmp_2_2_reg_930,
        din1 => ap_const_lv32_0,
        ce => grp_fu_260_ce,
        dout => grp_fu_260_p2);

    myFuncAccel4_fadd_32ns_32ns_32_5_full_dsp_1_U4 : component myFuncAccel4_fadd_32ns_32ns_32_5_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => tmp_2_3_reg_935,
        din1 => ap_const_lv32_0,
        ce => grp_fu_265_ce,
        dout => grp_fu_265_p2);

    myFuncAccel4_fadd_32ns_32ns_32_5_full_dsp_1_U5 : component myFuncAccel4_fadd_32ns_32ns_32_5_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => tmp_3_reg_948,
        din1 => tmp_2_0_1_reg_953,
        ce => grp_fu_270_ce,
        dout => grp_fu_270_p2);

    myFuncAccel4_fadd_32ns_32ns_32_5_full_dsp_1_U6 : component myFuncAccel4_fadd_32ns_32ns_32_5_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => tmp_3_1_reg_958,
        din1 => tmp_2_1_1_reg_963,
        ce => grp_fu_274_ce,
        dout => grp_fu_274_p2);

    myFuncAccel4_fadd_32ns_32ns_32_5_full_dsp_1_U7 : component myFuncAccel4_fadd_32ns_32ns_32_5_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => tmp_3_2_reg_968,
        din1 => tmp_2_2_1_reg_973,
        ce => grp_fu_278_ce,
        dout => grp_fu_278_p2);

    myFuncAccel4_fadd_32ns_32ns_32_5_full_dsp_1_U8 : component myFuncAccel4_fadd_32ns_32ns_32_5_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => tmp_3_3_reg_978,
        din1 => tmp_2_3_1_reg_983,
        ce => grp_fu_282_ce,
        dout => grp_fu_282_p2);

    myFuncAccel4_fadd_32ns_32ns_32_5_full_dsp_1_U9 : component myFuncAccel4_fadd_32ns_32ns_32_5_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => tmp_3_0_1_reg_996,
        din1 => tmp_2_0_2_reg_1001,
        ce => grp_fu_286_ce,
        dout => grp_fu_286_p2);

    myFuncAccel4_fadd_32ns_32ns_32_5_full_dsp_1_U10 : component myFuncAccel4_fadd_32ns_32ns_32_5_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => tmp_3_1_1_reg_1006,
        din1 => tmp_2_1_2_reg_1011,
        ce => grp_fu_290_ce,
        dout => grp_fu_290_p2);

    myFuncAccel4_fadd_32ns_32ns_32_5_full_dsp_1_U11 : component myFuncAccel4_fadd_32ns_32ns_32_5_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => tmp_3_2_1_reg_1016,
        din1 => tmp_2_2_2_reg_1021,
        ce => grp_fu_294_ce,
        dout => grp_fu_294_p2);

    myFuncAccel4_fadd_32ns_32ns_32_5_full_dsp_1_U12 : component myFuncAccel4_fadd_32ns_32ns_32_5_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => tmp_3_3_1_reg_1026,
        din1 => tmp_2_3_2_reg_1031,
        ce => grp_fu_298_ce,
        dout => grp_fu_298_p2);

    myFuncAccel4_fadd_32ns_32ns_32_5_full_dsp_1_U13 : component myFuncAccel4_fadd_32ns_32ns_32_5_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => tmp_3_0_2_reg_1044,
        din1 => tmp_2_0_3_reg_1049,
        ce => grp_fu_302_ce,
        dout => grp_fu_302_p2);

    myFuncAccel4_fadd_32ns_32ns_32_5_full_dsp_1_U14 : component myFuncAccel4_fadd_32ns_32ns_32_5_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => tmp_3_1_2_reg_1054,
        din1 => tmp_2_1_3_reg_1059,
        ce => grp_fu_306_ce,
        dout => grp_fu_306_p2);

    myFuncAccel4_fadd_32ns_32ns_32_5_full_dsp_1_U15 : component myFuncAccel4_fadd_32ns_32ns_32_5_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => tmp_3_2_2_reg_1064,
        din1 => tmp_2_2_3_reg_1069,
        ce => grp_fu_310_ce,
        dout => grp_fu_310_p2);

    myFuncAccel4_fadd_32ns_32ns_32_5_full_dsp_1_U16 : component myFuncAccel4_fadd_32ns_32ns_32_5_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => tmp_3_3_2_reg_1074,
        din1 => tmp_2_3_3_reg_1079,
        ce => grp_fu_314_ce,
        dout => grp_fu_314_p2);

    myFuncAccel4_fmul_32ns_32ns_32_4_max_dsp_1_U17 : component myFuncAccel4_fmul_32ns_32ns_32_4_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => data0_0,
        din1 => bitcast_ln56_fu_427_p1,
        ce => grp_fu_318_ce,
        dout => grp_fu_318_p2);

    myFuncAccel4_fmul_32ns_32ns_32_4_max_dsp_1_U18 : component myFuncAccel4_fmul_32ns_32ns_32_4_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => data0_4,
        din1 => bitcast_ln56_fu_427_p1,
        ce => grp_fu_322_ce,
        dout => grp_fu_322_p2);

    myFuncAccel4_fmul_32ns_32ns_32_4_max_dsp_1_U19 : component myFuncAccel4_fmul_32ns_32ns_32_4_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => data0_8,
        din1 => bitcast_ln56_fu_427_p1,
        ce => grp_fu_326_ce,
        dout => grp_fu_326_p2);

    myFuncAccel4_fmul_32ns_32ns_32_4_max_dsp_1_U20 : component myFuncAccel4_fmul_32ns_32ns_32_4_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => data0_12,
        din1 => bitcast_ln56_fu_427_p1,
        ce => grp_fu_330_ce,
        dout => grp_fu_330_p2);

    myFuncAccel4_fmul_32ns_32ns_32_4_max_dsp_1_U21 : component myFuncAccel4_fmul_32ns_32ns_32_4_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => data0_1,
        din1 => bitcast_ln56_1_fu_485_p1,
        ce => grp_fu_334_ce,
        dout => grp_fu_334_p2);

    myFuncAccel4_fmul_32ns_32ns_32_4_max_dsp_1_U22 : component myFuncAccel4_fmul_32ns_32ns_32_4_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => data0_5,
        din1 => bitcast_ln56_1_fu_485_p1,
        ce => grp_fu_338_ce,
        dout => grp_fu_338_p2);

    myFuncAccel4_fmul_32ns_32ns_32_4_max_dsp_1_U23 : component myFuncAccel4_fmul_32ns_32ns_32_4_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => data0_9,
        din1 => bitcast_ln56_1_fu_485_p1,
        ce => grp_fu_342_ce,
        dout => grp_fu_342_p2);

    myFuncAccel4_fmul_32ns_32ns_32_4_max_dsp_1_U24 : component myFuncAccel4_fmul_32ns_32ns_32_4_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => data0_13,
        din1 => bitcast_ln56_1_fu_485_p1,
        ce => grp_fu_346_ce,
        dout => grp_fu_346_p2);

    myFuncAccel4_fmul_32ns_32ns_32_4_max_dsp_1_U25 : component myFuncAccel4_fmul_32ns_32ns_32_4_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => data0_2,
        din1 => bitcast_ln56_2_fu_492_p1,
        ce => grp_fu_350_ce,
        dout => grp_fu_350_p2);

    myFuncAccel4_fmul_32ns_32ns_32_4_max_dsp_1_U26 : component myFuncAccel4_fmul_32ns_32ns_32_4_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => data0_6,
        din1 => bitcast_ln56_2_fu_492_p1,
        ce => grp_fu_354_ce,
        dout => grp_fu_354_p2);

    myFuncAccel4_fmul_32ns_32ns_32_4_max_dsp_1_U27 : component myFuncAccel4_fmul_32ns_32ns_32_4_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => data0_10,
        din1 => bitcast_ln56_2_fu_492_p1,
        ce => grp_fu_358_ce,
        dout => grp_fu_358_p2);

    myFuncAccel4_fmul_32ns_32ns_32_4_max_dsp_1_U28 : component myFuncAccel4_fmul_32ns_32ns_32_4_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => data0_14,
        din1 => bitcast_ln56_2_fu_492_p1,
        ce => grp_fu_362_ce,
        dout => grp_fu_362_p2);

    myFuncAccel4_fmul_32ns_32ns_32_4_max_dsp_1_U29 : component myFuncAccel4_fmul_32ns_32ns_32_4_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => data0_3,
        din1 => bitcast_ln56_3_fu_499_p1,
        ce => grp_fu_366_ce,
        dout => grp_fu_366_p2);

    myFuncAccel4_fmul_32ns_32ns_32_4_max_dsp_1_U30 : component myFuncAccel4_fmul_32ns_32ns_32_4_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => data0_7,
        din1 => bitcast_ln56_3_fu_499_p1,
        ce => grp_fu_370_ce,
        dout => grp_fu_370_p2);

    myFuncAccel4_fmul_32ns_32ns_32_4_max_dsp_1_U31 : component myFuncAccel4_fmul_32ns_32ns_32_4_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => data0_11,
        din1 => bitcast_ln56_3_fu_499_p1,
        ce => grp_fu_374_ce,
        dout => grp_fu_374_p2);

    myFuncAccel4_fmul_32ns_32ns_32_4_max_dsp_1_U32 : component myFuncAccel4_fmul_32ns_32ns_32_4_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => data0_15,
        din1 => bitcast_ln56_3_fu_499_p1,
        ce => grp_fu_378_ce,
        dout => grp_fu_378_p2);

    myFuncAccel4_fcmp_32ns_32ns_1_2_1_U33 : component myFuncAccel4_fcmp_32ns_32ns_1_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => tmp_3_0_3_reg_1084,
        din1 => threshold,
        ce => grp_fu_382_ce,
        opcode => ap_const_lv5_2,
        dout => grp_fu_382_p2);

    myFuncAccel4_fcmp_32ns_32ns_1_2_1_U34 : component myFuncAccel4_fcmp_32ns_32ns_1_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => tmp_3_1_3_reg_1090,
        din1 => threshold,
        ce => grp_fu_386_ce,
        opcode => ap_const_lv5_2,
        dout => grp_fu_386_p2);

    myFuncAccel4_fcmp_32ns_32ns_1_2_1_U35 : component myFuncAccel4_fcmp_32ns_32ns_1_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => tmp_3_2_3_reg_1096,
        din1 => threshold,
        ce => grp_fu_390_ce,
        opcode => ap_const_lv5_2,
        dout => grp_fu_390_p2);

    myFuncAccel4_fcmp_32ns_32ns_1_2_1_U36 : component myFuncAccel4_fcmp_32ns_32ns_1_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => tmp_3_3_3_reg_1102,
        din1 => threshold,
        ce => grp_fu_394_ce,
        opcode => ap_const_lv5_2,
        dout => grp_fu_394_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state2);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter10 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter11_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter11 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter12_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter12 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter13_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter13 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter14_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter14 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter14 <= ap_enable_reg_pp0_iter13;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter15_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter15 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter15 <= ap_enable_reg_pp0_iter14;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter16_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter16 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter16 <= ap_enable_reg_pp0_iter15;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter17_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter17 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter17 <= ap_enable_reg_pp0_iter16;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter18_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter18 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter18 <= ap_enable_reg_pp0_iter17;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter19_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter19 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter19 <= ap_enable_reg_pp0_iter18;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter20_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter20 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter20 <= ap_enable_reg_pp0_iter19;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter21_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter21 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter21 <= ap_enable_reg_pp0_iter20;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter22_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter22 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter22 <= ap_enable_reg_pp0_iter21;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter23_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter23 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter23 <= ap_enable_reg_pp0_iter22;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter24_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter24 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter24 <= ap_enable_reg_pp0_iter23;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter25_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter25 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter25 <= ap_enable_reg_pp0_iter24;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter26_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter26 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter26 <= ap_enable_reg_pp0_iter25;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter27_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter27 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter27 <= ap_enable_reg_pp0_iter26;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                    ap_enable_reg_pp0_iter27 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
                end if; 
            end if;
        end if;
    end process;


    data1_V_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                data1_V_0_sel_rd <= ap_const_logic_0;
            else
                if (((data1_V_0_ack_out = ap_const_logic_1) and (data1_V_0_vld_out = ap_const_logic_1))) then 
                                        data1_V_0_sel_rd <= not(data1_V_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    data1_V_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                data1_V_0_sel_wr <= ap_const_logic_0;
            else
                if (((data1_V_0_ack_in = ap_const_logic_1) and (data1_V_0_vld_in = ap_const_logic_1))) then 
                                        data1_V_0_sel_wr <= not(data1_V_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    data1_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                data1_V_0_state <= ap_const_lv2_0;
            else
                if ((((data1_V_0_state = ap_const_lv2_2) and (data1_V_0_vld_in = ap_const_logic_0)) or ((data1_V_0_state = ap_const_lv2_3) and (data1_V_0_vld_in = ap_const_logic_0) and (data1_V_0_ack_out = ap_const_logic_1)))) then 
                    data1_V_0_state <= ap_const_lv2_2;
                elsif ((((data1_V_0_state = ap_const_lv2_1) and (data1_V_0_ack_out = ap_const_logic_0)) or ((data1_V_0_state = ap_const_lv2_3) and (data1_V_0_ack_out = ap_const_logic_0) and (data1_V_0_vld_in = ap_const_logic_1)))) then 
                    data1_V_0_state <= ap_const_lv2_1;
                elsif (((not(((data1_V_0_vld_in = ap_const_logic_0) and (data1_V_0_ack_out = ap_const_logic_1))) and not(((data1_V_0_ack_out = ap_const_logic_0) and (data1_V_0_vld_in = ap_const_logic_1))) and (data1_V_0_state = ap_const_lv2_3)) or ((data1_V_0_state = ap_const_lv2_1) and (data1_V_0_ack_out = ap_const_logic_1)) or ((data1_V_0_state = ap_const_lv2_2) and (data1_V_0_vld_in = ap_const_logic_1)))) then 
                    data1_V_0_state <= ap_const_lv2_3;
                else 
                    data1_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    data_out_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                data_out_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((data_out_V_1_ack_out = ap_const_logic_1) and (data_out_V_1_vld_out = ap_const_logic_1))) then 
                                        data_out_V_1_sel_rd <= not(data_out_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    data_out_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                data_out_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((data_out_V_1_ack_in = ap_const_logic_1) and (data_out_V_1_vld_in = ap_const_logic_1))) then 
                                        data_out_V_1_sel_wr <= not(data_out_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    data_out_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                data_out_V_1_state <= ap_const_lv2_0;
            else
                if ((((data_out_V_1_state = ap_const_lv2_2) and (data_out_V_1_vld_in = ap_const_logic_0)) or ((data_out_V_1_state = ap_const_lv2_3) and (data_out_V_1_vld_in = ap_const_logic_0) and (data_out_V_1_ack_out = ap_const_logic_1)))) then 
                    data_out_V_1_state <= ap_const_lv2_2;
                elsif ((((data_out_V_1_state = ap_const_lv2_1) and (data_out_V_TREADY = ap_const_logic_0)) or ((data_out_V_1_state = ap_const_lv2_3) and (data_out_V_TREADY = ap_const_logic_0) and (data_out_V_1_vld_in = ap_const_logic_1)))) then 
                    data_out_V_1_state <= ap_const_lv2_1;
                elsif (((not(((data_out_V_1_vld_in = ap_const_logic_0) and (data_out_V_1_ack_out = ap_const_logic_1))) and not(((data_out_V_TREADY = ap_const_logic_0) and (data_out_V_1_vld_in = ap_const_logic_1))) and (data_out_V_1_state = ap_const_lv2_3)) or ((data_out_V_1_state = ap_const_lv2_1) and (data_out_V_1_ack_out = ap_const_logic_1)) or ((data_out_V_1_state = ap_const_lv2_2) and (data_out_V_1_vld_in = ap_const_logic_1)))) then 
                    data_out_V_1_state <= ap_const_lv2_3;
                else 
                    data_out_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    i_1_reg_239_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                i_1_reg_239 <= ap_const_lv32_0;
            elsif (((icmp_ln45_fu_412_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                i_1_reg_239 <= i_fu_417_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln45_reg_880_pp0_iter24_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                add_ln72_1_reg_1133 <= add_ln72_1_fu_712_p2;
                add_ln72_reg_1128 <= add_ln72_fu_706_p2;
                bitcast_ln72_2_reg_1113 <= bitcast_ln72_2_fu_556_p1;
                bitcast_ln72_3_reg_1118 <= bitcast_ln72_3_fu_606_p1;
                bitcast_ln72_4_reg_1123 <= bitcast_ln72_4_fu_656_p1;
                bitcast_ln72_reg_1108 <= bitcast_ln72_fu_506_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((data1_V_0_load_A = ap_const_logic_1)) then
                data1_V_0_payload_A <= data1_V_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((data1_V_0_load_B = ap_const_logic_1)) then
                data1_V_0_payload_B <= data1_V_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((data_out_V_1_load_A = ap_const_logic_1)) then
                data_out_V_1_payload_A <= p_Result_2_3_fu_764_p5;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((data_out_V_1_load_B = ap_const_logic_1)) then
                data_out_V_1_payload_B <= p_Result_2_3_fu_764_p5;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln45_reg_880 <= icmp_ln45_fu_412_p2;
                icmp_ln45_reg_880_pp0_iter1_reg <= icmp_ln45_reg_880;
                p_Result_1_reg_897_pp0_iter1_reg <= p_Result_1_reg_897;
                p_Result_3_reg_907_pp0_iter1_reg <= p_Result_3_reg_907;
                p_Result_s_reg_902_pp0_iter1_reg <= p_Result_s_reg_902;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                icmp_ln45_reg_880_pp0_iter10_reg <= icmp_ln45_reg_880_pp0_iter9_reg;
                icmp_ln45_reg_880_pp0_iter11_reg <= icmp_ln45_reg_880_pp0_iter10_reg;
                icmp_ln45_reg_880_pp0_iter12_reg <= icmp_ln45_reg_880_pp0_iter11_reg;
                icmp_ln45_reg_880_pp0_iter13_reg <= icmp_ln45_reg_880_pp0_iter12_reg;
                icmp_ln45_reg_880_pp0_iter14_reg <= icmp_ln45_reg_880_pp0_iter13_reg;
                icmp_ln45_reg_880_pp0_iter15_reg <= icmp_ln45_reg_880_pp0_iter14_reg;
                icmp_ln45_reg_880_pp0_iter16_reg <= icmp_ln45_reg_880_pp0_iter15_reg;
                icmp_ln45_reg_880_pp0_iter17_reg <= icmp_ln45_reg_880_pp0_iter16_reg;
                icmp_ln45_reg_880_pp0_iter18_reg <= icmp_ln45_reg_880_pp0_iter17_reg;
                icmp_ln45_reg_880_pp0_iter19_reg <= icmp_ln45_reg_880_pp0_iter18_reg;
                icmp_ln45_reg_880_pp0_iter20_reg <= icmp_ln45_reg_880_pp0_iter19_reg;
                icmp_ln45_reg_880_pp0_iter21_reg <= icmp_ln45_reg_880_pp0_iter20_reg;
                icmp_ln45_reg_880_pp0_iter22_reg <= icmp_ln45_reg_880_pp0_iter21_reg;
                icmp_ln45_reg_880_pp0_iter23_reg <= icmp_ln45_reg_880_pp0_iter22_reg;
                icmp_ln45_reg_880_pp0_iter24_reg <= icmp_ln45_reg_880_pp0_iter23_reg;
                icmp_ln45_reg_880_pp0_iter25_reg <= icmp_ln45_reg_880_pp0_iter24_reg;
                icmp_ln45_reg_880_pp0_iter26_reg <= icmp_ln45_reg_880_pp0_iter25_reg;
                icmp_ln45_reg_880_pp0_iter2_reg <= icmp_ln45_reg_880_pp0_iter1_reg;
                icmp_ln45_reg_880_pp0_iter3_reg <= icmp_ln45_reg_880_pp0_iter2_reg;
                icmp_ln45_reg_880_pp0_iter4_reg <= icmp_ln45_reg_880_pp0_iter3_reg;
                icmp_ln45_reg_880_pp0_iter5_reg <= icmp_ln45_reg_880_pp0_iter4_reg;
                icmp_ln45_reg_880_pp0_iter6_reg <= icmp_ln45_reg_880_pp0_iter5_reg;
                icmp_ln45_reg_880_pp0_iter7_reg <= icmp_ln45_reg_880_pp0_iter6_reg;
                icmp_ln45_reg_880_pp0_iter8_reg <= icmp_ln45_reg_880_pp0_iter7_reg;
                icmp_ln45_reg_880_pp0_iter9_reg <= icmp_ln45_reg_880_pp0_iter8_reg;
                p_Result_1_reg_897_pp0_iter2_reg <= p_Result_1_reg_897_pp0_iter1_reg;
                p_Result_1_reg_897_pp0_iter3_reg <= p_Result_1_reg_897_pp0_iter2_reg;
                p_Result_1_reg_897_pp0_iter4_reg <= p_Result_1_reg_897_pp0_iter3_reg;
                p_Result_3_reg_907_pp0_iter10_reg <= p_Result_3_reg_907_pp0_iter9_reg;
                p_Result_3_reg_907_pp0_iter11_reg <= p_Result_3_reg_907_pp0_iter10_reg;
                p_Result_3_reg_907_pp0_iter12_reg <= p_Result_3_reg_907_pp0_iter11_reg;
                p_Result_3_reg_907_pp0_iter13_reg <= p_Result_3_reg_907_pp0_iter12_reg;
                p_Result_3_reg_907_pp0_iter14_reg <= p_Result_3_reg_907_pp0_iter13_reg;
                p_Result_3_reg_907_pp0_iter2_reg <= p_Result_3_reg_907_pp0_iter1_reg;
                p_Result_3_reg_907_pp0_iter3_reg <= p_Result_3_reg_907_pp0_iter2_reg;
                p_Result_3_reg_907_pp0_iter4_reg <= p_Result_3_reg_907_pp0_iter3_reg;
                p_Result_3_reg_907_pp0_iter5_reg <= p_Result_3_reg_907_pp0_iter4_reg;
                p_Result_3_reg_907_pp0_iter6_reg <= p_Result_3_reg_907_pp0_iter5_reg;
                p_Result_3_reg_907_pp0_iter7_reg <= p_Result_3_reg_907_pp0_iter6_reg;
                p_Result_3_reg_907_pp0_iter8_reg <= p_Result_3_reg_907_pp0_iter7_reg;
                p_Result_3_reg_907_pp0_iter9_reg <= p_Result_3_reg_907_pp0_iter8_reg;
                p_Result_s_reg_902_pp0_iter2_reg <= p_Result_s_reg_902_pp0_iter1_reg;
                p_Result_s_reg_902_pp0_iter3_reg <= p_Result_s_reg_902_pp0_iter2_reg;
                p_Result_s_reg_902_pp0_iter4_reg <= p_Result_s_reg_902_pp0_iter3_reg;
                p_Result_s_reg_902_pp0_iter5_reg <= p_Result_s_reg_902_pp0_iter4_reg;
                p_Result_s_reg_902_pp0_iter6_reg <= p_Result_s_reg_902_pp0_iter5_reg;
                p_Result_s_reg_902_pp0_iter7_reg <= p_Result_s_reg_902_pp0_iter6_reg;
                p_Result_s_reg_902_pp0_iter8_reg <= p_Result_s_reg_902_pp0_iter7_reg;
                p_Result_s_reg_902_pp0_iter9_reg <= p_Result_s_reg_902_pp0_iter8_reg;
                tmp_3_0_3_reg_1084_pp0_iter24_reg <= tmp_3_0_3_reg_1084;
                tmp_3_1_3_reg_1090_pp0_iter24_reg <= tmp_3_1_3_reg_1090;
                tmp_3_2_3_reg_1096_pp0_iter24_reg <= tmp_3_2_3_reg_1096;
                tmp_3_3_3_reg_1102_pp0_iter24_reg <= tmp_3_3_3_reg_1102;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln45_fu_412_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                p_Result_1_reg_897 <= data1_V_0_data_out(63 downto 32);
                p_Result_3_reg_907 <= data1_V_0_data_out(127 downto 96);
                p_Result_s_reg_902 <= data1_V_0_data_out(95 downto 64);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln45_reg_880_pp0_iter7_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                tmp_2_0_1_reg_953 <= grp_fu_334_p2;
                tmp_2_1_1_reg_963 <= grp_fu_338_p2;
                tmp_2_2_1_reg_973 <= grp_fu_342_p2;
                tmp_2_3_1_reg_983 <= grp_fu_346_p2;
                tmp_3_1_reg_958 <= grp_fu_255_p2;
                tmp_3_2_reg_968 <= grp_fu_260_p2;
                tmp_3_3_reg_978 <= grp_fu_265_p2;
                tmp_3_reg_948 <= grp_fu_250_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln45_reg_880_pp0_iter12_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                tmp_2_0_2_reg_1001 <= grp_fu_350_p2;
                tmp_2_1_2_reg_1011 <= grp_fu_354_p2;
                tmp_2_2_2_reg_1021 <= grp_fu_358_p2;
                tmp_2_3_2_reg_1031 <= grp_fu_362_p2;
                tmp_3_0_1_reg_996 <= grp_fu_270_p2;
                tmp_3_1_1_reg_1006 <= grp_fu_274_p2;
                tmp_3_2_1_reg_1016 <= grp_fu_278_p2;
                tmp_3_3_1_reg_1026 <= grp_fu_282_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln45_reg_880_pp0_iter17_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                tmp_2_0_3_reg_1049 <= grp_fu_366_p2;
                tmp_2_1_3_reg_1059 <= grp_fu_370_p2;
                tmp_2_2_3_reg_1069 <= grp_fu_374_p2;
                tmp_2_3_3_reg_1079 <= grp_fu_378_p2;
                tmp_3_0_2_reg_1044 <= grp_fu_286_p2;
                tmp_3_1_2_reg_1054 <= grp_fu_290_p2;
                tmp_3_2_2_reg_1064 <= grp_fu_294_p2;
                tmp_3_3_2_reg_1074 <= grp_fu_298_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln45_reg_880_pp0_iter2_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                tmp_2_1_reg_925 <= grp_fu_322_p2;
                tmp_2_2_reg_930 <= grp_fu_326_p2;
                tmp_2_3_reg_935 <= grp_fu_330_p2;
                tmp_2_reg_920 <= grp_fu_318_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln45_reg_880_pp0_iter22_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                tmp_3_0_3_reg_1084 <= grp_fu_302_p2;
                tmp_3_1_3_reg_1090 <= grp_fu_306_p2;
                tmp_3_2_3_reg_1096 <= grp_fu_310_p2;
                tmp_3_3_3_reg_1102 <= grp_fu_314_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, data_out_V_TREADY, data_out_V_1_state, ap_enable_reg_pp0_iter0, icmp_ln45_fu_412_p2, ap_enable_reg_pp0_iter26, ap_enable_reg_pp0_iter27, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter1, ap_CS_fsm_state30)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((icmp_ln45_fu_412_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) and not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter27 = ap_const_logic_1) and (ap_enable_reg_pp0_iter26 = ap_const_logic_0))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter27 = ap_const_logic_1) and (ap_enable_reg_pp0_iter26 = ap_const_logic_0)) or ((icmp_ln45_fu_412_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state30;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state30 => 
                if ((not(((data_out_V_1_state = ap_const_lv2_1) or ((data_out_V_1_state = ap_const_lv2_3) and (data_out_V_TREADY = ap_const_logic_0)))) and (ap_const_logic_1 = ap_CS_fsm_state30))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state30;
                end if;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;
    add_ln72_1_fu_712_p2 <= std_logic_vector(unsigned(zext_ln68_2_fu_652_p1) + unsigned(zext_ln72_fu_702_p1));
    add_ln72_2_fu_724_p2 <= std_logic_vector(unsigned(zext_ln72_2_fu_721_p1) + unsigned(zext_ln72_1_fu_718_p1));
    add_ln72_fu_706_p2 <= std_logic_vector(unsigned(zext_ln68_1_fu_602_p1) + unsigned(zext_ln68_fu_552_p1));
    and_ln72_1_fu_546_p2 <= (grp_fu_382_p2 and and_ln72_fu_541_p2);
    and_ln72_2_fu_591_p2 <= (or_ln72_2_fu_585_p2 and or_ln72_1_fu_480_p2);
    and_ln72_3_fu_596_p2 <= (grp_fu_386_p2 and and_ln72_2_fu_591_p2);
    and_ln72_4_fu_641_p2 <= (or_ln72_3_fu_635_p2 and or_ln72_1_fu_480_p2);
    and_ln72_5_fu_646_p2 <= (grp_fu_390_p2 and and_ln72_4_fu_641_p2);
    and_ln72_6_fu_691_p2 <= (or_ln72_4_fu_685_p2 and or_ln72_1_fu_480_p2);
    and_ln72_7_fu_696_p2 <= (grp_fu_394_p2 and and_ln72_6_fu_691_p2);
    and_ln72_fu_541_p2 <= (or_ln72_fu_535_p2 and or_ln72_1_fu_480_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state30 <= ap_CS_fsm(2);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_00001_assign_proc : process(data1_V_0_vld_out, ap_enable_reg_pp0_iter0, icmp_ln45_fu_412_p2)
    begin
                ap_block_pp0_stage0_00001 <= ((icmp_ln45_fu_412_p2 = ap_const_lv1_0) and (data1_V_0_vld_out = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage0_01001_assign_proc : process(data1_V_0_vld_out, ap_enable_reg_pp0_iter0, icmp_ln45_fu_412_p2)
    begin
                ap_block_pp0_stage0_01001 <= ((icmp_ln45_fu_412_p2 = ap_const_lv1_0) and (data1_V_0_vld_out = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(data1_V_0_vld_out, ap_enable_reg_pp0_iter0, icmp_ln45_fu_412_p2, ap_enable_reg_pp0_iter26, ap_enable_reg_pp0_iter27, ap_block_state28_io, ap_block_state29_io)
    begin
                ap_block_pp0_stage0_11001 <= (((ap_const_boolean_1 = ap_block_state29_io) and (ap_enable_reg_pp0_iter27 = ap_const_logic_1)) or ((ap_const_boolean_1 = ap_block_state28_io) and (ap_enable_reg_pp0_iter26 = ap_const_logic_1)) or ((icmp_ln45_fu_412_p2 = ap_const_lv1_0) and (data1_V_0_vld_out = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(data1_V_0_vld_out, ap_enable_reg_pp0_iter0, icmp_ln45_fu_412_p2, ap_enable_reg_pp0_iter26, ap_enable_reg_pp0_iter27, ap_block_state28_io, ap_block_state29_io)
    begin
                ap_block_pp0_stage0_subdone <= (((ap_const_boolean_1 = ap_block_state29_io) and (ap_enable_reg_pp0_iter27 = ap_const_logic_1)) or ((ap_const_boolean_1 = ap_block_state28_io) and (ap_enable_reg_pp0_iter26 = ap_const_logic_1)) or ((icmp_ln45_fu_412_p2 = ap_const_lv1_0) and (data1_V_0_vld_out = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)));
    end process;

        ap_block_state10_pp0_stage0_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage0_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage0_iter10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp0_stage0_iter11 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp0_stage0_iter12 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state15_pp0_stage0_iter13 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state16_pp0_stage0_iter14 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state17_pp0_stage0_iter15 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state18_pp0_stage0_iter16 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state19_pp0_stage0_iter17 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state20_pp0_stage0_iter18 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state21_pp0_stage0_iter19 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state22_pp0_stage0_iter20 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state23_pp0_stage0_iter21 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state24_pp0_stage0_iter22 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state25_pp0_stage0_iter23 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state26_pp0_stage0_iter24 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state27_pp0_stage0_iter25 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state28_io_assign_proc : process(data_out_V_1_ack_in, icmp_ln45_reg_880_pp0_iter25_reg)
    begin
                ap_block_state28_io <= ((icmp_ln45_reg_880_pp0_iter25_reg = ap_const_lv1_0) and (data_out_V_1_ack_in = ap_const_logic_0));
    end process;

        ap_block_state28_pp0_stage0_iter26 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state29_io_assign_proc : process(data_out_V_1_ack_in, icmp_ln45_reg_880_pp0_iter26_reg)
    begin
                ap_block_state29_io <= ((icmp_ln45_reg_880_pp0_iter26_reg = ap_const_lv1_0) and (data_out_V_1_ack_in = ap_const_logic_0));
    end process;

        ap_block_state29_pp0_stage0_iter27 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state2_pp0_stage0_iter0_assign_proc : process(data1_V_0_vld_out, icmp_ln45_fu_412_p2)
    begin
                ap_block_state2_pp0_stage0_iter0 <= ((icmp_ln45_fu_412_p2 = ap_const_lv1_0) and (data1_V_0_vld_out = ap_const_logic_0));
    end process;


    ap_block_state30_assign_proc : process(data_out_V_TREADY, data_out_V_1_state)
    begin
                ap_block_state30 <= ((data_out_V_1_state = ap_const_lv2_1) or ((data_out_V_1_state = ap_const_lv2_3) and (data_out_V_TREADY = ap_const_logic_0)));
    end process;

        ap_block_state3_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state2_assign_proc : process(icmp_ln45_fu_412_p2)
    begin
        if ((icmp_ln45_fu_412_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(data_out_V_TREADY, data_out_V_1_state, ap_CS_fsm_state30)
    begin
        if ((not(((data_out_V_1_state = ap_const_lv2_1) or ((data_out_V_1_state = ap_const_lv2_3) and (data_out_V_TREADY = ap_const_logic_0)))) and (ap_const_logic_1 = ap_CS_fsm_state30))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter26, ap_enable_reg_pp0_iter27, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter11, ap_enable_reg_pp0_iter12, ap_enable_reg_pp0_iter13, ap_enable_reg_pp0_iter14, ap_enable_reg_pp0_iter15, ap_enable_reg_pp0_iter16, ap_enable_reg_pp0_iter17, ap_enable_reg_pp0_iter18, ap_enable_reg_pp0_iter19, ap_enable_reg_pp0_iter20, ap_enable_reg_pp0_iter21, ap_enable_reg_pp0_iter22, ap_enable_reg_pp0_iter23, ap_enable_reg_pp0_iter24, ap_enable_reg_pp0_iter25)
    begin
        if (((ap_enable_reg_pp0_iter25 = ap_const_logic_0) and (ap_enable_reg_pp0_iter24 = ap_const_logic_0) and (ap_enable_reg_pp0_iter23 = ap_const_logic_0) and (ap_enable_reg_pp0_iter22 = ap_const_logic_0) and (ap_enable_reg_pp0_iter21 = ap_const_logic_0) and (ap_enable_reg_pp0_iter20 = ap_const_logic_0) and (ap_enable_reg_pp0_iter19 = ap_const_logic_0) and (ap_enable_reg_pp0_iter18 = ap_const_logic_0) and (ap_enable_reg_pp0_iter17 = ap_const_logic_0) and (ap_enable_reg_pp0_iter16 = ap_const_logic_0) and (ap_enable_reg_pp0_iter15 = ap_const_logic_0) and (ap_enable_reg_pp0_iter14 = ap_const_logic_0) and (ap_enable_reg_pp0_iter13 = ap_const_logic_0) and (ap_enable_reg_pp0_iter12 = ap_const_logic_0) and (ap_enable_reg_pp0_iter11 = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter27 = ap_const_logic_0) and (ap_enable_reg_pp0_iter26 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(data_out_V_TREADY, data_out_V_1_state, ap_CS_fsm_state30)
    begin
        if ((not(((data_out_V_1_state = ap_const_lv2_1) or ((data_out_V_1_state = ap_const_lv2_3) and (data_out_V_TREADY = ap_const_logic_0)))) and (ap_const_logic_1 = ap_CS_fsm_state30))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    bitcast_ln56_1_fu_485_p1 <= p_Result_1_reg_897_pp0_iter4_reg;
    bitcast_ln56_2_fu_492_p1 <= p_Result_s_reg_902_pp0_iter9_reg;
    bitcast_ln56_3_fu_499_p1 <= p_Result_3_reg_907_pp0_iter14_reg;
    bitcast_ln56_fu_427_p1 <= trunc_ln681_fu_423_p1;
    bitcast_ln72_1_fu_398_p1 <= threshold;
    bitcast_ln72_2_fu_556_p1 <= tmp_3_1_3_reg_1090_pp0_iter24_reg;
    bitcast_ln72_3_fu_606_p1 <= tmp_3_2_3_reg_1096_pp0_iter24_reg;
    bitcast_ln72_4_fu_656_p1 <= tmp_3_3_3_reg_1102_pp0_iter24_reg;
    bitcast_ln72_fu_506_p1 <= tmp_3_0_3_reg_1084_pp0_iter24_reg;
    data1_V_0_ack_in <= data1_V_0_state(1);

    data1_V_0_ack_out_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, icmp_ln45_fu_412_p2, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln45_fu_412_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            data1_V_0_ack_out <= ap_const_logic_1;
        else 
            data1_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    data1_V_0_data_out_assign_proc : process(data1_V_0_payload_A, data1_V_0_payload_B, data1_V_0_sel)
    begin
        if ((data1_V_0_sel = ap_const_logic_1)) then 
            data1_V_0_data_out <= data1_V_0_payload_B;
        else 
            data1_V_0_data_out <= data1_V_0_payload_A;
        end if; 
    end process;

    data1_V_0_load_A <= (not(data1_V_0_sel_wr) and data1_V_0_state_cmp_full);
    data1_V_0_load_B <= (data1_V_0_state_cmp_full and data1_V_0_sel_wr);
    data1_V_0_sel <= data1_V_0_sel_rd;
    data1_V_0_state_cmp_full <= '0' when (data1_V_0_state = ap_const_lv2_1) else '1';
    data1_V_0_vld_in <= data1_V_TVALID;
    data1_V_0_vld_out <= data1_V_0_state(0);

    data1_V_TDATA_blk_n_assign_proc : process(data1_V_0_state, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0, icmp_ln45_fu_412_p2)
    begin
        if (((icmp_ln45_fu_412_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            data1_V_TDATA_blk_n <= data1_V_0_state(0);
        else 
            data1_V_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    data1_V_TREADY <= data1_V_0_state(1);
    data_out_V_1_ack_in <= data_out_V_1_state(1);
    data_out_V_1_ack_out <= data_out_V_TREADY;

    data_out_V_1_data_out_assign_proc : process(data_out_V_1_payload_A, data_out_V_1_payload_B, data_out_V_1_sel)
    begin
        if ((data_out_V_1_sel = ap_const_logic_1)) then 
            data_out_V_1_data_out <= data_out_V_1_payload_B;
        else 
            data_out_V_1_data_out <= data_out_V_1_payload_A;
        end if; 
    end process;

    data_out_V_1_load_A <= (not(data_out_V_1_sel_wr) and data_out_V_1_state_cmp_full);
    data_out_V_1_load_B <= (data_out_V_1_state_cmp_full and data_out_V_1_sel_wr);
    data_out_V_1_sel <= data_out_V_1_sel_rd;
    data_out_V_1_state_cmp_full <= '0' when (data_out_V_1_state = ap_const_lv2_1) else '1';

    data_out_V_1_vld_in_assign_proc : process(ap_enable_reg_pp0_iter26, icmp_ln45_reg_880_pp0_iter25_reg, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln45_reg_880_pp0_iter25_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter26 = ap_const_logic_1))) then 
            data_out_V_1_vld_in <= ap_const_logic_1;
        else 
            data_out_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    data_out_V_1_vld_out <= data_out_V_1_state(0);
    data_out_V_TDATA <= data_out_V_1_data_out;

    data_out_V_TDATA_blk_n_assign_proc : process(data_out_V_1_state, ap_block_pp0_stage0, ap_enable_reg_pp0_iter26, icmp_ln45_reg_880_pp0_iter25_reg, ap_enable_reg_pp0_iter27, icmp_ln45_reg_880_pp0_iter26_reg)
    begin
        if ((((icmp_ln45_reg_880_pp0_iter26_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter27 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0)) or ((icmp_ln45_reg_880_pp0_iter25_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter26 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0)))) then 
            data_out_V_TDATA_blk_n <= data_out_V_1_state(1);
        else 
            data_out_V_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    data_out_V_TVALID <= data_out_V_1_state(0);

    grp_fu_250_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_250_ce <= ap_const_logic_1;
        else 
            grp_fu_250_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_255_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_255_ce <= ap_const_logic_1;
        else 
            grp_fu_255_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_260_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_260_ce <= ap_const_logic_1;
        else 
            grp_fu_260_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_265_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_265_ce <= ap_const_logic_1;
        else 
            grp_fu_265_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_270_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_270_ce <= ap_const_logic_1;
        else 
            grp_fu_270_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_274_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_274_ce <= ap_const_logic_1;
        else 
            grp_fu_274_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_278_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_278_ce <= ap_const_logic_1;
        else 
            grp_fu_278_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_282_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_282_ce <= ap_const_logic_1;
        else 
            grp_fu_282_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_286_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_286_ce <= ap_const_logic_1;
        else 
            grp_fu_286_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_290_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_290_ce <= ap_const_logic_1;
        else 
            grp_fu_290_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_294_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_294_ce <= ap_const_logic_1;
        else 
            grp_fu_294_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_298_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_298_ce <= ap_const_logic_1;
        else 
            grp_fu_298_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_302_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_302_ce <= ap_const_logic_1;
        else 
            grp_fu_302_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_306_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_306_ce <= ap_const_logic_1;
        else 
            grp_fu_306_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_310_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_310_ce <= ap_const_logic_1;
        else 
            grp_fu_310_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_314_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_314_ce <= ap_const_logic_1;
        else 
            grp_fu_314_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_318_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_318_ce <= ap_const_logic_1;
        else 
            grp_fu_318_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_322_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_322_ce <= ap_const_logic_1;
        else 
            grp_fu_322_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_326_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_326_ce <= ap_const_logic_1;
        else 
            grp_fu_326_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_330_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_330_ce <= ap_const_logic_1;
        else 
            grp_fu_330_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_334_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_334_ce <= ap_const_logic_1;
        else 
            grp_fu_334_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_338_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_338_ce <= ap_const_logic_1;
        else 
            grp_fu_338_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_342_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_342_ce <= ap_const_logic_1;
        else 
            grp_fu_342_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_346_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_346_ce <= ap_const_logic_1;
        else 
            grp_fu_346_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_350_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_350_ce <= ap_const_logic_1;
        else 
            grp_fu_350_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_354_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_354_ce <= ap_const_logic_1;
        else 
            grp_fu_354_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_358_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_358_ce <= ap_const_logic_1;
        else 
            grp_fu_358_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_362_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_362_ce <= ap_const_logic_1;
        else 
            grp_fu_362_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_366_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_366_ce <= ap_const_logic_1;
        else 
            grp_fu_366_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_370_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_370_ce <= ap_const_logic_1;
        else 
            grp_fu_370_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_374_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_374_ce <= ap_const_logic_1;
        else 
            grp_fu_374_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_378_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_378_ce <= ap_const_logic_1;
        else 
            grp_fu_378_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_382_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_382_ce <= ap_const_logic_1;
        else 
            grp_fu_382_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_386_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_386_ce <= ap_const_logic_1;
        else 
            grp_fu_386_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_390_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_390_ce <= ap_const_logic_1;
        else 
            grp_fu_390_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_394_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_394_ce <= ap_const_logic_1;
        else 
            grp_fu_394_ce <= ap_const_logic_0;
        end if; 
    end process;

    i_fu_417_p2 <= std_logic_vector(unsigned(i_1_reg_239) + unsigned(ap_const_lv32_1));
    icmp_ln45_fu_412_p2 <= "1" when (i_1_reg_239 = size) else "0";
    icmp_ln72_1_fu_529_p2 <= "1" when (trunc_ln72_1_fu_519_p1 = ap_const_lv23_0) else "0";
    icmp_ln72_2_fu_474_p2 <= "0" when (tmp_4_fu_465_p4 = ap_const_lv8_FF) else "1";
    icmp_ln72_3_fu_406_p2 <= "1" when (trunc_ln72_fu_402_p1 = ap_const_lv23_0) else "0";
    icmp_ln72_4_fu_573_p2 <= "0" when (tmp_6_fu_559_p4 = ap_const_lv8_FF) else "1";
    icmp_ln72_5_fu_579_p2 <= "1" when (trunc_ln72_2_fu_569_p1 = ap_const_lv23_0) else "0";
    icmp_ln72_6_fu_623_p2 <= "0" when (tmp_9_fu_609_p4 = ap_const_lv8_FF) else "1";
    icmp_ln72_7_fu_629_p2 <= "1" when (trunc_ln72_3_fu_619_p1 = ap_const_lv23_0) else "0";
    icmp_ln72_8_fu_673_p2 <= "0" when (tmp_7_fu_659_p4 = ap_const_lv8_FF) else "1";
    icmp_ln72_9_fu_679_p2 <= "1" when (trunc_ln72_4_fu_669_p1 = ap_const_lv23_0) else "0";
    icmp_ln72_fu_523_p2 <= "0" when (tmp_1_fu_509_p4 = ap_const_lv8_FF) else "1";
    icmp_ln78_fu_730_p2 <= "1" when (add_ln72_2_fu_724_p2 = ap_const_lv3_4) else "0";
    or_ln72_1_fu_480_p2 <= (icmp_ln72_3_fu_406_p2 or icmp_ln72_2_fu_474_p2);
    or_ln72_2_fu_585_p2 <= (icmp_ln72_5_fu_579_p2 or icmp_ln72_4_fu_573_p2);
    or_ln72_3_fu_635_p2 <= (icmp_ln72_7_fu_629_p2 or icmp_ln72_6_fu_623_p2);
    or_ln72_4_fu_685_p2 <= (icmp_ln72_9_fu_679_p2 or icmp_ln72_8_fu_673_p2);
    or_ln72_fu_535_p2 <= (icmp_ln72_fu_523_p2 or icmp_ln72_1_fu_529_p2);
    p_Result_2_3_fu_764_p5 <= (((select_ln79_3_fu_757_p3 & select_ln79_2_fu_750_p3) & select_ln79_1_fu_743_p3) & select_ln79_fu_736_p3);
    select_ln79_1_fu_743_p3 <= 
        ap_const_lv32_0 when (icmp_ln78_fu_730_p2(0) = '1') else 
        bitcast_ln72_2_reg_1113;
    select_ln79_2_fu_750_p3 <= 
        ap_const_lv32_0 when (icmp_ln78_fu_730_p2(0) = '1') else 
        bitcast_ln72_3_reg_1118;
    select_ln79_3_fu_757_p3 <= 
        ap_const_lv32_0 when (icmp_ln78_fu_730_p2(0) = '1') else 
        bitcast_ln72_4_reg_1123;
    select_ln79_fu_736_p3 <= 
        ap_const_lv32_0 when (icmp_ln78_fu_730_p2(0) = '1') else 
        bitcast_ln72_reg_1108;
    tmp_1_fu_509_p4 <= bitcast_ln72_fu_506_p1(30 downto 23);
    tmp_4_fu_465_p4 <= bitcast_ln72_1_fu_398_p1(30 downto 23);
    tmp_6_fu_559_p4 <= bitcast_ln72_2_fu_556_p1(30 downto 23);
    tmp_7_fu_659_p4 <= bitcast_ln72_4_fu_656_p1(30 downto 23);
    tmp_9_fu_609_p4 <= bitcast_ln72_3_fu_606_p1(30 downto 23);
    trunc_ln681_fu_423_p1 <= data1_V_0_data_out(32 - 1 downto 0);
    trunc_ln72_1_fu_519_p1 <= bitcast_ln72_fu_506_p1(23 - 1 downto 0);
    trunc_ln72_2_fu_569_p1 <= bitcast_ln72_2_fu_556_p1(23 - 1 downto 0);
    trunc_ln72_3_fu_619_p1 <= bitcast_ln72_3_fu_606_p1(23 - 1 downto 0);
    trunc_ln72_4_fu_669_p1 <= bitcast_ln72_4_fu_656_p1(23 - 1 downto 0);
    trunc_ln72_fu_402_p1 <= bitcast_ln72_1_fu_398_p1(23 - 1 downto 0);
    zext_ln68_1_fu_602_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(and_ln72_3_fu_596_p2),2));
    zext_ln68_2_fu_652_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(and_ln72_5_fu_646_p2),2));
    zext_ln68_fu_552_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(and_ln72_1_fu_546_p2),2));
    zext_ln72_1_fu_718_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln72_reg_1128),3));
    zext_ln72_2_fu_721_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln72_1_reg_1133),3));
    zext_ln72_fu_702_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(and_ln72_7_fu_696_p2),2));
end behav;
