// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="myFuncAccel4,hls_ip_2019_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z020-clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.974200,HLS_SYN_LAT=1028,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=80,HLS_SYN_FF=8052,HLS_SYN_LUT=13011,HLS_VERSION=2019_1}" *)

module myFuncAccel4 (
        ap_clk,
        ap_rst_n,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        size,
        dim,
        threshold,
        data0_0,
        data0_1,
        data0_2,
        data0_3,
        data0_4,
        data0_5,
        data0_6,
        data0_7,
        data0_8,
        data0_9,
        data0_10,
        data0_11,
        data0_12,
        data0_13,
        data0_14,
        data0_15,
        data1_V_TDATA,
        data1_V_TVALID,
        data1_V_TREADY,
        data_out_V_TDATA,
        data_out_V_TVALID,
        data_out_V_TREADY
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_pp0_stage0 = 3'd2;
parameter    ap_ST_fsm_state30 = 3'd4;

input   ap_clk;
input   ap_rst_n;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] size;
input  [31:0] dim;
input  [31:0] threshold;
input  [31:0] data0_0;
input  [31:0] data0_1;
input  [31:0] data0_2;
input  [31:0] data0_3;
input  [31:0] data0_4;
input  [31:0] data0_5;
input  [31:0] data0_6;
input  [31:0] data0_7;
input  [31:0] data0_8;
input  [31:0] data0_9;
input  [31:0] data0_10;
input  [31:0] data0_11;
input  [31:0] data0_12;
input  [31:0] data0_13;
input  [31:0] data0_14;
input  [31:0] data0_15;
input  [127:0] data1_V_TDATA;
input   data1_V_TVALID;
output   data1_V_TREADY;
output  [127:0] data_out_V_TDATA;
output   data_out_V_TVALID;
input   data_out_V_TREADY;

reg ap_done;
reg ap_idle;
reg ap_ready;

 reg    ap_rst_n_inv;
(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [127:0] data1_V_0_data_out;
wire    data1_V_0_vld_in;
wire    data1_V_0_vld_out;
wire    data1_V_0_ack_in;
reg    data1_V_0_ack_out;
reg   [127:0] data1_V_0_payload_A;
reg   [127:0] data1_V_0_payload_B;
reg    data1_V_0_sel_rd;
reg    data1_V_0_sel_wr;
wire    data1_V_0_sel;
wire    data1_V_0_load_A;
wire    data1_V_0_load_B;
reg   [1:0] data1_V_0_state;
wire    data1_V_0_state_cmp_full;
reg   [127:0] data_out_V_1_data_out;
reg    data_out_V_1_vld_in;
wire    data_out_V_1_vld_out;
wire    data_out_V_1_ack_in;
wire    data_out_V_1_ack_out;
reg   [127:0] data_out_V_1_payload_A;
reg   [127:0] data_out_V_1_payload_B;
reg    data_out_V_1_sel_rd;
reg    data_out_V_1_sel_wr;
wire    data_out_V_1_sel;
wire    data_out_V_1_load_A;
wire    data_out_V_1_load_B;
reg   [1:0] data_out_V_1_state;
wire    data_out_V_1_state_cmp_full;
reg    data1_V_TDATA_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_pp0_stage0;
wire   [0:0] icmp_ln45_fu_412_p2;
reg    data_out_V_TDATA_blk_n;
reg    ap_enable_reg_pp0_iter26;
reg   [0:0] icmp_ln45_reg_880;
reg   [0:0] icmp_ln45_reg_880_pp0_iter25_reg;
reg    ap_enable_reg_pp0_iter27;
reg   [0:0] icmp_ln45_reg_880_pp0_iter26_reg;
reg   [31:0] i_1_reg_239;
wire   [31:0] bitcast_ln72_1_fu_398_p1;
wire   [0:0] icmp_ln72_3_fu_406_p2;
reg    ap_block_state2_pp0_stage0_iter0;
wire    ap_block_state3_pp0_stage0_iter1;
wire    ap_block_state4_pp0_stage0_iter2;
wire    ap_block_state5_pp0_stage0_iter3;
wire    ap_block_state6_pp0_stage0_iter4;
wire    ap_block_state7_pp0_stage0_iter5;
wire    ap_block_state8_pp0_stage0_iter6;
wire    ap_block_state9_pp0_stage0_iter7;
wire    ap_block_state10_pp0_stage0_iter8;
wire    ap_block_state11_pp0_stage0_iter9;
wire    ap_block_state12_pp0_stage0_iter10;
wire    ap_block_state13_pp0_stage0_iter11;
wire    ap_block_state14_pp0_stage0_iter12;
wire    ap_block_state15_pp0_stage0_iter13;
wire    ap_block_state16_pp0_stage0_iter14;
wire    ap_block_state17_pp0_stage0_iter15;
wire    ap_block_state18_pp0_stage0_iter16;
wire    ap_block_state19_pp0_stage0_iter17;
wire    ap_block_state20_pp0_stage0_iter18;
wire    ap_block_state21_pp0_stage0_iter19;
wire    ap_block_state22_pp0_stage0_iter20;
wire    ap_block_state23_pp0_stage0_iter21;
wire    ap_block_state24_pp0_stage0_iter22;
wire    ap_block_state25_pp0_stage0_iter23;
wire    ap_block_state26_pp0_stage0_iter24;
wire    ap_block_state27_pp0_stage0_iter25;
wire    ap_block_state28_pp0_stage0_iter26;
reg    ap_block_state28_io;
wire    ap_block_state29_pp0_stage0_iter27;
reg    ap_block_state29_io;
reg    ap_block_pp0_stage0_11001;
reg   [0:0] icmp_ln45_reg_880_pp0_iter1_reg;
reg   [0:0] icmp_ln45_reg_880_pp0_iter2_reg;
reg   [0:0] icmp_ln45_reg_880_pp0_iter3_reg;
reg   [0:0] icmp_ln45_reg_880_pp0_iter4_reg;
reg   [0:0] icmp_ln45_reg_880_pp0_iter5_reg;
reg   [0:0] icmp_ln45_reg_880_pp0_iter6_reg;
reg   [0:0] icmp_ln45_reg_880_pp0_iter7_reg;
reg   [0:0] icmp_ln45_reg_880_pp0_iter8_reg;
reg   [0:0] icmp_ln45_reg_880_pp0_iter9_reg;
reg   [0:0] icmp_ln45_reg_880_pp0_iter10_reg;
reg   [0:0] icmp_ln45_reg_880_pp0_iter11_reg;
reg   [0:0] icmp_ln45_reg_880_pp0_iter12_reg;
reg   [0:0] icmp_ln45_reg_880_pp0_iter13_reg;
reg   [0:0] icmp_ln45_reg_880_pp0_iter14_reg;
reg   [0:0] icmp_ln45_reg_880_pp0_iter15_reg;
reg   [0:0] icmp_ln45_reg_880_pp0_iter16_reg;
reg   [0:0] icmp_ln45_reg_880_pp0_iter17_reg;
reg   [0:0] icmp_ln45_reg_880_pp0_iter18_reg;
reg   [0:0] icmp_ln45_reg_880_pp0_iter19_reg;
reg   [0:0] icmp_ln45_reg_880_pp0_iter20_reg;
reg   [0:0] icmp_ln45_reg_880_pp0_iter21_reg;
reg   [0:0] icmp_ln45_reg_880_pp0_iter22_reg;
reg   [0:0] icmp_ln45_reg_880_pp0_iter23_reg;
reg   [0:0] icmp_ln45_reg_880_pp0_iter24_reg;
wire   [31:0] i_fu_417_p2;
wire   [31:0] bitcast_ln56_fu_427_p1;
reg   [31:0] p_Result_1_reg_897;
reg   [31:0] p_Result_1_reg_897_pp0_iter1_reg;
reg   [31:0] p_Result_1_reg_897_pp0_iter2_reg;
reg   [31:0] p_Result_1_reg_897_pp0_iter3_reg;
reg   [31:0] p_Result_1_reg_897_pp0_iter4_reg;
reg   [31:0] p_Result_s_reg_902;
reg   [31:0] p_Result_s_reg_902_pp0_iter1_reg;
reg   [31:0] p_Result_s_reg_902_pp0_iter2_reg;
reg   [31:0] p_Result_s_reg_902_pp0_iter3_reg;
reg   [31:0] p_Result_s_reg_902_pp0_iter4_reg;
reg   [31:0] p_Result_s_reg_902_pp0_iter5_reg;
reg   [31:0] p_Result_s_reg_902_pp0_iter6_reg;
reg   [31:0] p_Result_s_reg_902_pp0_iter7_reg;
reg   [31:0] p_Result_s_reg_902_pp0_iter8_reg;
reg   [31:0] p_Result_s_reg_902_pp0_iter9_reg;
reg   [31:0] p_Result_3_reg_907;
reg   [31:0] p_Result_3_reg_907_pp0_iter1_reg;
reg   [31:0] p_Result_3_reg_907_pp0_iter2_reg;
reg   [31:0] p_Result_3_reg_907_pp0_iter3_reg;
reg   [31:0] p_Result_3_reg_907_pp0_iter4_reg;
reg   [31:0] p_Result_3_reg_907_pp0_iter5_reg;
reg   [31:0] p_Result_3_reg_907_pp0_iter6_reg;
reg   [31:0] p_Result_3_reg_907_pp0_iter7_reg;
reg   [31:0] p_Result_3_reg_907_pp0_iter8_reg;
reg   [31:0] p_Result_3_reg_907_pp0_iter9_reg;
reg   [31:0] p_Result_3_reg_907_pp0_iter10_reg;
reg   [31:0] p_Result_3_reg_907_pp0_iter11_reg;
reg   [31:0] p_Result_3_reg_907_pp0_iter12_reg;
reg   [31:0] p_Result_3_reg_907_pp0_iter13_reg;
reg   [31:0] p_Result_3_reg_907_pp0_iter14_reg;
wire   [0:0] or_ln72_1_fu_480_p2;
wire   [31:0] grp_fu_318_p2;
reg   [31:0] tmp_2_reg_920;
wire   [31:0] grp_fu_322_p2;
reg   [31:0] tmp_2_1_reg_925;
wire   [31:0] grp_fu_326_p2;
reg   [31:0] tmp_2_2_reg_930;
wire   [31:0] grp_fu_330_p2;
reg   [31:0] tmp_2_3_reg_935;
wire   [31:0] bitcast_ln56_1_fu_485_p1;
wire   [31:0] grp_fu_250_p2;
reg   [31:0] tmp_3_reg_948;
wire   [31:0] grp_fu_334_p2;
reg   [31:0] tmp_2_0_1_reg_953;
wire   [31:0] grp_fu_255_p2;
reg   [31:0] tmp_3_1_reg_958;
wire   [31:0] grp_fu_338_p2;
reg   [31:0] tmp_2_1_1_reg_963;
wire   [31:0] grp_fu_260_p2;
reg   [31:0] tmp_3_2_reg_968;
wire   [31:0] grp_fu_342_p2;
reg   [31:0] tmp_2_2_1_reg_973;
wire   [31:0] grp_fu_265_p2;
reg   [31:0] tmp_3_3_reg_978;
wire   [31:0] grp_fu_346_p2;
reg   [31:0] tmp_2_3_1_reg_983;
wire   [31:0] bitcast_ln56_2_fu_492_p1;
wire   [31:0] grp_fu_270_p2;
reg   [31:0] tmp_3_0_1_reg_996;
wire   [31:0] grp_fu_350_p2;
reg   [31:0] tmp_2_0_2_reg_1001;
wire   [31:0] grp_fu_274_p2;
reg   [31:0] tmp_3_1_1_reg_1006;
wire   [31:0] grp_fu_354_p2;
reg   [31:0] tmp_2_1_2_reg_1011;
wire   [31:0] grp_fu_278_p2;
reg   [31:0] tmp_3_2_1_reg_1016;
wire   [31:0] grp_fu_358_p2;
reg   [31:0] tmp_2_2_2_reg_1021;
wire   [31:0] grp_fu_282_p2;
reg   [31:0] tmp_3_3_1_reg_1026;
wire   [31:0] grp_fu_362_p2;
reg   [31:0] tmp_2_3_2_reg_1031;
wire   [31:0] bitcast_ln56_3_fu_499_p1;
wire   [31:0] grp_fu_286_p2;
reg   [31:0] tmp_3_0_2_reg_1044;
wire   [31:0] grp_fu_366_p2;
reg   [31:0] tmp_2_0_3_reg_1049;
wire   [31:0] grp_fu_290_p2;
reg   [31:0] tmp_3_1_2_reg_1054;
wire   [31:0] grp_fu_370_p2;
reg   [31:0] tmp_2_1_3_reg_1059;
wire   [31:0] grp_fu_294_p2;
reg   [31:0] tmp_3_2_2_reg_1064;
wire   [31:0] grp_fu_374_p2;
reg   [31:0] tmp_2_2_3_reg_1069;
wire   [31:0] grp_fu_298_p2;
reg   [31:0] tmp_3_3_2_reg_1074;
wire   [31:0] grp_fu_378_p2;
reg   [31:0] tmp_2_3_3_reg_1079;
wire   [31:0] grp_fu_302_p2;
reg   [31:0] tmp_3_0_3_reg_1084;
reg   [31:0] tmp_3_0_3_reg_1084_pp0_iter24_reg;
wire   [31:0] grp_fu_306_p2;
reg   [31:0] tmp_3_1_3_reg_1090;
reg   [31:0] tmp_3_1_3_reg_1090_pp0_iter24_reg;
wire   [31:0] grp_fu_310_p2;
reg   [31:0] tmp_3_2_3_reg_1096;
reg   [31:0] tmp_3_2_3_reg_1096_pp0_iter24_reg;
wire   [31:0] grp_fu_314_p2;
reg   [31:0] tmp_3_3_3_reg_1102;
reg   [31:0] tmp_3_3_3_reg_1102_pp0_iter24_reg;
wire   [31:0] bitcast_ln72_fu_506_p1;
reg   [31:0] bitcast_ln72_reg_1108;
wire   [31:0] bitcast_ln72_2_fu_556_p1;
reg   [31:0] bitcast_ln72_2_reg_1113;
wire   [31:0] bitcast_ln72_3_fu_606_p1;
reg   [31:0] bitcast_ln72_3_reg_1118;
wire   [31:0] bitcast_ln72_4_fu_656_p1;
reg   [31:0] bitcast_ln72_4_reg_1123;
wire   [1:0] add_ln72_fu_706_p2;
reg   [1:0] add_ln72_reg_1128;
wire   [1:0] add_ln72_1_fu_712_p2;
reg   [1:0] add_ln72_1_reg_1133;
wire   [127:0] p_Result_2_3_fu_764_p5;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_enable_reg_pp0_iter7;
reg    ap_enable_reg_pp0_iter8;
reg    ap_enable_reg_pp0_iter9;
reg    ap_enable_reg_pp0_iter10;
reg    ap_enable_reg_pp0_iter11;
reg    ap_enable_reg_pp0_iter12;
reg    ap_enable_reg_pp0_iter13;
reg    ap_enable_reg_pp0_iter14;
reg    ap_enable_reg_pp0_iter15;
reg    ap_enable_reg_pp0_iter16;
reg    ap_enable_reg_pp0_iter17;
reg    ap_enable_reg_pp0_iter18;
reg    ap_enable_reg_pp0_iter19;
reg    ap_enable_reg_pp0_iter20;
reg    ap_enable_reg_pp0_iter21;
reg    ap_enable_reg_pp0_iter22;
reg    ap_enable_reg_pp0_iter23;
reg    ap_enable_reg_pp0_iter24;
reg    ap_enable_reg_pp0_iter25;
reg    ap_block_pp0_stage0_01001;
wire   [22:0] trunc_ln72_fu_402_p1;
wire   [31:0] trunc_ln681_fu_423_p1;
wire   [7:0] tmp_4_fu_465_p4;
wire   [0:0] icmp_ln72_2_fu_474_p2;
wire   [7:0] tmp_1_fu_509_p4;
wire   [22:0] trunc_ln72_1_fu_519_p1;
wire   [0:0] icmp_ln72_1_fu_529_p2;
wire   [0:0] icmp_ln72_fu_523_p2;
wire   [0:0] or_ln72_fu_535_p2;
wire   [0:0] and_ln72_fu_541_p2;
wire   [0:0] grp_fu_382_p2;
wire   [0:0] and_ln72_1_fu_546_p2;
wire   [7:0] tmp_6_fu_559_p4;
wire   [22:0] trunc_ln72_2_fu_569_p1;
wire   [0:0] icmp_ln72_5_fu_579_p2;
wire   [0:0] icmp_ln72_4_fu_573_p2;
wire   [0:0] or_ln72_2_fu_585_p2;
wire   [0:0] and_ln72_2_fu_591_p2;
wire   [0:0] grp_fu_386_p2;
wire   [0:0] and_ln72_3_fu_596_p2;
wire   [7:0] tmp_9_fu_609_p4;
wire   [22:0] trunc_ln72_3_fu_619_p1;
wire   [0:0] icmp_ln72_7_fu_629_p2;
wire   [0:0] icmp_ln72_6_fu_623_p2;
wire   [0:0] or_ln72_3_fu_635_p2;
wire   [0:0] and_ln72_4_fu_641_p2;
wire   [0:0] grp_fu_390_p2;
wire   [0:0] and_ln72_5_fu_646_p2;
wire   [7:0] tmp_7_fu_659_p4;
wire   [22:0] trunc_ln72_4_fu_669_p1;
wire   [0:0] icmp_ln72_9_fu_679_p2;
wire   [0:0] icmp_ln72_8_fu_673_p2;
wire   [0:0] or_ln72_4_fu_685_p2;
wire   [0:0] and_ln72_6_fu_691_p2;
wire   [0:0] grp_fu_394_p2;
wire   [0:0] and_ln72_7_fu_696_p2;
wire   [1:0] zext_ln68_1_fu_602_p1;
wire   [1:0] zext_ln68_fu_552_p1;
wire   [1:0] zext_ln68_2_fu_652_p1;
wire   [1:0] zext_ln72_fu_702_p1;
wire   [2:0] zext_ln72_2_fu_721_p1;
wire   [2:0] zext_ln72_1_fu_718_p1;
wire   [2:0] add_ln72_2_fu_724_p2;
wire   [0:0] icmp_ln78_fu_730_p2;
wire   [31:0] select_ln79_3_fu_757_p3;
wire   [31:0] select_ln79_2_fu_750_p3;
wire   [31:0] select_ln79_1_fu_743_p3;
wire   [31:0] select_ln79_fu_736_p3;
reg    grp_fu_250_ce;
reg    grp_fu_255_ce;
reg    grp_fu_260_ce;
reg    grp_fu_265_ce;
reg    grp_fu_270_ce;
reg    grp_fu_274_ce;
reg    grp_fu_278_ce;
reg    grp_fu_282_ce;
reg    grp_fu_286_ce;
reg    grp_fu_290_ce;
reg    grp_fu_294_ce;
reg    grp_fu_298_ce;
reg    grp_fu_302_ce;
reg    grp_fu_306_ce;
reg    grp_fu_310_ce;
reg    grp_fu_314_ce;
reg    grp_fu_318_ce;
reg    grp_fu_322_ce;
reg    grp_fu_326_ce;
reg    grp_fu_330_ce;
reg    grp_fu_334_ce;
reg    grp_fu_338_ce;
reg    grp_fu_342_ce;
reg    grp_fu_346_ce;
reg    grp_fu_350_ce;
reg    grp_fu_354_ce;
reg    grp_fu_358_ce;
reg    grp_fu_362_ce;
reg    grp_fu_366_ce;
reg    grp_fu_370_ce;
reg    grp_fu_374_ce;
reg    grp_fu_378_ce;
reg    grp_fu_382_ce;
reg    ap_block_pp0_stage0_00001;
reg    grp_fu_386_ce;
reg    grp_fu_390_ce;
reg    grp_fu_394_ce;
wire    ap_CS_fsm_state30;
reg    ap_block_state30;
reg   [2:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 ap_CS_fsm = 3'd1;
#0 data1_V_0_sel_rd = 1'b0;
#0 data1_V_0_sel_wr = 1'b0;
#0 data1_V_0_state = 2'd0;
#0 data_out_V_1_sel_rd = 1'b0;
#0 data_out_V_1_sel_wr = 1'b0;
#0 data_out_V_1_state = 2'd0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter26 = 1'b0;
#0 ap_enable_reg_pp0_iter27 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
#0 ap_enable_reg_pp0_iter8 = 1'b0;
#0 ap_enable_reg_pp0_iter9 = 1'b0;
#0 ap_enable_reg_pp0_iter10 = 1'b0;
#0 ap_enable_reg_pp0_iter11 = 1'b0;
#0 ap_enable_reg_pp0_iter12 = 1'b0;
#0 ap_enable_reg_pp0_iter13 = 1'b0;
#0 ap_enable_reg_pp0_iter14 = 1'b0;
#0 ap_enable_reg_pp0_iter15 = 1'b0;
#0 ap_enable_reg_pp0_iter16 = 1'b0;
#0 ap_enable_reg_pp0_iter17 = 1'b0;
#0 ap_enable_reg_pp0_iter18 = 1'b0;
#0 ap_enable_reg_pp0_iter19 = 1'b0;
#0 ap_enable_reg_pp0_iter20 = 1'b0;
#0 ap_enable_reg_pp0_iter21 = 1'b0;
#0 ap_enable_reg_pp0_iter22 = 1'b0;
#0 ap_enable_reg_pp0_iter23 = 1'b0;
#0 ap_enable_reg_pp0_iter24 = 1'b0;
#0 ap_enable_reg_pp0_iter25 = 1'b0;
end

myFuncAccel4_fadd_32ns_32ns_32_5_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
myFuncAccel4_fadd_32ns_32ns_32_5_full_dsp_1_U1(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(tmp_2_reg_920),
    .din1(32'd0),
    .ce(grp_fu_250_ce),
    .dout(grp_fu_250_p2)
);

myFuncAccel4_fadd_32ns_32ns_32_5_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
myFuncAccel4_fadd_32ns_32ns_32_5_full_dsp_1_U2(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(tmp_2_1_reg_925),
    .din1(32'd0),
    .ce(grp_fu_255_ce),
    .dout(grp_fu_255_p2)
);

myFuncAccel4_fadd_32ns_32ns_32_5_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
myFuncAccel4_fadd_32ns_32ns_32_5_full_dsp_1_U3(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(tmp_2_2_reg_930),
    .din1(32'd0),
    .ce(grp_fu_260_ce),
    .dout(grp_fu_260_p2)
);

myFuncAccel4_fadd_32ns_32ns_32_5_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
myFuncAccel4_fadd_32ns_32ns_32_5_full_dsp_1_U4(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(tmp_2_3_reg_935),
    .din1(32'd0),
    .ce(grp_fu_265_ce),
    .dout(grp_fu_265_p2)
);

myFuncAccel4_fadd_32ns_32ns_32_5_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
myFuncAccel4_fadd_32ns_32ns_32_5_full_dsp_1_U5(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(tmp_3_reg_948),
    .din1(tmp_2_0_1_reg_953),
    .ce(grp_fu_270_ce),
    .dout(grp_fu_270_p2)
);

myFuncAccel4_fadd_32ns_32ns_32_5_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
myFuncAccel4_fadd_32ns_32ns_32_5_full_dsp_1_U6(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(tmp_3_1_reg_958),
    .din1(tmp_2_1_1_reg_963),
    .ce(grp_fu_274_ce),
    .dout(grp_fu_274_p2)
);

myFuncAccel4_fadd_32ns_32ns_32_5_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
myFuncAccel4_fadd_32ns_32ns_32_5_full_dsp_1_U7(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(tmp_3_2_reg_968),
    .din1(tmp_2_2_1_reg_973),
    .ce(grp_fu_278_ce),
    .dout(grp_fu_278_p2)
);

myFuncAccel4_fadd_32ns_32ns_32_5_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
myFuncAccel4_fadd_32ns_32ns_32_5_full_dsp_1_U8(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(tmp_3_3_reg_978),
    .din1(tmp_2_3_1_reg_983),
    .ce(grp_fu_282_ce),
    .dout(grp_fu_282_p2)
);

myFuncAccel4_fadd_32ns_32ns_32_5_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
myFuncAccel4_fadd_32ns_32ns_32_5_full_dsp_1_U9(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(tmp_3_0_1_reg_996),
    .din1(tmp_2_0_2_reg_1001),
    .ce(grp_fu_286_ce),
    .dout(grp_fu_286_p2)
);

myFuncAccel4_fadd_32ns_32ns_32_5_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
myFuncAccel4_fadd_32ns_32ns_32_5_full_dsp_1_U10(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(tmp_3_1_1_reg_1006),
    .din1(tmp_2_1_2_reg_1011),
    .ce(grp_fu_290_ce),
    .dout(grp_fu_290_p2)
);

myFuncAccel4_fadd_32ns_32ns_32_5_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
myFuncAccel4_fadd_32ns_32ns_32_5_full_dsp_1_U11(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(tmp_3_2_1_reg_1016),
    .din1(tmp_2_2_2_reg_1021),
    .ce(grp_fu_294_ce),
    .dout(grp_fu_294_p2)
);

myFuncAccel4_fadd_32ns_32ns_32_5_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
myFuncAccel4_fadd_32ns_32ns_32_5_full_dsp_1_U12(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(tmp_3_3_1_reg_1026),
    .din1(tmp_2_3_2_reg_1031),
    .ce(grp_fu_298_ce),
    .dout(grp_fu_298_p2)
);

myFuncAccel4_fadd_32ns_32ns_32_5_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
myFuncAccel4_fadd_32ns_32ns_32_5_full_dsp_1_U13(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(tmp_3_0_2_reg_1044),
    .din1(tmp_2_0_3_reg_1049),
    .ce(grp_fu_302_ce),
    .dout(grp_fu_302_p2)
);

myFuncAccel4_fadd_32ns_32ns_32_5_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
myFuncAccel4_fadd_32ns_32ns_32_5_full_dsp_1_U14(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(tmp_3_1_2_reg_1054),
    .din1(tmp_2_1_3_reg_1059),
    .ce(grp_fu_306_ce),
    .dout(grp_fu_306_p2)
);

myFuncAccel4_fadd_32ns_32ns_32_5_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
myFuncAccel4_fadd_32ns_32ns_32_5_full_dsp_1_U15(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(tmp_3_2_2_reg_1064),
    .din1(tmp_2_2_3_reg_1069),
    .ce(grp_fu_310_ce),
    .dout(grp_fu_310_p2)
);

myFuncAccel4_fadd_32ns_32ns_32_5_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
myFuncAccel4_fadd_32ns_32ns_32_5_full_dsp_1_U16(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(tmp_3_3_2_reg_1074),
    .din1(tmp_2_3_3_reg_1079),
    .ce(grp_fu_314_ce),
    .dout(grp_fu_314_p2)
);

myFuncAccel4_fmul_32ns_32ns_32_4_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
myFuncAccel4_fmul_32ns_32ns_32_4_max_dsp_1_U17(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(data0_0),
    .din1(bitcast_ln56_fu_427_p1),
    .ce(grp_fu_318_ce),
    .dout(grp_fu_318_p2)
);

myFuncAccel4_fmul_32ns_32ns_32_4_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
myFuncAccel4_fmul_32ns_32ns_32_4_max_dsp_1_U18(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(data0_4),
    .din1(bitcast_ln56_fu_427_p1),
    .ce(grp_fu_322_ce),
    .dout(grp_fu_322_p2)
);

myFuncAccel4_fmul_32ns_32ns_32_4_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
myFuncAccel4_fmul_32ns_32ns_32_4_max_dsp_1_U19(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(data0_8),
    .din1(bitcast_ln56_fu_427_p1),
    .ce(grp_fu_326_ce),
    .dout(grp_fu_326_p2)
);

myFuncAccel4_fmul_32ns_32ns_32_4_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
myFuncAccel4_fmul_32ns_32ns_32_4_max_dsp_1_U20(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(data0_12),
    .din1(bitcast_ln56_fu_427_p1),
    .ce(grp_fu_330_ce),
    .dout(grp_fu_330_p2)
);

myFuncAccel4_fmul_32ns_32ns_32_4_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
myFuncAccel4_fmul_32ns_32ns_32_4_max_dsp_1_U21(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(data0_1),
    .din1(bitcast_ln56_1_fu_485_p1),
    .ce(grp_fu_334_ce),
    .dout(grp_fu_334_p2)
);

myFuncAccel4_fmul_32ns_32ns_32_4_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
myFuncAccel4_fmul_32ns_32ns_32_4_max_dsp_1_U22(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(data0_5),
    .din1(bitcast_ln56_1_fu_485_p1),
    .ce(grp_fu_338_ce),
    .dout(grp_fu_338_p2)
);

myFuncAccel4_fmul_32ns_32ns_32_4_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
myFuncAccel4_fmul_32ns_32ns_32_4_max_dsp_1_U23(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(data0_9),
    .din1(bitcast_ln56_1_fu_485_p1),
    .ce(grp_fu_342_ce),
    .dout(grp_fu_342_p2)
);

myFuncAccel4_fmul_32ns_32ns_32_4_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
myFuncAccel4_fmul_32ns_32ns_32_4_max_dsp_1_U24(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(data0_13),
    .din1(bitcast_ln56_1_fu_485_p1),
    .ce(grp_fu_346_ce),
    .dout(grp_fu_346_p2)
);

myFuncAccel4_fmul_32ns_32ns_32_4_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
myFuncAccel4_fmul_32ns_32ns_32_4_max_dsp_1_U25(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(data0_2),
    .din1(bitcast_ln56_2_fu_492_p1),
    .ce(grp_fu_350_ce),
    .dout(grp_fu_350_p2)
);

myFuncAccel4_fmul_32ns_32ns_32_4_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
myFuncAccel4_fmul_32ns_32ns_32_4_max_dsp_1_U26(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(data0_6),
    .din1(bitcast_ln56_2_fu_492_p1),
    .ce(grp_fu_354_ce),
    .dout(grp_fu_354_p2)
);

myFuncAccel4_fmul_32ns_32ns_32_4_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
myFuncAccel4_fmul_32ns_32ns_32_4_max_dsp_1_U27(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(data0_10),
    .din1(bitcast_ln56_2_fu_492_p1),
    .ce(grp_fu_358_ce),
    .dout(grp_fu_358_p2)
);

myFuncAccel4_fmul_32ns_32ns_32_4_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
myFuncAccel4_fmul_32ns_32ns_32_4_max_dsp_1_U28(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(data0_14),
    .din1(bitcast_ln56_2_fu_492_p1),
    .ce(grp_fu_362_ce),
    .dout(grp_fu_362_p2)
);

myFuncAccel4_fmul_32ns_32ns_32_4_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
myFuncAccel4_fmul_32ns_32ns_32_4_max_dsp_1_U29(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(data0_3),
    .din1(bitcast_ln56_3_fu_499_p1),
    .ce(grp_fu_366_ce),
    .dout(grp_fu_366_p2)
);

myFuncAccel4_fmul_32ns_32ns_32_4_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
myFuncAccel4_fmul_32ns_32ns_32_4_max_dsp_1_U30(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(data0_7),
    .din1(bitcast_ln56_3_fu_499_p1),
    .ce(grp_fu_370_ce),
    .dout(grp_fu_370_p2)
);

myFuncAccel4_fmul_32ns_32ns_32_4_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
myFuncAccel4_fmul_32ns_32ns_32_4_max_dsp_1_U31(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(data0_11),
    .din1(bitcast_ln56_3_fu_499_p1),
    .ce(grp_fu_374_ce),
    .dout(grp_fu_374_p2)
);

myFuncAccel4_fmul_32ns_32ns_32_4_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
myFuncAccel4_fmul_32ns_32ns_32_4_max_dsp_1_U32(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(data0_15),
    .din1(bitcast_ln56_3_fu_499_p1),
    .ce(grp_fu_378_ce),
    .dout(grp_fu_378_p2)
);

myFuncAccel4_fcmp_32ns_32ns_1_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
myFuncAccel4_fcmp_32ns_32ns_1_2_1_U33(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(tmp_3_0_3_reg_1084),
    .din1(threshold),
    .ce(grp_fu_382_ce),
    .opcode(5'd2),
    .dout(grp_fu_382_p2)
);

myFuncAccel4_fcmp_32ns_32ns_1_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
myFuncAccel4_fcmp_32ns_32ns_1_2_1_U34(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(tmp_3_1_3_reg_1090),
    .din1(threshold),
    .ce(grp_fu_386_ce),
    .opcode(5'd2),
    .dout(grp_fu_386_p2)
);

myFuncAccel4_fcmp_32ns_32ns_1_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
myFuncAccel4_fcmp_32ns_32ns_1_2_1_U35(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(tmp_3_2_3_reg_1096),
    .din1(threshold),
    .ce(grp_fu_390_ce),
    .opcode(5'd2),
    .dout(grp_fu_390_p2)
);

myFuncAccel4_fcmp_32ns_32ns_1_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
myFuncAccel4_fcmp_32ns_32ns_1_2_1_U36(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(tmp_3_3_3_reg_1102),
    .din1(threshold),
    .ce(grp_fu_394_ce),
    .opcode(5'd2),
    .dout(grp_fu_394_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state2) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state2)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state2);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter10 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter11 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter12 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter13 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter14 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter14 <= ap_enable_reg_pp0_iter13;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter15 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter15 <= ap_enable_reg_pp0_iter14;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter16 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter16 <= ap_enable_reg_pp0_iter15;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter17 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter17 <= ap_enable_reg_pp0_iter16;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter18 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter18 <= ap_enable_reg_pp0_iter17;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter19 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter19 <= ap_enable_reg_pp0_iter18;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter20 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter20 <= ap_enable_reg_pp0_iter19;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter21 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter21 <= ap_enable_reg_pp0_iter20;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter22 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter22 <= ap_enable_reg_pp0_iter21;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter23 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter23 <= ap_enable_reg_pp0_iter22;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter24 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter24 <= ap_enable_reg_pp0_iter23;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter25 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter25 <= ap_enable_reg_pp0_iter24;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter26 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter26 <= ap_enable_reg_pp0_iter25;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter27 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter27 <= ap_enable_reg_pp0_iter26;
        end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
            ap_enable_reg_pp0_iter27 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter8 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter9 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        data1_V_0_sel_rd <= 1'b0;
    end else begin
        if (((data1_V_0_ack_out == 1'b1) & (data1_V_0_vld_out == 1'b1))) begin
            data1_V_0_sel_rd <= ~data1_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        data1_V_0_sel_wr <= 1'b0;
    end else begin
        if (((data1_V_0_ack_in == 1'b1) & (data1_V_0_vld_in == 1'b1))) begin
            data1_V_0_sel_wr <= ~data1_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        data1_V_0_state <= 2'd0;
    end else begin
        if ((((data1_V_0_state == 2'd2) & (data1_V_0_vld_in == 1'b0)) | ((data1_V_0_state == 2'd3) & (data1_V_0_vld_in == 1'b0) & (data1_V_0_ack_out == 1'b1)))) begin
            data1_V_0_state <= 2'd2;
        end else if ((((data1_V_0_state == 2'd1) & (data1_V_0_ack_out == 1'b0)) | ((data1_V_0_state == 2'd3) & (data1_V_0_ack_out == 1'b0) & (data1_V_0_vld_in == 1'b1)))) begin
            data1_V_0_state <= 2'd1;
        end else if (((~((data1_V_0_vld_in == 1'b0) & (data1_V_0_ack_out == 1'b1)) & ~((data1_V_0_ack_out == 1'b0) & (data1_V_0_vld_in == 1'b1)) & (data1_V_0_state == 2'd3)) | ((data1_V_0_state == 2'd1) & (data1_V_0_ack_out == 1'b1)) | ((data1_V_0_state == 2'd2) & (data1_V_0_vld_in == 1'b1)))) begin
            data1_V_0_state <= 2'd3;
        end else begin
            data1_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        data_out_V_1_sel_rd <= 1'b0;
    end else begin
        if (((data_out_V_1_ack_out == 1'b1) & (data_out_V_1_vld_out == 1'b1))) begin
            data_out_V_1_sel_rd <= ~data_out_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        data_out_V_1_sel_wr <= 1'b0;
    end else begin
        if (((data_out_V_1_ack_in == 1'b1) & (data_out_V_1_vld_in == 1'b1))) begin
            data_out_V_1_sel_wr <= ~data_out_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        data_out_V_1_state <= 2'd0;
    end else begin
        if ((((data_out_V_1_state == 2'd2) & (data_out_V_1_vld_in == 1'b0)) | ((data_out_V_1_state == 2'd3) & (data_out_V_1_vld_in == 1'b0) & (data_out_V_1_ack_out == 1'b1)))) begin
            data_out_V_1_state <= 2'd2;
        end else if ((((data_out_V_1_state == 2'd1) & (data_out_V_TREADY == 1'b0)) | ((data_out_V_1_state == 2'd3) & (data_out_V_TREADY == 1'b0) & (data_out_V_1_vld_in == 1'b1)))) begin
            data_out_V_1_state <= 2'd1;
        end else if (((~((data_out_V_1_vld_in == 1'b0) & (data_out_V_1_ack_out == 1'b1)) & ~((data_out_V_TREADY == 1'b0) & (data_out_V_1_vld_in == 1'b1)) & (data_out_V_1_state == 2'd3)) | ((data_out_V_1_state == 2'd1) & (data_out_V_1_ack_out == 1'b1)) | ((data_out_V_1_state == 2'd2) & (data_out_V_1_vld_in == 1'b1)))) begin
            data_out_V_1_state <= 2'd3;
        end else begin
            data_out_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_1_reg_239 <= 32'd0;
    end else if (((icmp_ln45_fu_412_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        i_1_reg_239 <= i_fu_417_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln45_reg_880_pp0_iter24_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        add_ln72_1_reg_1133 <= add_ln72_1_fu_712_p2;
        add_ln72_reg_1128 <= add_ln72_fu_706_p2;
        bitcast_ln72_2_reg_1113 <= bitcast_ln72_2_fu_556_p1;
        bitcast_ln72_3_reg_1118 <= bitcast_ln72_3_fu_606_p1;
        bitcast_ln72_4_reg_1123 <= bitcast_ln72_4_fu_656_p1;
        bitcast_ln72_reg_1108 <= bitcast_ln72_fu_506_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((data1_V_0_load_A == 1'b1)) begin
        data1_V_0_payload_A <= data1_V_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((data1_V_0_load_B == 1'b1)) begin
        data1_V_0_payload_B <= data1_V_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((data_out_V_1_load_A == 1'b1)) begin
        data_out_V_1_payload_A <= p_Result_2_3_fu_764_p5;
    end
end

always @ (posedge ap_clk) begin
    if ((data_out_V_1_load_B == 1'b1)) begin
        data_out_V_1_payload_B <= p_Result_2_3_fu_764_p5;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln45_reg_880 <= icmp_ln45_fu_412_p2;
        icmp_ln45_reg_880_pp0_iter1_reg <= icmp_ln45_reg_880;
        p_Result_1_reg_897_pp0_iter1_reg <= p_Result_1_reg_897;
        p_Result_3_reg_907_pp0_iter1_reg <= p_Result_3_reg_907;
        p_Result_s_reg_902_pp0_iter1_reg <= p_Result_s_reg_902;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        icmp_ln45_reg_880_pp0_iter10_reg <= icmp_ln45_reg_880_pp0_iter9_reg;
        icmp_ln45_reg_880_pp0_iter11_reg <= icmp_ln45_reg_880_pp0_iter10_reg;
        icmp_ln45_reg_880_pp0_iter12_reg <= icmp_ln45_reg_880_pp0_iter11_reg;
        icmp_ln45_reg_880_pp0_iter13_reg <= icmp_ln45_reg_880_pp0_iter12_reg;
        icmp_ln45_reg_880_pp0_iter14_reg <= icmp_ln45_reg_880_pp0_iter13_reg;
        icmp_ln45_reg_880_pp0_iter15_reg <= icmp_ln45_reg_880_pp0_iter14_reg;
        icmp_ln45_reg_880_pp0_iter16_reg <= icmp_ln45_reg_880_pp0_iter15_reg;
        icmp_ln45_reg_880_pp0_iter17_reg <= icmp_ln45_reg_880_pp0_iter16_reg;
        icmp_ln45_reg_880_pp0_iter18_reg <= icmp_ln45_reg_880_pp0_iter17_reg;
        icmp_ln45_reg_880_pp0_iter19_reg <= icmp_ln45_reg_880_pp0_iter18_reg;
        icmp_ln45_reg_880_pp0_iter20_reg <= icmp_ln45_reg_880_pp0_iter19_reg;
        icmp_ln45_reg_880_pp0_iter21_reg <= icmp_ln45_reg_880_pp0_iter20_reg;
        icmp_ln45_reg_880_pp0_iter22_reg <= icmp_ln45_reg_880_pp0_iter21_reg;
        icmp_ln45_reg_880_pp0_iter23_reg <= icmp_ln45_reg_880_pp0_iter22_reg;
        icmp_ln45_reg_880_pp0_iter24_reg <= icmp_ln45_reg_880_pp0_iter23_reg;
        icmp_ln45_reg_880_pp0_iter25_reg <= icmp_ln45_reg_880_pp0_iter24_reg;
        icmp_ln45_reg_880_pp0_iter26_reg <= icmp_ln45_reg_880_pp0_iter25_reg;
        icmp_ln45_reg_880_pp0_iter2_reg <= icmp_ln45_reg_880_pp0_iter1_reg;
        icmp_ln45_reg_880_pp0_iter3_reg <= icmp_ln45_reg_880_pp0_iter2_reg;
        icmp_ln45_reg_880_pp0_iter4_reg <= icmp_ln45_reg_880_pp0_iter3_reg;
        icmp_ln45_reg_880_pp0_iter5_reg <= icmp_ln45_reg_880_pp0_iter4_reg;
        icmp_ln45_reg_880_pp0_iter6_reg <= icmp_ln45_reg_880_pp0_iter5_reg;
        icmp_ln45_reg_880_pp0_iter7_reg <= icmp_ln45_reg_880_pp0_iter6_reg;
        icmp_ln45_reg_880_pp0_iter8_reg <= icmp_ln45_reg_880_pp0_iter7_reg;
        icmp_ln45_reg_880_pp0_iter9_reg <= icmp_ln45_reg_880_pp0_iter8_reg;
        p_Result_1_reg_897_pp0_iter2_reg <= p_Result_1_reg_897_pp0_iter1_reg;
        p_Result_1_reg_897_pp0_iter3_reg <= p_Result_1_reg_897_pp0_iter2_reg;
        p_Result_1_reg_897_pp0_iter4_reg <= p_Result_1_reg_897_pp0_iter3_reg;
        p_Result_3_reg_907_pp0_iter10_reg <= p_Result_3_reg_907_pp0_iter9_reg;
        p_Result_3_reg_907_pp0_iter11_reg <= p_Result_3_reg_907_pp0_iter10_reg;
        p_Result_3_reg_907_pp0_iter12_reg <= p_Result_3_reg_907_pp0_iter11_reg;
        p_Result_3_reg_907_pp0_iter13_reg <= p_Result_3_reg_907_pp0_iter12_reg;
        p_Result_3_reg_907_pp0_iter14_reg <= p_Result_3_reg_907_pp0_iter13_reg;
        p_Result_3_reg_907_pp0_iter2_reg <= p_Result_3_reg_907_pp0_iter1_reg;
        p_Result_3_reg_907_pp0_iter3_reg <= p_Result_3_reg_907_pp0_iter2_reg;
        p_Result_3_reg_907_pp0_iter4_reg <= p_Result_3_reg_907_pp0_iter3_reg;
        p_Result_3_reg_907_pp0_iter5_reg <= p_Result_3_reg_907_pp0_iter4_reg;
        p_Result_3_reg_907_pp0_iter6_reg <= p_Result_3_reg_907_pp0_iter5_reg;
        p_Result_3_reg_907_pp0_iter7_reg <= p_Result_3_reg_907_pp0_iter6_reg;
        p_Result_3_reg_907_pp0_iter8_reg <= p_Result_3_reg_907_pp0_iter7_reg;
        p_Result_3_reg_907_pp0_iter9_reg <= p_Result_3_reg_907_pp0_iter8_reg;
        p_Result_s_reg_902_pp0_iter2_reg <= p_Result_s_reg_902_pp0_iter1_reg;
        p_Result_s_reg_902_pp0_iter3_reg <= p_Result_s_reg_902_pp0_iter2_reg;
        p_Result_s_reg_902_pp0_iter4_reg <= p_Result_s_reg_902_pp0_iter3_reg;
        p_Result_s_reg_902_pp0_iter5_reg <= p_Result_s_reg_902_pp0_iter4_reg;
        p_Result_s_reg_902_pp0_iter6_reg <= p_Result_s_reg_902_pp0_iter5_reg;
        p_Result_s_reg_902_pp0_iter7_reg <= p_Result_s_reg_902_pp0_iter6_reg;
        p_Result_s_reg_902_pp0_iter8_reg <= p_Result_s_reg_902_pp0_iter7_reg;
        p_Result_s_reg_902_pp0_iter9_reg <= p_Result_s_reg_902_pp0_iter8_reg;
        tmp_3_0_3_reg_1084_pp0_iter24_reg <= tmp_3_0_3_reg_1084;
        tmp_3_1_3_reg_1090_pp0_iter24_reg <= tmp_3_1_3_reg_1090;
        tmp_3_2_3_reg_1096_pp0_iter24_reg <= tmp_3_2_3_reg_1096;
        tmp_3_3_3_reg_1102_pp0_iter24_reg <= tmp_3_3_3_reg_1102;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln45_fu_412_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        p_Result_1_reg_897 <= {{data1_V_0_data_out[63:32]}};
        p_Result_3_reg_907 <= {{data1_V_0_data_out[127:96]}};
        p_Result_s_reg_902 <= {{data1_V_0_data_out[95:64]}};
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln45_reg_880_pp0_iter7_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tmp_2_0_1_reg_953 <= grp_fu_334_p2;
        tmp_2_1_1_reg_963 <= grp_fu_338_p2;
        tmp_2_2_1_reg_973 <= grp_fu_342_p2;
        tmp_2_3_1_reg_983 <= grp_fu_346_p2;
        tmp_3_1_reg_958 <= grp_fu_255_p2;
        tmp_3_2_reg_968 <= grp_fu_260_p2;
        tmp_3_3_reg_978 <= grp_fu_265_p2;
        tmp_3_reg_948 <= grp_fu_250_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln45_reg_880_pp0_iter12_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tmp_2_0_2_reg_1001 <= grp_fu_350_p2;
        tmp_2_1_2_reg_1011 <= grp_fu_354_p2;
        tmp_2_2_2_reg_1021 <= grp_fu_358_p2;
        tmp_2_3_2_reg_1031 <= grp_fu_362_p2;
        tmp_3_0_1_reg_996 <= grp_fu_270_p2;
        tmp_3_1_1_reg_1006 <= grp_fu_274_p2;
        tmp_3_2_1_reg_1016 <= grp_fu_278_p2;
        tmp_3_3_1_reg_1026 <= grp_fu_282_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln45_reg_880_pp0_iter17_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tmp_2_0_3_reg_1049 <= grp_fu_366_p2;
        tmp_2_1_3_reg_1059 <= grp_fu_370_p2;
        tmp_2_2_3_reg_1069 <= grp_fu_374_p2;
        tmp_2_3_3_reg_1079 <= grp_fu_378_p2;
        tmp_3_0_2_reg_1044 <= grp_fu_286_p2;
        tmp_3_1_2_reg_1054 <= grp_fu_290_p2;
        tmp_3_2_2_reg_1064 <= grp_fu_294_p2;
        tmp_3_3_2_reg_1074 <= grp_fu_298_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln45_reg_880_pp0_iter2_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tmp_2_1_reg_925 <= grp_fu_322_p2;
        tmp_2_2_reg_930 <= grp_fu_326_p2;
        tmp_2_3_reg_935 <= grp_fu_330_p2;
        tmp_2_reg_920 <= grp_fu_318_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln45_reg_880_pp0_iter22_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tmp_3_0_3_reg_1084 <= grp_fu_302_p2;
        tmp_3_1_3_reg_1090 <= grp_fu_306_p2;
        tmp_3_2_3_reg_1096 <= grp_fu_310_p2;
        tmp_3_3_3_reg_1102 <= grp_fu_314_p2;
    end
end

always @ (*) begin
    if ((icmp_ln45_fu_412_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if ((~((data_out_V_1_state == 2'd1) | ((data_out_V_1_state == 2'd3) & (data_out_V_TREADY == 1'b0))) & (1'b1 == ap_CS_fsm_state30))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter25 == 1'b0) & (ap_enable_reg_pp0_iter24 == 1'b0) & (ap_enable_reg_pp0_iter23 == 1'b0) & (ap_enable_reg_pp0_iter22 == 1'b0) & (ap_enable_reg_pp0_iter21 == 1'b0) & (ap_enable_reg_pp0_iter20 == 1'b0) & (ap_enable_reg_pp0_iter19 == 1'b0) & (ap_enable_reg_pp0_iter18 == 1'b0) & (ap_enable_reg_pp0_iter17 == 1'b0) & (ap_enable_reg_pp0_iter16 == 1'b0) & (ap_enable_reg_pp0_iter15 == 1'b0) & (ap_enable_reg_pp0_iter14 == 1'b0) & (ap_enable_reg_pp0_iter13 == 1'b0) & (ap_enable_reg_pp0_iter12 == 1'b0) & (ap_enable_reg_pp0_iter11 == 1'b0) & (ap_enable_reg_pp0_iter10 == 1'b0) & (ap_enable_reg_pp0_iter9 == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter27 == 1'b0) & (ap_enable_reg_pp0_iter26 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((data_out_V_1_state == 2'd1) | ((data_out_V_1_state == 2'd3) & (data_out_V_TREADY == 1'b0))) & (1'b1 == ap_CS_fsm_state30))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln45_fu_412_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data1_V_0_ack_out = 1'b1;
    end else begin
        data1_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((data1_V_0_sel == 1'b1)) begin
        data1_V_0_data_out = data1_V_0_payload_B;
    end else begin
        data1_V_0_data_out = data1_V_0_payload_A;
    end
end

always @ (*) begin
    if (((icmp_ln45_fu_412_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        data1_V_TDATA_blk_n = data1_V_0_state[1'd0];
    end else begin
        data1_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((data_out_V_1_sel == 1'b1)) begin
        data_out_V_1_data_out = data_out_V_1_payload_B;
    end else begin
        data_out_V_1_data_out = data_out_V_1_payload_A;
    end
end

always @ (*) begin
    if (((icmp_ln45_reg_880_pp0_iter25_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter26 == 1'b1))) begin
        data_out_V_1_vld_in = 1'b1;
    end else begin
        data_out_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((((icmp_ln45_reg_880_pp0_iter26_reg == 1'd0) & (ap_enable_reg_pp0_iter27 == 1'b1) & (1'b0 == ap_block_pp0_stage0)) | ((icmp_ln45_reg_880_pp0_iter25_reg == 1'd0) & (ap_enable_reg_pp0_iter26 == 1'b1) & (1'b0 == ap_block_pp0_stage0)))) begin
        data_out_V_TDATA_blk_n = data_out_V_1_state[1'd1];
    end else begin
        data_out_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_250_ce = 1'b1;
    end else begin
        grp_fu_250_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_255_ce = 1'b1;
    end else begin
        grp_fu_255_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_260_ce = 1'b1;
    end else begin
        grp_fu_260_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_265_ce = 1'b1;
    end else begin
        grp_fu_265_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_270_ce = 1'b1;
    end else begin
        grp_fu_270_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_274_ce = 1'b1;
    end else begin
        grp_fu_274_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_278_ce = 1'b1;
    end else begin
        grp_fu_278_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_282_ce = 1'b1;
    end else begin
        grp_fu_282_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_286_ce = 1'b1;
    end else begin
        grp_fu_286_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_290_ce = 1'b1;
    end else begin
        grp_fu_290_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_294_ce = 1'b1;
    end else begin
        grp_fu_294_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_298_ce = 1'b1;
    end else begin
        grp_fu_298_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_302_ce = 1'b1;
    end else begin
        grp_fu_302_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_306_ce = 1'b1;
    end else begin
        grp_fu_306_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_310_ce = 1'b1;
    end else begin
        grp_fu_310_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_314_ce = 1'b1;
    end else begin
        grp_fu_314_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_318_ce = 1'b1;
    end else begin
        grp_fu_318_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_322_ce = 1'b1;
    end else begin
        grp_fu_322_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_326_ce = 1'b1;
    end else begin
        grp_fu_326_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_330_ce = 1'b1;
    end else begin
        grp_fu_330_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_334_ce = 1'b1;
    end else begin
        grp_fu_334_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_338_ce = 1'b1;
    end else begin
        grp_fu_338_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_342_ce = 1'b1;
    end else begin
        grp_fu_342_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_346_ce = 1'b1;
    end else begin
        grp_fu_346_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_350_ce = 1'b1;
    end else begin
        grp_fu_350_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_354_ce = 1'b1;
    end else begin
        grp_fu_354_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_358_ce = 1'b1;
    end else begin
        grp_fu_358_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_362_ce = 1'b1;
    end else begin
        grp_fu_362_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_366_ce = 1'b1;
    end else begin
        grp_fu_366_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_370_ce = 1'b1;
    end else begin
        grp_fu_370_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_374_ce = 1'b1;
    end else begin
        grp_fu_374_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_378_ce = 1'b1;
    end else begin
        grp_fu_378_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_382_ce = 1'b1;
    end else begin
        grp_fu_382_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_386_ce = 1'b1;
    end else begin
        grp_fu_386_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_390_ce = 1'b1;
    end else begin
        grp_fu_390_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_394_ce = 1'b1;
    end else begin
        grp_fu_394_ce = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((icmp_ln45_fu_412_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1)) & ~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter27 == 1'b1) & (ap_enable_reg_pp0_iter26 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter27 == 1'b1) & (ap_enable_reg_pp0_iter26 == 1'b0)) | ((icmp_ln45_fu_412_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_state30;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state30 : begin
            if ((~((data_out_V_1_state == 2'd1) | ((data_out_V_1_state == 2'd3) & (data_out_V_TREADY == 1'b0))) & (1'b1 == ap_CS_fsm_state30))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state30;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln72_1_fu_712_p2 = (zext_ln68_2_fu_652_p1 + zext_ln72_fu_702_p1);

assign add_ln72_2_fu_724_p2 = (zext_ln72_2_fu_721_p1 + zext_ln72_1_fu_718_p1);

assign add_ln72_fu_706_p2 = (zext_ln68_1_fu_602_p1 + zext_ln68_fu_552_p1);

assign and_ln72_1_fu_546_p2 = (grp_fu_382_p2 & and_ln72_fu_541_p2);

assign and_ln72_2_fu_591_p2 = (or_ln72_2_fu_585_p2 & or_ln72_1_fu_480_p2);

assign and_ln72_3_fu_596_p2 = (grp_fu_386_p2 & and_ln72_2_fu_591_p2);

assign and_ln72_4_fu_641_p2 = (or_ln72_3_fu_635_p2 & or_ln72_1_fu_480_p2);

assign and_ln72_5_fu_646_p2 = (grp_fu_390_p2 & and_ln72_4_fu_641_p2);

assign and_ln72_6_fu_691_p2 = (or_ln72_4_fu_685_p2 & or_ln72_1_fu_480_p2);

assign and_ln72_7_fu_696_p2 = (grp_fu_394_p2 & and_ln72_6_fu_691_p2);

assign and_ln72_fu_541_p2 = (or_ln72_fu_535_p2 & or_ln72_1_fu_480_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state30 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_00001 = ((icmp_ln45_fu_412_p2 == 1'd0) & (data1_V_0_vld_out == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((icmp_ln45_fu_412_p2 == 1'd0) & (data1_V_0_vld_out == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((1'b1 == ap_block_state29_io) & (ap_enable_reg_pp0_iter27 == 1'b1)) | ((1'b1 == ap_block_state28_io) & (ap_enable_reg_pp0_iter26 == 1'b1)) | ((icmp_ln45_fu_412_p2 == 1'd0) & (data1_V_0_vld_out == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((1'b1 == ap_block_state29_io) & (ap_enable_reg_pp0_iter27 == 1'b1)) | ((1'b1 == ap_block_state28_io) & (ap_enable_reg_pp0_iter26 == 1'b1)) | ((icmp_ln45_fu_412_p2 == 1'd0) & (data1_V_0_vld_out == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1)));
end

assign ap_block_state10_pp0_stage0_iter8 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage0_iter9 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp0_stage0_iter10 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp0_stage0_iter11 = ~(1'b1 == 1'b1);

assign ap_block_state14_pp0_stage0_iter12 = ~(1'b1 == 1'b1);

assign ap_block_state15_pp0_stage0_iter13 = ~(1'b1 == 1'b1);

assign ap_block_state16_pp0_stage0_iter14 = ~(1'b1 == 1'b1);

assign ap_block_state17_pp0_stage0_iter15 = ~(1'b1 == 1'b1);

assign ap_block_state18_pp0_stage0_iter16 = ~(1'b1 == 1'b1);

assign ap_block_state19_pp0_stage0_iter17 = ~(1'b1 == 1'b1);

assign ap_block_state20_pp0_stage0_iter18 = ~(1'b1 == 1'b1);

assign ap_block_state21_pp0_stage0_iter19 = ~(1'b1 == 1'b1);

assign ap_block_state22_pp0_stage0_iter20 = ~(1'b1 == 1'b1);

assign ap_block_state23_pp0_stage0_iter21 = ~(1'b1 == 1'b1);

assign ap_block_state24_pp0_stage0_iter22 = ~(1'b1 == 1'b1);

assign ap_block_state25_pp0_stage0_iter23 = ~(1'b1 == 1'b1);

assign ap_block_state26_pp0_stage0_iter24 = ~(1'b1 == 1'b1);

assign ap_block_state27_pp0_stage0_iter25 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state28_io = ((icmp_ln45_reg_880_pp0_iter25_reg == 1'd0) & (data_out_V_1_ack_in == 1'b0));
end

assign ap_block_state28_pp0_stage0_iter26 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state29_io = ((icmp_ln45_reg_880_pp0_iter26_reg == 1'd0) & (data_out_V_1_ack_in == 1'b0));
end

assign ap_block_state29_pp0_stage0_iter27 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state2_pp0_stage0_iter0 = ((icmp_ln45_fu_412_p2 == 1'd0) & (data1_V_0_vld_out == 1'b0));
end

always @ (*) begin
    ap_block_state30 = ((data_out_V_1_state == 2'd1) | ((data_out_V_1_state == 2'd3) & (data_out_V_TREADY == 1'b0)));
end

assign ap_block_state3_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage0_iter7 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign bitcast_ln56_1_fu_485_p1 = p_Result_1_reg_897_pp0_iter4_reg;

assign bitcast_ln56_2_fu_492_p1 = p_Result_s_reg_902_pp0_iter9_reg;

assign bitcast_ln56_3_fu_499_p1 = p_Result_3_reg_907_pp0_iter14_reg;

assign bitcast_ln56_fu_427_p1 = trunc_ln681_fu_423_p1;

assign bitcast_ln72_1_fu_398_p1 = threshold;

assign bitcast_ln72_2_fu_556_p1 = tmp_3_1_3_reg_1090_pp0_iter24_reg;

assign bitcast_ln72_3_fu_606_p1 = tmp_3_2_3_reg_1096_pp0_iter24_reg;

assign bitcast_ln72_4_fu_656_p1 = tmp_3_3_3_reg_1102_pp0_iter24_reg;

assign bitcast_ln72_fu_506_p1 = tmp_3_0_3_reg_1084_pp0_iter24_reg;

assign data1_V_0_ack_in = data1_V_0_state[1'd1];

assign data1_V_0_load_A = (~data1_V_0_sel_wr & data1_V_0_state_cmp_full);

assign data1_V_0_load_B = (data1_V_0_state_cmp_full & data1_V_0_sel_wr);

assign data1_V_0_sel = data1_V_0_sel_rd;

assign data1_V_0_state_cmp_full = ((data1_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign data1_V_0_vld_in = data1_V_TVALID;

assign data1_V_0_vld_out = data1_V_0_state[1'd0];

assign data1_V_TREADY = data1_V_0_state[1'd1];

assign data_out_V_1_ack_in = data_out_V_1_state[1'd1];

assign data_out_V_1_ack_out = data_out_V_TREADY;

assign data_out_V_1_load_A = (~data_out_V_1_sel_wr & data_out_V_1_state_cmp_full);

assign data_out_V_1_load_B = (data_out_V_1_state_cmp_full & data_out_V_1_sel_wr);

assign data_out_V_1_sel = data_out_V_1_sel_rd;

assign data_out_V_1_state_cmp_full = ((data_out_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign data_out_V_1_vld_out = data_out_V_1_state[1'd0];

assign data_out_V_TDATA = data_out_V_1_data_out;

assign data_out_V_TVALID = data_out_V_1_state[1'd0];

assign i_fu_417_p2 = (i_1_reg_239 + 32'd1);

assign icmp_ln45_fu_412_p2 = ((i_1_reg_239 == size) ? 1'b1 : 1'b0);

assign icmp_ln72_1_fu_529_p2 = ((trunc_ln72_1_fu_519_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln72_2_fu_474_p2 = ((tmp_4_fu_465_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln72_3_fu_406_p2 = ((trunc_ln72_fu_402_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln72_4_fu_573_p2 = ((tmp_6_fu_559_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln72_5_fu_579_p2 = ((trunc_ln72_2_fu_569_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln72_6_fu_623_p2 = ((tmp_9_fu_609_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln72_7_fu_629_p2 = ((trunc_ln72_3_fu_619_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln72_8_fu_673_p2 = ((tmp_7_fu_659_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln72_9_fu_679_p2 = ((trunc_ln72_4_fu_669_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln72_fu_523_p2 = ((tmp_1_fu_509_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln78_fu_730_p2 = ((add_ln72_2_fu_724_p2 == 3'd4) ? 1'b1 : 1'b0);

assign or_ln72_1_fu_480_p2 = (icmp_ln72_3_fu_406_p2 | icmp_ln72_2_fu_474_p2);

assign or_ln72_2_fu_585_p2 = (icmp_ln72_5_fu_579_p2 | icmp_ln72_4_fu_573_p2);

assign or_ln72_3_fu_635_p2 = (icmp_ln72_7_fu_629_p2 | icmp_ln72_6_fu_623_p2);

assign or_ln72_4_fu_685_p2 = (icmp_ln72_9_fu_679_p2 | icmp_ln72_8_fu_673_p2);

assign or_ln72_fu_535_p2 = (icmp_ln72_fu_523_p2 | icmp_ln72_1_fu_529_p2);

assign p_Result_2_3_fu_764_p5 = {{{{select_ln79_3_fu_757_p3}, {select_ln79_2_fu_750_p3}}, {select_ln79_1_fu_743_p3}}, {select_ln79_fu_736_p3}};

assign select_ln79_1_fu_743_p3 = ((icmp_ln78_fu_730_p2[0:0] === 1'b1) ? 32'd0 : bitcast_ln72_2_reg_1113);

assign select_ln79_2_fu_750_p3 = ((icmp_ln78_fu_730_p2[0:0] === 1'b1) ? 32'd0 : bitcast_ln72_3_reg_1118);

assign select_ln79_3_fu_757_p3 = ((icmp_ln78_fu_730_p2[0:0] === 1'b1) ? 32'd0 : bitcast_ln72_4_reg_1123);

assign select_ln79_fu_736_p3 = ((icmp_ln78_fu_730_p2[0:0] === 1'b1) ? 32'd0 : bitcast_ln72_reg_1108);

assign tmp_1_fu_509_p4 = {{bitcast_ln72_fu_506_p1[30:23]}};

assign tmp_4_fu_465_p4 = {{bitcast_ln72_1_fu_398_p1[30:23]}};

assign tmp_6_fu_559_p4 = {{bitcast_ln72_2_fu_556_p1[30:23]}};

assign tmp_7_fu_659_p4 = {{bitcast_ln72_4_fu_656_p1[30:23]}};

assign tmp_9_fu_609_p4 = {{bitcast_ln72_3_fu_606_p1[30:23]}};

assign trunc_ln681_fu_423_p1 = data1_V_0_data_out[31:0];

assign trunc_ln72_1_fu_519_p1 = bitcast_ln72_fu_506_p1[22:0];

assign trunc_ln72_2_fu_569_p1 = bitcast_ln72_2_fu_556_p1[22:0];

assign trunc_ln72_3_fu_619_p1 = bitcast_ln72_3_fu_606_p1[22:0];

assign trunc_ln72_4_fu_669_p1 = bitcast_ln72_4_fu_656_p1[22:0];

assign trunc_ln72_fu_402_p1 = bitcast_ln72_1_fu_398_p1[22:0];

assign zext_ln68_1_fu_602_p1 = and_ln72_3_fu_596_p2;

assign zext_ln68_2_fu_652_p1 = and_ln72_5_fu_646_p2;

assign zext_ln68_fu_552_p1 = and_ln72_1_fu_546_p2;

assign zext_ln72_1_fu_718_p1 = add_ln72_reg_1128;

assign zext_ln72_2_fu_721_p1 = add_ln72_1_reg_1133;

assign zext_ln72_fu_702_p1 = and_ln72_7_fu_696_p2;

endmodule //myFuncAccel4
