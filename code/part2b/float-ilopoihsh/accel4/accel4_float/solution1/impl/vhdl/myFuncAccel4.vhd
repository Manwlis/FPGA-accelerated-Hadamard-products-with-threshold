-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity myFuncAccel4 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    size : IN STD_LOGIC_VECTOR (31 downto 0);
    dim : IN STD_LOGIC_VECTOR (31 downto 0);
    threshold : IN STD_LOGIC_VECTOR (31 downto 0);
    data0_0 : IN STD_LOGIC_VECTOR (31 downto 0);
    data0_1 : IN STD_LOGIC_VECTOR (31 downto 0);
    data0_2 : IN STD_LOGIC_VECTOR (31 downto 0);
    data0_3 : IN STD_LOGIC_VECTOR (31 downto 0);
    data0_4 : IN STD_LOGIC_VECTOR (31 downto 0);
    data0_5 : IN STD_LOGIC_VECTOR (31 downto 0);
    data0_6 : IN STD_LOGIC_VECTOR (31 downto 0);
    data0_7 : IN STD_LOGIC_VECTOR (31 downto 0);
    data0_8 : IN STD_LOGIC_VECTOR (31 downto 0);
    data0_9 : IN STD_LOGIC_VECTOR (31 downto 0);
    data0_10 : IN STD_LOGIC_VECTOR (31 downto 0);
    data0_11 : IN STD_LOGIC_VECTOR (31 downto 0);
    data0_12 : IN STD_LOGIC_VECTOR (31 downto 0);
    data0_13 : IN STD_LOGIC_VECTOR (31 downto 0);
    data0_14 : IN STD_LOGIC_VECTOR (31 downto 0);
    data0_15 : IN STD_LOGIC_VECTOR (31 downto 0);
    my_input1_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    my_input1_TVALID : IN STD_LOGIC;
    my_input1_TREADY : OUT STD_LOGIC;
    my_output_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    my_output_TVALID : OUT STD_LOGIC;
    my_output_TREADY : IN STD_LOGIC );
end;


architecture behav of myFuncAccel4 is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "myFuncAccel4,hls_ip_2019_1,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.974200,HLS_SYN_LAT=431,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=20,HLS_SYN_FF=3761,HLS_SYN_LUT=4461,HLS_VERSION=2019_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (5 downto 0) := "000010";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (5 downto 0) := "000100";
    constant ap_ST_fsm_pp0_stage2 : STD_LOGIC_VECTOR (5 downto 0) := "001000";
    constant ap_ST_fsm_pp0_stage3 : STD_LOGIC_VECTOR (5 downto 0) := "010000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal my_input1_0_data_out : STD_LOGIC_VECTOR (31 downto 0);
    signal my_input1_0_vld_in : STD_LOGIC;
    signal my_input1_0_vld_out : STD_LOGIC;
    signal my_input1_0_ack_in : STD_LOGIC;
    signal my_input1_0_ack_out : STD_LOGIC;
    signal my_input1_0_payload_A : STD_LOGIC_VECTOR (31 downto 0);
    signal my_input1_0_payload_B : STD_LOGIC_VECTOR (31 downto 0);
    signal my_input1_0_sel_rd : STD_LOGIC := '0';
    signal my_input1_0_sel_wr : STD_LOGIC := '0';
    signal my_input1_0_sel : STD_LOGIC;
    signal my_input1_0_load_A : STD_LOGIC;
    signal my_input1_0_load_B : STD_LOGIC;
    signal my_input1_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal my_input1_0_state_cmp_full : STD_LOGIC;
    signal my_output_1_data_in : STD_LOGIC_VECTOR (31 downto 0);
    signal my_output_1_data_out : STD_LOGIC_VECTOR (31 downto 0);
    signal my_output_1_vld_in : STD_LOGIC;
    signal my_output_1_vld_out : STD_LOGIC;
    signal my_output_1_ack_in : STD_LOGIC;
    signal my_output_1_ack_out : STD_LOGIC;
    signal my_output_1_payload_A : STD_LOGIC_VECTOR (31 downto 0);
    signal my_output_1_payload_B : STD_LOGIC_VECTOR (31 downto 0);
    signal my_output_1_sel_rd : STD_LOGIC := '0';
    signal my_output_1_sel_wr : STD_LOGIC := '0';
    signal my_output_1_sel : STD_LOGIC;
    signal my_output_1_load_A : STD_LOGIC;
    signal my_output_1_load_B : STD_LOGIC;
    signal my_output_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal my_output_1_state_cmp_full : STD_LOGIC;
    signal my_input1_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal icmp_ln34_fu_298_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal icmp_ln34_reg_685 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage2 : signal is "none";
    signal ap_block_pp0_stage2 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage3 : signal is "none";
    signal ap_block_pp0_stage3 : BOOLEAN;
    signal my_output_TDATA_blk_n : STD_LOGIC;
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal icmp_ln34_reg_685_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal icmp_ln34_reg_685_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal i_1_reg_229 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln53_1_fu_284_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln53_3_fu_292_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state14_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state18_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state22_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state26_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state30_pp0_stage0_iter7 : BOOLEAN;
    signal ap_block_state34_pp0_stage0_iter8 : BOOLEAN;
    signal ap_block_state34_io : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln34_reg_685_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln34_reg_685_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln34_reg_685_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln34_reg_685_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln34_reg_685_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln34_reg_685_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal i_fu_303_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_reg_689 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln53_1_fu_324_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state3_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_state7_pp0_stage1_iter1 : BOOLEAN;
    signal ap_block_state11_pp0_stage1_iter2 : BOOLEAN;
    signal ap_block_state15_pp0_stage1_iter3 : BOOLEAN;
    signal ap_block_state19_pp0_stage1_iter4 : BOOLEAN;
    signal ap_block_state23_pp0_stage1_iter5 : BOOLEAN;
    signal ap_block_state27_pp0_stage1_iter6 : BOOLEAN;
    signal ap_block_state31_pp0_stage1_iter7 : BOOLEAN;
    signal ap_block_state31_io : BOOLEAN;
    signal ap_block_state35_pp0_stage1_iter8 : BOOLEAN;
    signal ap_block_state35_io : BOOLEAN;
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal ap_block_state4_pp0_stage2_iter0 : BOOLEAN;
    signal ap_block_state8_pp0_stage2_iter1 : BOOLEAN;
    signal ap_block_state12_pp0_stage2_iter2 : BOOLEAN;
    signal ap_block_state16_pp0_stage2_iter3 : BOOLEAN;
    signal ap_block_state20_pp0_stage2_iter4 : BOOLEAN;
    signal ap_block_state24_pp0_stage2_iter5 : BOOLEAN;
    signal ap_block_state28_pp0_stage2_iter6 : BOOLEAN;
    signal ap_block_state32_pp0_stage2_iter7 : BOOLEAN;
    signal ap_block_state32_io : BOOLEAN;
    signal ap_block_pp0_stage2_11001 : BOOLEAN;
    signal ap_block_state5_pp0_stage3_iter0 : BOOLEAN;
    signal ap_block_state9_pp0_stage3_iter1 : BOOLEAN;
    signal ap_block_state13_pp0_stage3_iter2 : BOOLEAN;
    signal ap_block_state17_pp0_stage3_iter3 : BOOLEAN;
    signal ap_block_state21_pp0_stage3_iter4 : BOOLEAN;
    signal ap_block_state25_pp0_stage3_iter5 : BOOLEAN;
    signal ap_block_state29_pp0_stage3_iter6 : BOOLEAN;
    signal ap_block_state33_pp0_stage3_iter7 : BOOLEAN;
    signal ap_block_state33_io : BOOLEAN;
    signal ap_block_pp0_stage3_11001 : BOOLEAN;
    signal grp_fu_260_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_reg_734 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_265_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_1_reg_739 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_270_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_2_reg_744 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_275_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_3_reg_749 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_0_1_reg_754 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal tmp_2_0_1_reg_754_pp0_iter2_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_1_1_reg_759 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_1_1_reg_759_pp0_iter2_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_2_1_reg_764 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_2_1_reg_764_pp0_iter2_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_3_1_reg_769 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_3_1_reg_769_pp0_iter2_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_0_2_reg_774 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_0_2_reg_774_pp0_iter2_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_0_2_reg_774_pp0_iter3_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_1_2_reg_779 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_1_2_reg_779_pp0_iter2_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_1_2_reg_779_pp0_iter3_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_2_2_reg_784 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_2_2_reg_784_pp0_iter2_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_2_2_reg_784_pp0_iter3_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_3_2_reg_789 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_3_2_reg_789_pp0_iter2_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_3_2_reg_789_pp0_iter3_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_0_3_reg_794 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_0_3_reg_794_pp0_iter2_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_0_3_reg_794_pp0_iter3_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_0_3_reg_794_pp0_iter4_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_1_3_reg_799 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_1_3_reg_799_pp0_iter2_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_1_3_reg_799_pp0_iter3_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_1_3_reg_799_pp0_iter4_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_2_3_reg_804 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_2_3_reg_804_pp0_iter2_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_2_3_reg_804_pp0_iter3_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_2_3_reg_804_pp0_iter4_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_3_3_reg_809 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_3_3_reg_809_pp0_iter2_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_3_3_reg_809_pp0_iter3_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_3_3_reg_809_pp0_iter4_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_240_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_3_reg_814 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal grp_fu_245_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_3_1_reg_819 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_250_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_3_2_reg_824 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_255_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_3_3_reg_829 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_3_0_1_reg_834 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal tmp_3_1_1_reg_839 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_3_2_1_reg_844 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_3_3_1_reg_849 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_3_0_2_reg_854 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal tmp_3_1_2_reg_859 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_3_2_2_reg_864 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_3_3_2_reg_869 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_3_0_3_reg_874 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal tmp_3_0_3_reg_874_pp0_iter6_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_3_1_3_reg_881 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_3_1_3_reg_881_pp0_iter6_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_3_2_3_reg_888 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_3_2_3_reg_888_pp0_iter6_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_3_3_3_reg_895 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_3_3_3_reg_895_pp0_iter6_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_280_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_5_reg_902 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal tmp_8_reg_907 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_s_reg_912 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln53_fu_526_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln53_reg_917 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln53_1_fu_532_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln53_1_reg_922 : STD_LOGIC_VECTOR (1 downto 0);
    signal p_tmp_3_0_3_fu_556_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_tmp_3_1_3_fu_564_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_tmp_3_1_3_reg_932 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_tmp_3_2_3_fu_571_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_tmp_3_2_3_reg_937 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_tmp_3_3_3_fu_578_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_tmp_3_3_3_reg_942 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state2 : STD_LOGIC;
    signal ap_block_pp0_stage3_subdone : BOOLEAN;
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal ap_phi_mux_i_1_phi_fu_233_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage1_01001 : BOOLEAN;
    signal ap_block_pp0_stage2_01001 : BOOLEAN;
    signal ap_block_pp0_stage3_01001 : BOOLEAN;
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal grp_fu_240_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_240_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_245_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_245_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_250_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_250_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_255_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_255_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_260_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_265_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_270_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_275_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_280_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln53_fu_288_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal tmp_4_fu_309_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln53_2_fu_318_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal bitcast_ln53_fu_329_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_fu_332_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln53_1_fu_342_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln53_1_fu_352_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln53_fu_346_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln53_fu_358_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln53_fu_364_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln53_1_fu_369_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal bitcast_ln53_2_fu_378_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_6_fu_381_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln53_2_fu_391_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln53_5_fu_401_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln53_4_fu_395_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln53_2_fu_407_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln53_2_fu_413_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln53_3_fu_418_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal bitcast_ln53_3_fu_427_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_9_fu_430_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln53_3_fu_440_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln53_7_fu_450_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln53_6_fu_444_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln53_3_fu_456_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln53_4_fu_462_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln53_5_fu_467_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal bitcast_ln53_4_fu_476_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_7_fu_479_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln53_4_fu_489_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln53_9_fu_499_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln53_8_fu_493_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln53_4_fu_505_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln53_6_fu_511_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln53_7_fu_516_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln51_1_fu_423_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal zext_ln51_fu_374_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal zext_ln51_2_fu_472_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal zext_ln53_fu_522_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal zext_ln53_2_fu_541_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal zext_ln53_1_fu_538_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln53_2_fu_544_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal icmp_ln55_fu_550_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_240_ce : STD_LOGIC;
    signal grp_fu_245_ce : STD_LOGIC;
    signal grp_fu_250_ce : STD_LOGIC;
    signal grp_fu_255_ce : STD_LOGIC;
    signal grp_fu_260_ce : STD_LOGIC;
    signal grp_fu_265_ce : STD_LOGIC;
    signal grp_fu_270_ce : STD_LOGIC;
    signal grp_fu_275_ce : STD_LOGIC;
    signal grp_fu_280_ce : STD_LOGIC;
    signal ap_block_pp0_stage0_00001 : BOOLEAN;
    signal ap_block_pp0_stage1_00001 : BOOLEAN;
    signal ap_block_pp0_stage2_00001 : BOOLEAN;
    signal ap_block_pp0_stage3_00001 : BOOLEAN;
    signal ap_CS_fsm_state36 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state36 : signal is "none";
    signal ap_block_state36 : BOOLEAN;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_block_pp0_stage2_subdone : BOOLEAN;
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_condition_629 : BOOLEAN;
    signal ap_condition_634 : BOOLEAN;
    signal ap_condition_639 : BOOLEAN;
    signal ap_condition_644 : BOOLEAN;

    component myFuncAccel4_fadd_32ns_32ns_32_5_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component myFuncAccel4_fmul_32ns_32ns_32_4_max_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component myFuncAccel4_fcmp_32ns_32ns_1_2_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    myFuncAccel4_fadd_32ns_32ns_32_5_full_dsp_1_U1 : component myFuncAccel4_fadd_32ns_32ns_32_5_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_240_p0,
        din1 => grp_fu_240_p1,
        ce => grp_fu_240_ce,
        dout => grp_fu_240_p2);

    myFuncAccel4_fadd_32ns_32ns_32_5_full_dsp_1_U2 : component myFuncAccel4_fadd_32ns_32ns_32_5_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_245_p0,
        din1 => grp_fu_245_p1,
        ce => grp_fu_245_ce,
        dout => grp_fu_245_p2);

    myFuncAccel4_fadd_32ns_32ns_32_5_full_dsp_1_U3 : component myFuncAccel4_fadd_32ns_32ns_32_5_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_250_p0,
        din1 => grp_fu_250_p1,
        ce => grp_fu_250_ce,
        dout => grp_fu_250_p2);

    myFuncAccel4_fadd_32ns_32ns_32_5_full_dsp_1_U4 : component myFuncAccel4_fadd_32ns_32ns_32_5_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_255_p0,
        din1 => grp_fu_255_p1,
        ce => grp_fu_255_ce,
        dout => grp_fu_255_p2);

    myFuncAccel4_fmul_32ns_32ns_32_4_max_dsp_1_U5 : component myFuncAccel4_fmul_32ns_32ns_32_4_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_260_p0,
        din1 => my_input1_0_data_out,
        ce => grp_fu_260_ce,
        dout => grp_fu_260_p2);

    myFuncAccel4_fmul_32ns_32ns_32_4_max_dsp_1_U6 : component myFuncAccel4_fmul_32ns_32ns_32_4_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_265_p0,
        din1 => my_input1_0_data_out,
        ce => grp_fu_265_ce,
        dout => grp_fu_265_p2);

    myFuncAccel4_fmul_32ns_32ns_32_4_max_dsp_1_U7 : component myFuncAccel4_fmul_32ns_32ns_32_4_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_270_p0,
        din1 => my_input1_0_data_out,
        ce => grp_fu_270_ce,
        dout => grp_fu_270_p2);

    myFuncAccel4_fmul_32ns_32ns_32_4_max_dsp_1_U8 : component myFuncAccel4_fmul_32ns_32ns_32_4_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_275_p0,
        din1 => my_input1_0_data_out,
        ce => grp_fu_275_ce,
        dout => grp_fu_275_p2);

    myFuncAccel4_fcmp_32ns_32ns_1_2_1_U9 : component myFuncAccel4_fcmp_32ns_32ns_1_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_280_p0,
        din1 => threshold,
        ce => grp_fu_280_ce,
        opcode => ap_const_lv5_2,
        dout => grp_fu_280_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if ((((ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                    ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    my_input1_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                my_input1_0_sel_rd <= ap_const_logic_0;
            else
                if (((my_input1_0_ack_out = ap_const_logic_1) and (my_input1_0_vld_out = ap_const_logic_1))) then 
                                        my_input1_0_sel_rd <= not(my_input1_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    my_input1_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                my_input1_0_sel_wr <= ap_const_logic_0;
            else
                if (((my_input1_0_ack_in = ap_const_logic_1) and (my_input1_0_vld_in = ap_const_logic_1))) then 
                                        my_input1_0_sel_wr <= not(my_input1_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    my_input1_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                my_input1_0_state <= ap_const_lv2_0;
            else
                if ((((my_input1_0_state = ap_const_lv2_2) and (my_input1_0_vld_in = ap_const_logic_0)) or ((my_input1_0_state = ap_const_lv2_3) and (my_input1_0_vld_in = ap_const_logic_0) and (my_input1_0_ack_out = ap_const_logic_1)))) then 
                    my_input1_0_state <= ap_const_lv2_2;
                elsif ((((my_input1_0_state = ap_const_lv2_1) and (my_input1_0_ack_out = ap_const_logic_0)) or ((my_input1_0_state = ap_const_lv2_3) and (my_input1_0_ack_out = ap_const_logic_0) and (my_input1_0_vld_in = ap_const_logic_1)))) then 
                    my_input1_0_state <= ap_const_lv2_1;
                elsif (((not(((my_input1_0_vld_in = ap_const_logic_0) and (my_input1_0_ack_out = ap_const_logic_1))) and not(((my_input1_0_ack_out = ap_const_logic_0) and (my_input1_0_vld_in = ap_const_logic_1))) and (my_input1_0_state = ap_const_lv2_3)) or ((my_input1_0_state = ap_const_lv2_1) and (my_input1_0_ack_out = ap_const_logic_1)) or ((my_input1_0_state = ap_const_lv2_2) and (my_input1_0_vld_in = ap_const_logic_1)))) then 
                    my_input1_0_state <= ap_const_lv2_3;
                else 
                    my_input1_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    my_output_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                my_output_1_sel_rd <= ap_const_logic_0;
            else
                if (((my_output_1_ack_out = ap_const_logic_1) and (my_output_1_vld_out = ap_const_logic_1))) then 
                                        my_output_1_sel_rd <= not(my_output_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    my_output_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                my_output_1_sel_wr <= ap_const_logic_0;
            else
                if (((my_output_1_ack_in = ap_const_logic_1) and (my_output_1_vld_in = ap_const_logic_1))) then 
                                        my_output_1_sel_wr <= not(my_output_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    my_output_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                my_output_1_state <= ap_const_lv2_0;
            else
                if ((((my_output_1_state = ap_const_lv2_2) and (my_output_1_vld_in = ap_const_logic_0)) or ((my_output_1_state = ap_const_lv2_3) and (my_output_1_vld_in = ap_const_logic_0) and (my_output_1_ack_out = ap_const_logic_1)))) then 
                    my_output_1_state <= ap_const_lv2_2;
                elsif ((((my_output_1_state = ap_const_lv2_1) and (my_output_TREADY = ap_const_logic_0)) or ((my_output_1_state = ap_const_lv2_3) and (my_output_TREADY = ap_const_logic_0) and (my_output_1_vld_in = ap_const_logic_1)))) then 
                    my_output_1_state <= ap_const_lv2_1;
                elsif (((not(((my_output_1_vld_in = ap_const_logic_0) and (my_output_1_ack_out = ap_const_logic_1))) and not(((my_output_TREADY = ap_const_logic_0) and (my_output_1_vld_in = ap_const_logic_1))) and (my_output_1_state = ap_const_lv2_3)) or ((my_output_1_state = ap_const_lv2_1) and (my_output_1_ack_out = ap_const_logic_1)) or ((my_output_1_state = ap_const_lv2_2) and (my_output_1_vld_in = ap_const_logic_1)))) then 
                    my_output_1_state <= ap_const_lv2_3;
                else 
                    my_output_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    i_1_reg_229_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                i_1_reg_229 <= ap_const_lv32_0;
            elsif (((icmp_ln34_reg_685 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                i_1_reg_229 <= i_reg_689;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln34_reg_685_pp0_iter6_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                add_ln53_1_reg_922 <= add_ln53_1_fu_532_p2;
                add_ln53_reg_917 <= add_ln53_fu_526_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                i_reg_689 <= i_fu_303_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln34_reg_685 <= icmp_ln34_fu_298_p2;
                icmp_ln34_reg_685_pp0_iter1_reg <= icmp_ln34_reg_685;
                icmp_ln34_reg_685_pp0_iter2_reg <= icmp_ln34_reg_685_pp0_iter1_reg;
                icmp_ln34_reg_685_pp0_iter3_reg <= icmp_ln34_reg_685_pp0_iter2_reg;
                icmp_ln34_reg_685_pp0_iter4_reg <= icmp_ln34_reg_685_pp0_iter3_reg;
                icmp_ln34_reg_685_pp0_iter5_reg <= icmp_ln34_reg_685_pp0_iter4_reg;
                icmp_ln34_reg_685_pp0_iter6_reg <= icmp_ln34_reg_685_pp0_iter5_reg;
                icmp_ln34_reg_685_pp0_iter7_reg <= icmp_ln34_reg_685_pp0_iter6_reg;
                icmp_ln34_reg_685_pp0_iter8_reg <= icmp_ln34_reg_685_pp0_iter7_reg;
                tmp_2_0_1_reg_754_pp0_iter2_reg <= tmp_2_0_1_reg_754;
                tmp_2_1_1_reg_759_pp0_iter2_reg <= tmp_2_1_1_reg_759;
                tmp_2_2_1_reg_764_pp0_iter2_reg <= tmp_2_2_1_reg_764;
                tmp_2_3_1_reg_769_pp0_iter2_reg <= tmp_2_3_1_reg_769;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((my_input1_0_load_A = ap_const_logic_1)) then
                my_input1_0_payload_A <= my_input1_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((my_input1_0_load_B = ap_const_logic_1)) then
                my_input1_0_payload_B <= my_input1_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((my_output_1_load_A = ap_const_logic_1)) then
                my_output_1_payload_A <= my_output_1_data_in;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((my_output_1_load_B = ap_const_logic_1)) then
                my_output_1_payload_B <= my_output_1_data_in;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln34_reg_685_pp0_iter7_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                p_tmp_3_1_3_reg_932 <= p_tmp_3_1_3_fu_564_p3;
                p_tmp_3_2_3_reg_937 <= p_tmp_3_2_3_fu_571_p3;
                p_tmp_3_3_3_reg_942 <= p_tmp_3_3_3_fu_578_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln34_reg_685 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                tmp_2_0_1_reg_754 <= grp_fu_260_p2;
                tmp_2_1_1_reg_759 <= grp_fu_265_p2;
                tmp_2_2_1_reg_764 <= grp_fu_270_p2;
                tmp_2_3_1_reg_769 <= grp_fu_275_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln34_reg_685_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                tmp_2_0_2_reg_774 <= grp_fu_260_p2;
                tmp_2_1_2_reg_779 <= grp_fu_265_p2;
                tmp_2_2_2_reg_784 <= grp_fu_270_p2;
                tmp_2_3_2_reg_789 <= grp_fu_275_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                tmp_2_0_2_reg_774_pp0_iter2_reg <= tmp_2_0_2_reg_774;
                tmp_2_0_2_reg_774_pp0_iter3_reg <= tmp_2_0_2_reg_774_pp0_iter2_reg;
                tmp_2_1_2_reg_779_pp0_iter2_reg <= tmp_2_1_2_reg_779;
                tmp_2_1_2_reg_779_pp0_iter3_reg <= tmp_2_1_2_reg_779_pp0_iter2_reg;
                tmp_2_2_2_reg_784_pp0_iter2_reg <= tmp_2_2_2_reg_784;
                tmp_2_2_2_reg_784_pp0_iter3_reg <= tmp_2_2_2_reg_784_pp0_iter2_reg;
                tmp_2_3_2_reg_789_pp0_iter2_reg <= tmp_2_3_2_reg_789;
                tmp_2_3_2_reg_789_pp0_iter3_reg <= tmp_2_3_2_reg_789_pp0_iter2_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln34_reg_685_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then
                tmp_2_0_3_reg_794 <= grp_fu_260_p2;
                tmp_2_1_3_reg_799 <= grp_fu_265_p2;
                tmp_2_2_3_reg_804 <= grp_fu_270_p2;
                tmp_2_3_3_reg_809 <= grp_fu_275_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then
                tmp_2_0_3_reg_794_pp0_iter2_reg <= tmp_2_0_3_reg_794;
                tmp_2_0_3_reg_794_pp0_iter3_reg <= tmp_2_0_3_reg_794_pp0_iter2_reg;
                tmp_2_0_3_reg_794_pp0_iter4_reg <= tmp_2_0_3_reg_794_pp0_iter3_reg;
                tmp_2_1_3_reg_799_pp0_iter2_reg <= tmp_2_1_3_reg_799;
                tmp_2_1_3_reg_799_pp0_iter3_reg <= tmp_2_1_3_reg_799_pp0_iter2_reg;
                tmp_2_1_3_reg_799_pp0_iter4_reg <= tmp_2_1_3_reg_799_pp0_iter3_reg;
                tmp_2_2_3_reg_804_pp0_iter2_reg <= tmp_2_2_3_reg_804;
                tmp_2_2_3_reg_804_pp0_iter3_reg <= tmp_2_2_3_reg_804_pp0_iter2_reg;
                tmp_2_2_3_reg_804_pp0_iter4_reg <= tmp_2_2_3_reg_804_pp0_iter3_reg;
                tmp_2_3_3_reg_809_pp0_iter2_reg <= tmp_2_3_3_reg_809;
                tmp_2_3_3_reg_809_pp0_iter3_reg <= tmp_2_3_3_reg_809_pp0_iter2_reg;
                tmp_2_3_3_reg_809_pp0_iter4_reg <= tmp_2_3_3_reg_809_pp0_iter3_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln34_reg_685 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then
                tmp_2_1_reg_739 <= grp_fu_265_p2;
                tmp_2_2_reg_744 <= grp_fu_270_p2;
                tmp_2_3_reg_749 <= grp_fu_275_p2;
                tmp_2_reg_734 <= grp_fu_260_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln34_reg_685_pp0_iter3_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                tmp_3_0_1_reg_834 <= grp_fu_240_p2;
                tmp_3_1_1_reg_839 <= grp_fu_245_p2;
                tmp_3_2_1_reg_844 <= grp_fu_250_p2;
                tmp_3_3_1_reg_849 <= grp_fu_255_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln34_reg_685_pp0_iter4_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then
                tmp_3_0_2_reg_854 <= grp_fu_240_p2;
                tmp_3_1_2_reg_859 <= grp_fu_245_p2;
                tmp_3_2_2_reg_864 <= grp_fu_250_p2;
                tmp_3_3_2_reg_869 <= grp_fu_255_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln34_reg_685_pp0_iter5_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then
                tmp_3_0_3_reg_874 <= grp_fu_240_p2;
                tmp_3_1_3_reg_881 <= grp_fu_245_p2;
                tmp_3_2_3_reg_888 <= grp_fu_250_p2;
                tmp_3_3_3_reg_895 <= grp_fu_255_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then
                tmp_3_0_3_reg_874_pp0_iter6_reg <= tmp_3_0_3_reg_874;
                tmp_3_1_3_reg_881_pp0_iter6_reg <= tmp_3_1_3_reg_881;
                tmp_3_2_3_reg_888_pp0_iter6_reg <= tmp_3_2_3_reg_888;
                tmp_3_3_3_reg_895_pp0_iter6_reg <= tmp_3_3_3_reg_895;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln34_reg_685_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                tmp_3_1_reg_819 <= grp_fu_245_p2;
                tmp_3_2_reg_824 <= grp_fu_250_p2;
                tmp_3_3_reg_829 <= grp_fu_255_p2;
                tmp_3_reg_814 <= grp_fu_240_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln34_reg_685_pp0_iter6_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                tmp_5_reg_902 <= grp_fu_280_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln34_reg_685_pp0_iter6_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then
                tmp_8_reg_907 <= grp_fu_280_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln34_reg_685_pp0_iter6_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then
                tmp_s_reg_912 <= grp_fu_280_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, my_output_TREADY, my_output_1_state, ap_enable_reg_pp0_iter0, icmp_ln34_fu_298_p2, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_subdone, ap_block_pp0_stage3_subdone, ap_block_pp0_stage1_subdone, ap_CS_fsm_state36, ap_block_pp0_stage2_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((icmp_ln34_fu_298_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                elsif (((icmp_ln34_fu_298_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state36;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                    ap_NS_fsm <= ap_ST_fsm_state36;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_pp0_stage2 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage2_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                end if;
            when ap_ST_fsm_pp0_stage3 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage3_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                end if;
            when ap_ST_fsm_state36 => 
                if ((not(((my_output_1_state = ap_const_lv2_1) or ((my_output_1_state = ap_const_lv2_3) and (my_output_TREADY = ap_const_logic_0)))) and (ap_const_logic_1 = ap_CS_fsm_state36))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state36;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXX";
        end case;
    end process;
    add_ln53_1_fu_532_p2 <= std_logic_vector(unsigned(zext_ln51_2_fu_472_p1) + unsigned(zext_ln53_fu_522_p1));
    add_ln53_2_fu_544_p2 <= std_logic_vector(unsigned(zext_ln53_2_fu_541_p1) + unsigned(zext_ln53_1_fu_538_p1));
    add_ln53_fu_526_p2 <= std_logic_vector(unsigned(zext_ln51_1_fu_423_p1) + unsigned(zext_ln51_fu_374_p1));
    and_ln53_1_fu_369_p2 <= (tmp_5_reg_902 and and_ln53_fu_364_p2);
    and_ln53_2_fu_413_p2 <= (or_ln53_2_fu_407_p2 and or_ln53_1_fu_324_p2);
    and_ln53_3_fu_418_p2 <= (tmp_8_reg_907 and and_ln53_2_fu_413_p2);
    and_ln53_4_fu_462_p2 <= (or_ln53_3_fu_456_p2 and or_ln53_1_fu_324_p2);
    and_ln53_5_fu_467_p2 <= (tmp_s_reg_912 and and_ln53_4_fu_462_p2);
    and_ln53_6_fu_511_p2 <= (or_ln53_4_fu_505_p2 and or_ln53_1_fu_324_p2);
    and_ln53_7_fu_516_p2 <= (grp_fu_280_p2 and and_ln53_6_fu_511_p2);
    and_ln53_fu_364_p2 <= (or_ln53_fu_358_p2 and or_ln53_1_fu_324_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(2);
    ap_CS_fsm_pp0_stage2 <= ap_CS_fsm(3);
    ap_CS_fsm_pp0_stage3 <= ap_CS_fsm(4);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state36 <= ap_CS_fsm(5);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_00001_assign_proc : process(my_input1_0_vld_out, ap_enable_reg_pp0_iter0, icmp_ln34_fu_298_p2)
    begin
                ap_block_pp0_stage0_00001 <= ((icmp_ln34_fu_298_p2 = ap_const_lv1_0) and (my_input1_0_vld_out = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage0_01001_assign_proc : process(my_input1_0_vld_out, ap_enable_reg_pp0_iter0, icmp_ln34_fu_298_p2)
    begin
                ap_block_pp0_stage0_01001 <= ((icmp_ln34_fu_298_p2 = ap_const_lv1_0) and (my_input1_0_vld_out = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(my_input1_0_vld_out, ap_enable_reg_pp0_iter0, icmp_ln34_fu_298_p2, ap_enable_reg_pp0_iter8, ap_block_state34_io)
    begin
                ap_block_pp0_stage0_11001 <= (((ap_const_boolean_1 = ap_block_state34_io) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1)) or ((icmp_ln34_fu_298_p2 = ap_const_lv1_0) and (my_input1_0_vld_out = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(my_input1_0_vld_out, ap_enable_reg_pp0_iter0, icmp_ln34_fu_298_p2, ap_enable_reg_pp0_iter8, ap_block_state34_io)
    begin
                ap_block_pp0_stage0_subdone <= (((ap_const_boolean_1 = ap_block_state34_io) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1)) or ((icmp_ln34_fu_298_p2 = ap_const_lv1_0) and (my_input1_0_vld_out = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)));
    end process;

        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage1_00001_assign_proc : process(my_input1_0_vld_out, ap_enable_reg_pp0_iter0, icmp_ln34_reg_685)
    begin
                ap_block_pp0_stage1_00001 <= ((icmp_ln34_reg_685 = ap_const_lv1_0) and (my_input1_0_vld_out = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage1_01001_assign_proc : process(my_input1_0_vld_out, ap_enable_reg_pp0_iter0, icmp_ln34_reg_685)
    begin
                ap_block_pp0_stage1_01001 <= ((icmp_ln34_reg_685 = ap_const_lv1_0) and (my_input1_0_vld_out = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage1_11001_assign_proc : process(my_input1_0_vld_out, ap_enable_reg_pp0_iter0, icmp_ln34_reg_685, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_block_state31_io, ap_block_state35_io)
    begin
                ap_block_pp0_stage1_11001 <= (((ap_const_boolean_1 = ap_block_state35_io) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1)) or ((ap_const_boolean_1 = ap_block_state31_io) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1)) or ((icmp_ln34_reg_685 = ap_const_lv1_0) and (my_input1_0_vld_out = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage1_subdone_assign_proc : process(my_input1_0_vld_out, ap_enable_reg_pp0_iter0, icmp_ln34_reg_685, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_block_state31_io, ap_block_state35_io)
    begin
                ap_block_pp0_stage1_subdone <= (((ap_const_boolean_1 = ap_block_state35_io) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1)) or ((ap_const_boolean_1 = ap_block_state31_io) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1)) or ((icmp_ln34_reg_685 = ap_const_lv1_0) and (my_input1_0_vld_out = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)));
    end process;

        ap_block_pp0_stage2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage2_00001_assign_proc : process(my_input1_0_vld_out, ap_enable_reg_pp0_iter0, icmp_ln34_reg_685)
    begin
                ap_block_pp0_stage2_00001 <= ((icmp_ln34_reg_685 = ap_const_lv1_0) and (my_input1_0_vld_out = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage2_01001_assign_proc : process(my_input1_0_vld_out, ap_enable_reg_pp0_iter0, icmp_ln34_reg_685)
    begin
                ap_block_pp0_stage2_01001 <= ((icmp_ln34_reg_685 = ap_const_lv1_0) and (my_input1_0_vld_out = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage2_11001_assign_proc : process(my_input1_0_vld_out, ap_enable_reg_pp0_iter0, icmp_ln34_reg_685, ap_enable_reg_pp0_iter7, ap_block_state32_io)
    begin
                ap_block_pp0_stage2_11001 <= (((ap_const_boolean_1 = ap_block_state32_io) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1)) or ((icmp_ln34_reg_685 = ap_const_lv1_0) and (my_input1_0_vld_out = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage2_subdone_assign_proc : process(my_input1_0_vld_out, ap_enable_reg_pp0_iter0, icmp_ln34_reg_685, ap_enable_reg_pp0_iter7, ap_block_state32_io)
    begin
                ap_block_pp0_stage2_subdone <= (((ap_const_boolean_1 = ap_block_state32_io) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1)) or ((icmp_ln34_reg_685 = ap_const_lv1_0) and (my_input1_0_vld_out = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)));
    end process;

        ap_block_pp0_stage3 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage3_00001_assign_proc : process(my_input1_0_vld_out, ap_enable_reg_pp0_iter0, icmp_ln34_reg_685)
    begin
                ap_block_pp0_stage3_00001 <= ((icmp_ln34_reg_685 = ap_const_lv1_0) and (my_input1_0_vld_out = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage3_01001_assign_proc : process(my_input1_0_vld_out, ap_enable_reg_pp0_iter0, icmp_ln34_reg_685)
    begin
                ap_block_pp0_stage3_01001 <= ((icmp_ln34_reg_685 = ap_const_lv1_0) and (my_input1_0_vld_out = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage3_11001_assign_proc : process(my_input1_0_vld_out, ap_enable_reg_pp0_iter0, icmp_ln34_reg_685, ap_enable_reg_pp0_iter7, ap_block_state33_io)
    begin
                ap_block_pp0_stage3_11001 <= (((ap_const_boolean_1 = ap_block_state33_io) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1)) or ((icmp_ln34_reg_685 = ap_const_lv1_0) and (my_input1_0_vld_out = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage3_subdone_assign_proc : process(my_input1_0_vld_out, ap_enable_reg_pp0_iter0, icmp_ln34_reg_685, ap_enable_reg_pp0_iter7, ap_block_state33_io)
    begin
                ap_block_pp0_stage3_subdone <= (((ap_const_boolean_1 = ap_block_state33_io) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1)) or ((icmp_ln34_reg_685 = ap_const_lv1_0) and (my_input1_0_vld_out = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)));
    end process;

        ap_block_state10_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage1_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage2_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp0_stage3_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state15_pp0_stage1_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state16_pp0_stage2_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state17_pp0_stage3_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state18_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state19_pp0_stage1_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state20_pp0_stage2_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state21_pp0_stage3_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state22_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state23_pp0_stage1_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state24_pp0_stage2_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state25_pp0_stage3_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state26_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state27_pp0_stage1_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state28_pp0_stage2_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state29_pp0_stage3_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state2_pp0_stage0_iter0_assign_proc : process(my_input1_0_vld_out, icmp_ln34_fu_298_p2)
    begin
                ap_block_state2_pp0_stage0_iter0 <= ((icmp_ln34_fu_298_p2 = ap_const_lv1_0) and (my_input1_0_vld_out = ap_const_logic_0));
    end process;

        ap_block_state30_pp0_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state31_io_assign_proc : process(my_output_1_ack_in, icmp_ln34_reg_685_pp0_iter7_reg)
    begin
                ap_block_state31_io <= ((icmp_ln34_reg_685_pp0_iter7_reg = ap_const_lv1_0) and (my_output_1_ack_in = ap_const_logic_0));
    end process;

        ap_block_state31_pp0_stage1_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state32_io_assign_proc : process(my_output_1_ack_in, icmp_ln34_reg_685_pp0_iter7_reg)
    begin
                ap_block_state32_io <= ((icmp_ln34_reg_685_pp0_iter7_reg = ap_const_lv1_0) and (my_output_1_ack_in = ap_const_logic_0));
    end process;

        ap_block_state32_pp0_stage2_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state33_io_assign_proc : process(my_output_1_ack_in, icmp_ln34_reg_685_pp0_iter7_reg)
    begin
                ap_block_state33_io <= ((icmp_ln34_reg_685_pp0_iter7_reg = ap_const_lv1_0) and (my_output_1_ack_in = ap_const_logic_0));
    end process;

        ap_block_state33_pp0_stage3_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state34_io_assign_proc : process(my_output_1_ack_in, icmp_ln34_reg_685_pp0_iter7_reg)
    begin
                ap_block_state34_io <= ((icmp_ln34_reg_685_pp0_iter7_reg = ap_const_lv1_0) and (my_output_1_ack_in = ap_const_logic_0));
    end process;

        ap_block_state34_pp0_stage0_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state35_io_assign_proc : process(my_output_1_ack_in, icmp_ln34_reg_685_pp0_iter8_reg)
    begin
                ap_block_state35_io <= ((icmp_ln34_reg_685_pp0_iter8_reg = ap_const_lv1_0) and (my_output_1_ack_in = ap_const_logic_0));
    end process;

        ap_block_state35_pp0_stage1_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state36_assign_proc : process(my_output_TREADY, my_output_1_state)
    begin
                ap_block_state36 <= ((my_output_1_state = ap_const_lv2_1) or ((my_output_1_state = ap_const_lv2_3) and (my_output_TREADY = ap_const_logic_0)));
    end process;


    ap_block_state3_pp0_stage1_iter0_assign_proc : process(my_input1_0_vld_out, icmp_ln34_reg_685)
    begin
                ap_block_state3_pp0_stage1_iter0 <= ((icmp_ln34_reg_685 = ap_const_lv1_0) and (my_input1_0_vld_out = ap_const_logic_0));
    end process;


    ap_block_state4_pp0_stage2_iter0_assign_proc : process(my_input1_0_vld_out, icmp_ln34_reg_685)
    begin
                ap_block_state4_pp0_stage2_iter0 <= ((icmp_ln34_reg_685 = ap_const_lv1_0) and (my_input1_0_vld_out = ap_const_logic_0));
    end process;


    ap_block_state5_pp0_stage3_iter0_assign_proc : process(my_input1_0_vld_out, icmp_ln34_reg_685)
    begin
                ap_block_state5_pp0_stage3_iter0 <= ((icmp_ln34_reg_685 = ap_const_lv1_0) and (my_input1_0_vld_out = ap_const_logic_0));
    end process;

        ap_block_state6_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage2_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage3_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_629_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter7, ap_block_pp0_stage1_01001)
    begin
                ap_condition_629 <= ((ap_const_boolean_0 = ap_block_pp0_stage1_01001) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1));
    end process;


    ap_condition_634_assign_proc : process(ap_CS_fsm_pp0_stage2, ap_enable_reg_pp0_iter7, ap_block_pp0_stage2_01001)
    begin
                ap_condition_634 <= ((ap_const_boolean_0 = ap_block_pp0_stage2_01001) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2));
    end process;


    ap_condition_639_assign_proc : process(ap_CS_fsm_pp0_stage3, ap_enable_reg_pp0_iter7, ap_block_pp0_stage3_01001)
    begin
                ap_condition_639 <= ((ap_const_boolean_0 = ap_block_pp0_stage3_01001) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3));
    end process;


    ap_condition_644_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter8, ap_block_pp0_stage0_01001)
    begin
                ap_condition_644 <= ((ap_const_boolean_0 = ap_block_pp0_stage0_01001) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0));
    end process;


    ap_condition_pp0_exit_iter0_state2_assign_proc : process(icmp_ln34_fu_298_p2)
    begin
        if ((icmp_ln34_fu_298_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(my_output_TREADY, my_output_1_state, ap_CS_fsm_state36)
    begin
        if ((not(((my_output_1_state = ap_const_lv2_1) or ((my_output_1_state = ap_const_lv2_3) and (my_output_TREADY = ap_const_logic_0)))) and (ap_const_logic_1 = ap_CS_fsm_state36))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6)
    begin
        if (((ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_i_1_phi_fu_233_p4_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, icmp_ln34_reg_685, i_1_reg_229, i_reg_689, ap_enable_reg_pp0_iter1)
    begin
        if (((icmp_ln34_reg_685 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_phi_mux_i_1_phi_fu_233_p4 <= i_reg_689;
        else 
            ap_phi_mux_i_1_phi_fu_233_p4 <= i_1_reg_229;
        end if; 
    end process;


    ap_ready_assign_proc : process(my_output_TREADY, my_output_1_state, ap_CS_fsm_state36)
    begin
        if ((not(((my_output_1_state = ap_const_lv2_1) or ((my_output_1_state = ap_const_lv2_3) and (my_output_TREADY = ap_const_logic_0)))) and (ap_const_logic_1 = ap_CS_fsm_state36))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    bitcast_ln53_1_fu_284_p1 <= threshold;
    bitcast_ln53_2_fu_378_p1 <= tmp_3_1_3_reg_881_pp0_iter6_reg;
    bitcast_ln53_3_fu_427_p1 <= tmp_3_2_3_reg_888_pp0_iter6_reg;
    bitcast_ln53_4_fu_476_p1 <= tmp_3_3_3_reg_895_pp0_iter6_reg;
    bitcast_ln53_fu_329_p1 <= tmp_3_0_3_reg_874_pp0_iter6_reg;

    grp_fu_240_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage0_11001, ap_block_pp0_stage1_11001, ap_block_pp0_stage2_11001, ap_block_pp0_stage3_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            grp_fu_240_ce <= ap_const_logic_1;
        else 
            grp_fu_240_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_240_p0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3, tmp_2_reg_734, ap_enable_reg_pp0_iter1, tmp_3_reg_814, ap_enable_reg_pp0_iter2, tmp_3_0_1_reg_834, ap_enable_reg_pp0_iter3, tmp_3_0_2_reg_854, ap_enable_reg_pp0_iter4)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            grp_fu_240_p0 <= tmp_3_0_2_reg_854;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            grp_fu_240_p0 <= tmp_3_0_1_reg_834;
        elsif (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1))) then 
            grp_fu_240_p0 <= tmp_3_reg_814;
        elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            grp_fu_240_p0 <= tmp_2_reg_734;
        else 
            grp_fu_240_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_240_p1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3, ap_enable_reg_pp0_iter1, tmp_2_0_1_reg_754_pp0_iter2_reg, tmp_2_0_2_reg_774_pp0_iter3_reg, tmp_2_0_3_reg_794_pp0_iter4_reg, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            grp_fu_240_p1 <= tmp_2_0_3_reg_794_pp0_iter4_reg;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            grp_fu_240_p1 <= tmp_2_0_2_reg_774_pp0_iter3_reg;
        elsif (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1))) then 
            grp_fu_240_p1 <= tmp_2_0_1_reg_754_pp0_iter2_reg;
        elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            grp_fu_240_p1 <= ap_const_lv32_0;
        else 
            grp_fu_240_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_245_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage0_11001, ap_block_pp0_stage1_11001, ap_block_pp0_stage2_11001, ap_block_pp0_stage3_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            grp_fu_245_ce <= ap_const_logic_1;
        else 
            grp_fu_245_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_245_p0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3, tmp_2_1_reg_739, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, tmp_3_1_reg_819, ap_enable_reg_pp0_iter3, tmp_3_1_1_reg_839, ap_enable_reg_pp0_iter4, tmp_3_1_2_reg_859)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            grp_fu_245_p0 <= tmp_3_1_2_reg_859;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            grp_fu_245_p0 <= tmp_3_1_1_reg_839;
        elsif (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1))) then 
            grp_fu_245_p0 <= tmp_3_1_reg_819;
        elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            grp_fu_245_p0 <= tmp_2_1_reg_739;
        else 
            grp_fu_245_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_245_p1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3, ap_enable_reg_pp0_iter1, tmp_2_1_1_reg_759_pp0_iter2_reg, tmp_2_1_2_reg_779_pp0_iter3_reg, tmp_2_1_3_reg_799_pp0_iter4_reg, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            grp_fu_245_p1 <= tmp_2_1_3_reg_799_pp0_iter4_reg;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            grp_fu_245_p1 <= tmp_2_1_2_reg_779_pp0_iter3_reg;
        elsif (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1))) then 
            grp_fu_245_p1 <= tmp_2_1_1_reg_759_pp0_iter2_reg;
        elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            grp_fu_245_p1 <= ap_const_lv32_0;
        else 
            grp_fu_245_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_250_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage0_11001, ap_block_pp0_stage1_11001, ap_block_pp0_stage2_11001, ap_block_pp0_stage3_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            grp_fu_250_ce <= ap_const_logic_1;
        else 
            grp_fu_250_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_250_p0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3, tmp_2_2_reg_744, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, tmp_3_2_reg_824, ap_enable_reg_pp0_iter3, tmp_3_2_1_reg_844, ap_enable_reg_pp0_iter4, tmp_3_2_2_reg_864)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            grp_fu_250_p0 <= tmp_3_2_2_reg_864;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            grp_fu_250_p0 <= tmp_3_2_1_reg_844;
        elsif (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1))) then 
            grp_fu_250_p0 <= tmp_3_2_reg_824;
        elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            grp_fu_250_p0 <= tmp_2_2_reg_744;
        else 
            grp_fu_250_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_250_p1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3, ap_enable_reg_pp0_iter1, tmp_2_2_1_reg_764_pp0_iter2_reg, tmp_2_2_2_reg_784_pp0_iter3_reg, tmp_2_2_3_reg_804_pp0_iter4_reg, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            grp_fu_250_p1 <= tmp_2_2_3_reg_804_pp0_iter4_reg;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            grp_fu_250_p1 <= tmp_2_2_2_reg_784_pp0_iter3_reg;
        elsif (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1))) then 
            grp_fu_250_p1 <= tmp_2_2_1_reg_764_pp0_iter2_reg;
        elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            grp_fu_250_p1 <= ap_const_lv32_0;
        else 
            grp_fu_250_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_255_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage0_11001, ap_block_pp0_stage1_11001, ap_block_pp0_stage2_11001, ap_block_pp0_stage3_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            grp_fu_255_ce <= ap_const_logic_1;
        else 
            grp_fu_255_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_255_p0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3, tmp_2_3_reg_749, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, tmp_3_3_reg_829, ap_enable_reg_pp0_iter3, tmp_3_3_1_reg_849, ap_enable_reg_pp0_iter4, tmp_3_3_2_reg_869)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            grp_fu_255_p0 <= tmp_3_3_2_reg_869;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            grp_fu_255_p0 <= tmp_3_3_1_reg_849;
        elsif (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1))) then 
            grp_fu_255_p0 <= tmp_3_3_reg_829;
        elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            grp_fu_255_p0 <= tmp_2_3_reg_749;
        else 
            grp_fu_255_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_255_p1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3, ap_enable_reg_pp0_iter1, tmp_2_3_1_reg_769_pp0_iter2_reg, tmp_2_3_2_reg_789_pp0_iter3_reg, tmp_2_3_3_reg_809_pp0_iter4_reg, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            grp_fu_255_p1 <= tmp_2_3_3_reg_809_pp0_iter4_reg;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            grp_fu_255_p1 <= tmp_2_3_2_reg_789_pp0_iter3_reg;
        elsif (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1))) then 
            grp_fu_255_p1 <= tmp_2_3_1_reg_769_pp0_iter2_reg;
        elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            grp_fu_255_p1 <= ap_const_lv32_0;
        else 
            grp_fu_255_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_260_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage0_11001, ap_block_pp0_stage1_11001, ap_block_pp0_stage2_11001, ap_block_pp0_stage3_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            grp_fu_260_ce <= ap_const_logic_1;
        else 
            grp_fu_260_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_260_p0_assign_proc : process(data0_0, data0_1, data0_2, data0_3, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                grp_fu_260_p0 <= data0_3;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                grp_fu_260_p0 <= data0_2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1))) then 
                grp_fu_260_p0 <= data0_1;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
                grp_fu_260_p0 <= data0_0;
            else 
                grp_fu_260_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            grp_fu_260_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_265_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage0_11001, ap_block_pp0_stage1_11001, ap_block_pp0_stage2_11001, ap_block_pp0_stage3_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            grp_fu_265_ce <= ap_const_logic_1;
        else 
            grp_fu_265_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_265_p0_assign_proc : process(data0_4, data0_5, data0_6, data0_7, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                grp_fu_265_p0 <= data0_7;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                grp_fu_265_p0 <= data0_6;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1))) then 
                grp_fu_265_p0 <= data0_5;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
                grp_fu_265_p0 <= data0_4;
            else 
                grp_fu_265_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            grp_fu_265_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_270_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage0_11001, ap_block_pp0_stage1_11001, ap_block_pp0_stage2_11001, ap_block_pp0_stage3_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            grp_fu_270_ce <= ap_const_logic_1;
        else 
            grp_fu_270_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_270_p0_assign_proc : process(data0_8, data0_9, data0_10, data0_11, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                grp_fu_270_p0 <= data0_11;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                grp_fu_270_p0 <= data0_10;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1))) then 
                grp_fu_270_p0 <= data0_9;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
                grp_fu_270_p0 <= data0_8;
            else 
                grp_fu_270_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            grp_fu_270_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_275_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage0_11001, ap_block_pp0_stage1_11001, ap_block_pp0_stage2_11001, ap_block_pp0_stage3_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            grp_fu_275_ce <= ap_const_logic_1;
        else 
            grp_fu_275_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_275_p0_assign_proc : process(data0_12, data0_13, data0_14, data0_15, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                grp_fu_275_p0 <= data0_15;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                grp_fu_275_p0 <= data0_14;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1))) then 
                grp_fu_275_p0 <= data0_13;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
                grp_fu_275_p0 <= data0_12;
            else 
                grp_fu_275_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            grp_fu_275_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_280_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage0_11001, ap_block_pp0_stage1_11001, ap_block_pp0_stage2_11001, ap_block_pp0_stage3_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            grp_fu_280_ce <= ap_const_logic_1;
        else 
            grp_fu_280_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_280_p0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3, tmp_3_0_3_reg_874, tmp_3_1_3_reg_881, tmp_3_2_3_reg_888, tmp_3_3_3_reg_895, ap_enable_reg_pp0_iter6)
    begin
        if ((ap_enable_reg_pp0_iter6 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                grp_fu_280_p0 <= tmp_3_3_3_reg_895;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                grp_fu_280_p0 <= tmp_3_2_3_reg_888;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1))) then 
                grp_fu_280_p0 <= tmp_3_1_3_reg_881;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
                grp_fu_280_p0 <= tmp_3_0_3_reg_874;
            else 
                grp_fu_280_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            grp_fu_280_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    i_fu_303_p2 <= std_logic_vector(unsigned(ap_phi_mux_i_1_phi_fu_233_p4) + unsigned(ap_const_lv32_1));
    icmp_ln34_fu_298_p2 <= "1" when (ap_phi_mux_i_1_phi_fu_233_p4 = size) else "0";
    icmp_ln53_1_fu_352_p2 <= "1" when (trunc_ln53_1_fu_342_p1 = ap_const_lv23_0) else "0";
    icmp_ln53_2_fu_318_p2 <= "0" when (tmp_4_fu_309_p4 = ap_const_lv8_FF) else "1";
    icmp_ln53_3_fu_292_p2 <= "1" when (trunc_ln53_fu_288_p1 = ap_const_lv23_0) else "0";
    icmp_ln53_4_fu_395_p2 <= "0" when (tmp_6_fu_381_p4 = ap_const_lv8_FF) else "1";
    icmp_ln53_5_fu_401_p2 <= "1" when (trunc_ln53_2_fu_391_p1 = ap_const_lv23_0) else "0";
    icmp_ln53_6_fu_444_p2 <= "0" when (tmp_9_fu_430_p4 = ap_const_lv8_FF) else "1";
    icmp_ln53_7_fu_450_p2 <= "1" when (trunc_ln53_3_fu_440_p1 = ap_const_lv23_0) else "0";
    icmp_ln53_8_fu_493_p2 <= "0" when (tmp_7_fu_479_p4 = ap_const_lv8_FF) else "1";
    icmp_ln53_9_fu_499_p2 <= "1" when (trunc_ln53_4_fu_489_p1 = ap_const_lv23_0) else "0";
    icmp_ln53_fu_346_p2 <= "0" when (tmp_1_fu_332_p4 = ap_const_lv8_FF) else "1";
    icmp_ln55_fu_550_p2 <= "1" when (add_ln53_2_fu_544_p2 = ap_const_lv3_4) else "0";
    my_input1_0_ack_in <= my_input1_0_state(1);

    my_input1_0_ack_out_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, icmp_ln34_fu_298_p2, ap_CS_fsm_pp0_stage1, icmp_ln34_reg_685, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage0_11001, ap_block_pp0_stage1_11001, ap_block_pp0_stage2_11001, ap_block_pp0_stage3_11001)
    begin
        if ((((icmp_ln34_reg_685 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((icmp_ln34_reg_685 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((icmp_ln34_reg_685 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((icmp_ln34_fu_298_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            my_input1_0_ack_out <= ap_const_logic_1;
        else 
            my_input1_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    my_input1_0_data_out_assign_proc : process(my_input1_0_payload_A, my_input1_0_payload_B, my_input1_0_sel)
    begin
        if ((my_input1_0_sel = ap_const_logic_1)) then 
            my_input1_0_data_out <= my_input1_0_payload_B;
        else 
            my_input1_0_data_out <= my_input1_0_payload_A;
        end if; 
    end process;

    my_input1_0_load_A <= (my_input1_0_state_cmp_full and not(my_input1_0_sel_wr));
    my_input1_0_load_B <= (my_input1_0_state_cmp_full and my_input1_0_sel_wr);
    my_input1_0_sel <= my_input1_0_sel_rd;
    my_input1_0_state_cmp_full <= '0' when (my_input1_0_state = ap_const_lv2_1) else '1';
    my_input1_0_vld_in <= my_input1_TVALID;
    my_input1_0_vld_out <= my_input1_0_state(0);

    my_input1_TDATA_blk_n_assign_proc : process(my_input1_0_state, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0, icmp_ln34_fu_298_p2, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1, icmp_ln34_reg_685, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3)
    begin
        if ((((icmp_ln34_reg_685 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((icmp_ln34_reg_685 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((icmp_ln34_reg_685 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1)) or ((icmp_ln34_fu_298_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0)))) then 
            my_input1_TDATA_blk_n <= my_input1_0_state(0);
        else 
            my_input1_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    my_input1_TREADY <= my_input1_0_state(1);
    my_output_1_ack_in <= my_output_1_state(1);
    my_output_1_ack_out <= my_output_TREADY;

    my_output_1_data_in_assign_proc : process(icmp_ln34_reg_685_pp0_iter7_reg, p_tmp_3_0_3_fu_556_p3, p_tmp_3_1_3_reg_932, p_tmp_3_2_3_reg_937, p_tmp_3_3_3_reg_942, ap_condition_629, ap_condition_634, ap_condition_639, ap_condition_644)
    begin
        if ((icmp_ln34_reg_685_pp0_iter7_reg = ap_const_lv1_0)) then
            if ((ap_const_boolean_1 = ap_condition_644)) then 
                my_output_1_data_in <= p_tmp_3_3_3_reg_942;
            elsif ((ap_const_boolean_1 = ap_condition_639)) then 
                my_output_1_data_in <= p_tmp_3_2_3_reg_937;
            elsif ((ap_const_boolean_1 = ap_condition_634)) then 
                my_output_1_data_in <= p_tmp_3_1_3_reg_932;
            elsif ((ap_const_boolean_1 = ap_condition_629)) then 
                my_output_1_data_in <= p_tmp_3_0_3_fu_556_p3;
            else 
                my_output_1_data_in <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            my_output_1_data_in <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    my_output_1_data_out_assign_proc : process(my_output_1_payload_A, my_output_1_payload_B, my_output_1_sel)
    begin
        if ((my_output_1_sel = ap_const_logic_1)) then 
            my_output_1_data_out <= my_output_1_payload_B;
        else 
            my_output_1_data_out <= my_output_1_payload_A;
        end if; 
    end process;

    my_output_1_load_A <= (my_output_1_state_cmp_full and not(my_output_1_sel_wr));
    my_output_1_load_B <= (my_output_1_state_cmp_full and my_output_1_sel_wr);
    my_output_1_sel <= my_output_1_sel_rd;
    my_output_1_state_cmp_full <= '0' when (my_output_1_state = ap_const_lv2_1) else '1';

    my_output_1_vld_in_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_enable_reg_pp0_iter7, icmp_ln34_reg_685_pp0_iter7_reg, ap_enable_reg_pp0_iter8, ap_block_pp0_stage0_11001, ap_block_pp0_stage1_11001, ap_block_pp0_stage2_11001, ap_block_pp0_stage3_11001)
    begin
        if ((((icmp_ln34_reg_685_pp0_iter7_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((icmp_ln34_reg_685_pp0_iter7_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((icmp_ln34_reg_685_pp0_iter7_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((icmp_ln34_reg_685_pp0_iter7_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            my_output_1_vld_in <= ap_const_logic_1;
        else 
            my_output_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    my_output_1_vld_out <= my_output_1_state(0);
    my_output_TDATA <= my_output_1_data_out;

    my_output_TDATA_blk_n_assign_proc : process(my_output_1_state, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3, ap_enable_reg_pp0_iter7, icmp_ln34_reg_685_pp0_iter7_reg, ap_enable_reg_pp0_iter8, icmp_ln34_reg_685_pp0_iter8_reg)
    begin
        if ((((icmp_ln34_reg_685_pp0_iter7_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((icmp_ln34_reg_685_pp0_iter7_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((icmp_ln34_reg_685_pp0_iter8_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1)) or ((icmp_ln34_reg_685_pp0_iter7_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1)) or ((icmp_ln34_reg_685_pp0_iter7_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0)))) then 
            my_output_TDATA_blk_n <= my_output_1_state(1);
        else 
            my_output_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    my_output_TVALID <= my_output_1_state(0);
    or_ln53_1_fu_324_p2 <= (icmp_ln53_3_fu_292_p2 or icmp_ln53_2_fu_318_p2);
    or_ln53_2_fu_407_p2 <= (icmp_ln53_5_fu_401_p2 or icmp_ln53_4_fu_395_p2);
    or_ln53_3_fu_456_p2 <= (icmp_ln53_7_fu_450_p2 or icmp_ln53_6_fu_444_p2);
    or_ln53_4_fu_505_p2 <= (icmp_ln53_9_fu_499_p2 or icmp_ln53_8_fu_493_p2);
    or_ln53_fu_358_p2 <= (icmp_ln53_fu_346_p2 or icmp_ln53_1_fu_352_p2);
    p_tmp_3_0_3_fu_556_p3 <= 
        ap_const_lv32_0 when (icmp_ln55_fu_550_p2(0) = '1') else 
        tmp_3_0_3_reg_874_pp0_iter6_reg;
    p_tmp_3_1_3_fu_564_p3 <= 
        ap_const_lv32_0 when (icmp_ln55_fu_550_p2(0) = '1') else 
        tmp_3_1_3_reg_881_pp0_iter6_reg;
    p_tmp_3_2_3_fu_571_p3 <= 
        ap_const_lv32_0 when (icmp_ln55_fu_550_p2(0) = '1') else 
        tmp_3_2_3_reg_888_pp0_iter6_reg;
    p_tmp_3_3_3_fu_578_p3 <= 
        ap_const_lv32_0 when (icmp_ln55_fu_550_p2(0) = '1') else 
        tmp_3_3_3_reg_895_pp0_iter6_reg;
    tmp_1_fu_332_p4 <= bitcast_ln53_fu_329_p1(30 downto 23);
    tmp_4_fu_309_p4 <= bitcast_ln53_1_fu_284_p1(30 downto 23);
    tmp_6_fu_381_p4 <= bitcast_ln53_2_fu_378_p1(30 downto 23);
    tmp_7_fu_479_p4 <= bitcast_ln53_4_fu_476_p1(30 downto 23);
    tmp_9_fu_430_p4 <= bitcast_ln53_3_fu_427_p1(30 downto 23);
    trunc_ln53_1_fu_342_p1 <= bitcast_ln53_fu_329_p1(23 - 1 downto 0);
    trunc_ln53_2_fu_391_p1 <= bitcast_ln53_2_fu_378_p1(23 - 1 downto 0);
    trunc_ln53_3_fu_440_p1 <= bitcast_ln53_3_fu_427_p1(23 - 1 downto 0);
    trunc_ln53_4_fu_489_p1 <= bitcast_ln53_4_fu_476_p1(23 - 1 downto 0);
    trunc_ln53_fu_288_p1 <= bitcast_ln53_1_fu_284_p1(23 - 1 downto 0);
    zext_ln51_1_fu_423_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(and_ln53_3_fu_418_p2),2));
    zext_ln51_2_fu_472_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(and_ln53_5_fu_467_p2),2));
    zext_ln51_fu_374_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(and_ln53_1_fu_369_p2),2));
    zext_ln53_1_fu_538_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln53_reg_917),3));
    zext_ln53_2_fu_541_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln53_1_reg_922),3));
    zext_ln53_fu_522_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(and_ln53_7_fu_516_p2),2));
end behav;
