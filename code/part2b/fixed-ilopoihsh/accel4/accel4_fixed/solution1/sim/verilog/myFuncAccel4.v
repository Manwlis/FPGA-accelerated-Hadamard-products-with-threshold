// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="myFuncAccel4,hls_ip_2019_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z020-clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=10.759750,HLS_SYN_LAT=409,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=16,HLS_SYN_FF=811,HLS_SYN_LUT=463,HLS_VERSION=2019_1}" *)

module myFuncAccel4 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        size,
        dim,
        threshold_V,
        data0_0_V,
        data0_1_V,
        data0_2_V,
        data0_3_V,
        data0_4_V,
        data0_5_V,
        data0_6_V,
        data0_7_V,
        data0_8_V,
        data0_9_V,
        data0_10_V,
        data0_11_V,
        data0_12_V,
        data0_13_V,
        data0_14_V,
        data0_15_V,
        data1_V_req_din,
        data1_V_req_full_n,
        data1_V_req_write,
        data1_V_rsp_empty_n,
        data1_V_rsp_read,
        data1_V_address,
        data1_V_datain,
        data1_V_dataout,
        data1_V_size,
        data_out_V_req_din,
        data_out_V_req_full_n,
        data_out_V_req_write,
        data_out_V_rsp_empty_n,
        data_out_V_rsp_read,
        data_out_V_address,
        data_out_V_datain,
        data_out_V_dataout,
        data_out_V_size
);

parameter    ap_ST_fsm_state1 = 6'd1;
parameter    ap_ST_fsm_pp0_stage0 = 6'd2;
parameter    ap_ST_fsm_pp0_stage1 = 6'd4;
parameter    ap_ST_fsm_pp0_stage2 = 6'd8;
parameter    ap_ST_fsm_pp0_stage3 = 6'd16;
parameter    ap_ST_fsm_state14 = 6'd32;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] size;
input  [31:0] dim;
input  [33:0] threshold_V;
input  [16:0] data0_0_V;
input  [16:0] data0_1_V;
input  [16:0] data0_2_V;
input  [16:0] data0_3_V;
input  [16:0] data0_4_V;
input  [16:0] data0_5_V;
input  [16:0] data0_6_V;
input  [16:0] data0_7_V;
input  [16:0] data0_8_V;
input  [16:0] data0_9_V;
input  [16:0] data0_10_V;
input  [16:0] data0_11_V;
input  [16:0] data0_12_V;
input  [16:0] data0_13_V;
input  [16:0] data0_14_V;
input  [16:0] data0_15_V;
output   data1_V_req_din;
input   data1_V_req_full_n;
output   data1_V_req_write;
input   data1_V_rsp_empty_n;
output   data1_V_rsp_read;
output  [31:0] data1_V_address;
input  [16:0] data1_V_datain;
output  [16:0] data1_V_dataout;
output  [31:0] data1_V_size;
output   data_out_V_req_din;
input   data_out_V_req_full_n;
output   data_out_V_req_write;
input   data_out_V_rsp_empty_n;
output   data_out_V_rsp_read;
output  [31:0] data_out_V_address;
input  [33:0] data_out_V_datain;
output  [33:0] data_out_V_dataout;
output  [31:0] data_out_V_size;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg data1_V_req_write;
reg data1_V_rsp_read;
reg data_out_V_req_din;
reg data_out_V_req_write;
reg[33:0] data_out_V_dataout;

(* fsm_encoding = "none" *) reg   [5:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [31:0] i_1_reg_252;
reg   [16:0] reg_263;
wire    ap_CS_fsm_pp0_stage3;
reg    ap_enable_reg_pp0_iter0;
reg   [0:0] icmp_ln33_reg_923;
reg    ap_block_state5_pp0_stage3_iter0;
wire    ap_block_state9_pp0_stage3_iter1;
reg   [0:0] icmp_ln33_reg_923_pp0_iter2_reg;
reg    ap_block_state13_pp0_stage3_iter2;
reg    ap_enable_reg_pp0_iter2;
reg    ap_block_pp0_stage3_11001;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_state2_pp0_stage0_iter0;
reg    ap_block_state6_pp0_stage0_iter1;
reg   [0:0] icmp_ln33_reg_923_pp0_iter1_reg;
reg    ap_block_state10_pp0_stage0_iter2;
reg    ap_block_pp0_stage0_11001;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_state3_pp0_stage1_iter0;
reg    ap_block_state7_pp0_stage1_iter1;
reg    ap_block_state11_pp0_stage1_iter2;
reg    ap_block_pp0_stage1_11001;
wire    ap_CS_fsm_pp0_stage2;
wire    ap_block_state4_pp0_stage2_iter0;
reg    ap_block_state8_pp0_stage2_iter1;
reg    ap_block_state12_pp0_stage2_iter2;
reg    ap_block_pp0_stage2_11001;
wire   [0:0] icmp_ln33_fu_331_p2;
wire   [31:0] i_fu_336_p2;
reg   [31:0] i_reg_927;
wire   [31:0] shl_ln41_fu_342_p2;
reg   [31:0] shl_ln41_reg_932;
reg   [31:0] data_out_V_addr_reg_943;
reg   [31:0] data_out_V_addr_reg_943_pp0_iter1_reg;
reg   [31:0] tmp_2_reg_948;
reg   [31:0] tmp_5_reg_953;
reg   [31:0] tmp_8_reg_958;
reg   [31:0] tmp_1_reg_963;
reg   [32:0] tmp_3_reg_968;
reg   [32:0] tmp_6_reg_973;
reg   [32:0] tmp_9_reg_978;
reg   [32:0] tmp_10_reg_983;
reg   [33:0] tmp_4_reg_988;
reg   [33:0] tmp_7_reg_993;
reg   [33:0] tmp_s_reg_998;
reg   [33:0] tmp_11_reg_1003;
wire   [33:0] p_trunc_ln708_2_fu_678_p3;
reg   [33:0] p_trunc_ln708_2_reg_1008;
wire   [33:0] p_trunc_ln708_5_fu_686_p3;
reg   [33:0] p_trunc_ln708_5_reg_1013;
wire   [33:0] p_trunc_ln708_8_fu_694_p3;
reg   [33:0] p_trunc_ln708_8_reg_1018;
wire   [33:0] p_trunc_ln708_s_fu_702_p3;
reg   [33:0] p_trunc_ln708_s_reg_1023;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
reg    ap_block_pp0_stage3_subdone;
reg   [31:0] ap_phi_mux_i_1_phi_fu_256_p4;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln41_fu_348_p1;
wire    ap_block_pp0_stage1;
wire   [33:0] mul_ln1118_fu_710_p2;
wire   [33:0] mul_ln1118_4_fu_716_p2;
wire   [33:0] mul_ln1118_8_fu_722_p2;
wire   [33:0] mul_ln1118_12_fu_728_p2;
wire   [33:0] and_ln_fu_404_p3;
wire   [34:0] grp_fu_734_p3;
wire   [33:0] and_ln728_1_fu_428_p3;
wire   [34:0] grp_fu_742_p3;
wire   [33:0] and_ln728_2_fu_448_p3;
wire   [34:0] grp_fu_750_p3;
wire   [33:0] and_ln728_3_fu_468_p3;
wire   [34:0] grp_fu_758_p3;
wire    ap_block_pp0_stage2;
wire   [34:0] shl_ln1_fu_492_p3;
wire   [35:0] grp_fu_766_p3;
wire   [34:0] shl_ln728_2_fu_512_p3;
wire   [35:0] grp_fu_774_p3;
wire   [34:0] shl_ln728_4_fu_532_p3;
wire   [35:0] grp_fu_782_p3;
wire   [34:0] shl_ln728_6_fu_552_p3;
wire   [35:0] grp_fu_790_p3;
wire    ap_block_pp0_stage3;
wire   [35:0] grp_fu_798_p3;
wire   [33:0] trunc_ln708_2_fu_583_p4;
wire   [35:0] grp_fu_806_p3;
wire   [33:0] trunc_ln708_5_fu_604_p4;
wire   [35:0] grp_fu_814_p3;
wire   [33:0] trunc_ln708_8_fu_625_p4;
wire   [35:0] grp_fu_822_p3;
wire   [33:0] trunc_ln708_s_fu_646_p4;
wire   [0:0] icmp_ln1494_1_fu_613_p2;
wire   [0:0] icmp_ln1494_2_fu_634_p2;
wire   [0:0] icmp_ln1494_fu_592_p2;
wire   [0:0] icmp_ln1494_3_fu_655_p2;
wire   [0:0] and_ln52_1_fu_666_p2;
wire   [0:0] and_ln52_fu_660_p2;
wire   [0:0] and_ln52_2_fu_672_p2;
wire   [16:0] mul_ln1118_fu_710_p0;
wire   [16:0] mul_ln1118_fu_710_p1;
wire   [33:0] zext_ln1118_fu_364_p1;
wire   [16:0] mul_ln1118_4_fu_716_p0;
wire   [16:0] mul_ln1118_4_fu_716_p1;
wire   [16:0] mul_ln1118_8_fu_722_p0;
wire   [16:0] mul_ln1118_8_fu_722_p1;
wire   [16:0] mul_ln1118_12_fu_728_p0;
wire   [16:0] mul_ln1118_12_fu_728_p1;
wire   [16:0] grp_fu_734_p0;
wire   [16:0] grp_fu_734_p1;
wire   [33:0] zext_ln1118_1_fu_411_p1;
wire   [33:0] grp_fu_734_p2;
wire   [16:0] grp_fu_742_p0;
wire   [16:0] grp_fu_742_p1;
wire   [33:0] grp_fu_742_p2;
wire   [16:0] grp_fu_750_p0;
wire   [16:0] grp_fu_750_p1;
wire   [33:0] grp_fu_750_p2;
wire   [16:0] grp_fu_758_p0;
wire   [16:0] grp_fu_758_p1;
wire   [33:0] grp_fu_758_p2;
wire   [16:0] grp_fu_766_p0;
wire   [16:0] grp_fu_766_p1;
wire   [33:0] zext_ln1118_2_fu_488_p1;
wire   [34:0] grp_fu_766_p2;
wire   [16:0] grp_fu_774_p0;
wire   [16:0] grp_fu_774_p1;
wire   [34:0] grp_fu_774_p2;
wire   [16:0] grp_fu_782_p0;
wire   [16:0] grp_fu_782_p1;
wire   [34:0] grp_fu_782_p2;
wire   [16:0] grp_fu_790_p0;
wire   [16:0] grp_fu_790_p1;
wire   [34:0] grp_fu_790_p2;
wire   [16:0] grp_fu_798_p0;
wire   [16:0] grp_fu_798_p1;
wire   [33:0] zext_ln1118_3_fu_572_p1;
wire   [35:0] grp_fu_798_p2;
wire   [16:0] grp_fu_806_p0;
wire   [16:0] grp_fu_806_p1;
wire   [35:0] grp_fu_806_p2;
wire   [16:0] grp_fu_814_p0;
wire   [16:0] grp_fu_814_p1;
wire   [35:0] grp_fu_814_p2;
wire   [16:0] grp_fu_822_p0;
wire   [16:0] grp_fu_822_p1;
wire   [35:0] grp_fu_822_p2;
wire    ap_CS_fsm_state14;
reg   [5:0] ap_NS_fsm;
reg    ap_block_pp0_stage1_subdone;
reg    ap_block_pp0_stage2_subdone;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire   [33:0] grp_fu_734_p00;
wire   [34:0] grp_fu_734_p20;
wire   [33:0] grp_fu_742_p00;
wire   [34:0] grp_fu_742_p20;
wire   [33:0] grp_fu_750_p00;
wire   [34:0] grp_fu_750_p20;
wire   [33:0] grp_fu_758_p00;
wire   [34:0] grp_fu_758_p20;
wire   [33:0] grp_fu_766_p00;
wire   [35:0] grp_fu_766_p20;
wire   [33:0] grp_fu_774_p00;
wire   [35:0] grp_fu_774_p20;
wire   [33:0] grp_fu_782_p00;
wire   [35:0] grp_fu_782_p20;
wire   [33:0] grp_fu_790_p00;
wire   [35:0] grp_fu_790_p20;
wire   [33:0] grp_fu_798_p00;
wire   [33:0] grp_fu_806_p00;
wire   [33:0] grp_fu_814_p00;
wire   [33:0] grp_fu_822_p00;
wire   [33:0] mul_ln1118_12_fu_728_p00;
wire   [33:0] mul_ln1118_4_fu_716_p00;
wire   [33:0] mul_ln1118_8_fu_722_p00;
wire   [33:0] mul_ln1118_fu_710_p00;
reg    ap_condition_752;
reg    ap_condition_756;
reg    ap_condition_760;
reg    ap_condition_764;

// power-on initialization
initial begin
#0 ap_CS_fsm = 6'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
end

myFuncAccel4_mul_mul_17ns_17ns_34_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 17 ),
    .din1_WIDTH( 17 ),
    .dout_WIDTH( 34 ))
myFuncAccel4_mul_mul_17ns_17ns_34_1_1_U1(
    .din0(mul_ln1118_fu_710_p0),
    .din1(mul_ln1118_fu_710_p1),
    .dout(mul_ln1118_fu_710_p2)
);

myFuncAccel4_mul_mul_17ns_17ns_34_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 17 ),
    .din1_WIDTH( 17 ),
    .dout_WIDTH( 34 ))
myFuncAccel4_mul_mul_17ns_17ns_34_1_1_U2(
    .din0(mul_ln1118_4_fu_716_p0),
    .din1(mul_ln1118_4_fu_716_p1),
    .dout(mul_ln1118_4_fu_716_p2)
);

myFuncAccel4_mul_mul_17ns_17ns_34_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 17 ),
    .din1_WIDTH( 17 ),
    .dout_WIDTH( 34 ))
myFuncAccel4_mul_mul_17ns_17ns_34_1_1_U3(
    .din0(mul_ln1118_8_fu_722_p0),
    .din1(mul_ln1118_8_fu_722_p1),
    .dout(mul_ln1118_8_fu_722_p2)
);

myFuncAccel4_mul_mul_17ns_17ns_34_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 17 ),
    .din1_WIDTH( 17 ),
    .dout_WIDTH( 34 ))
myFuncAccel4_mul_mul_17ns_17ns_34_1_1_U4(
    .din0(mul_ln1118_12_fu_728_p0),
    .din1(mul_ln1118_12_fu_728_p1),
    .dout(mul_ln1118_12_fu_728_p2)
);

myFuncAccel4_mac_muladd_17ns_17ns_34ns_35_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 17 ),
    .din1_WIDTH( 17 ),
    .din2_WIDTH( 34 ),
    .dout_WIDTH( 35 ))
myFuncAccel4_mac_muladd_17ns_17ns_34ns_35_1_1_U5(
    .din0(grp_fu_734_p0),
    .din1(grp_fu_734_p1),
    .din2(grp_fu_734_p2),
    .dout(grp_fu_734_p3)
);

myFuncAccel4_mac_muladd_17ns_17ns_34ns_35_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 17 ),
    .din1_WIDTH( 17 ),
    .din2_WIDTH( 34 ),
    .dout_WIDTH( 35 ))
myFuncAccel4_mac_muladd_17ns_17ns_34ns_35_1_1_U6(
    .din0(grp_fu_742_p0),
    .din1(grp_fu_742_p1),
    .din2(grp_fu_742_p2),
    .dout(grp_fu_742_p3)
);

myFuncAccel4_mac_muladd_17ns_17ns_34ns_35_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 17 ),
    .din1_WIDTH( 17 ),
    .din2_WIDTH( 34 ),
    .dout_WIDTH( 35 ))
myFuncAccel4_mac_muladd_17ns_17ns_34ns_35_1_1_U7(
    .din0(grp_fu_750_p0),
    .din1(grp_fu_750_p1),
    .din2(grp_fu_750_p2),
    .dout(grp_fu_750_p3)
);

myFuncAccel4_mac_muladd_17ns_17ns_34ns_35_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 17 ),
    .din1_WIDTH( 17 ),
    .din2_WIDTH( 34 ),
    .dout_WIDTH( 35 ))
myFuncAccel4_mac_muladd_17ns_17ns_34ns_35_1_1_U8(
    .din0(grp_fu_758_p0),
    .din1(grp_fu_758_p1),
    .din2(grp_fu_758_p2),
    .dout(grp_fu_758_p3)
);

myFuncAccel4_mac_muladd_17ns_17ns_35ns_36_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 17 ),
    .din1_WIDTH( 17 ),
    .din2_WIDTH( 35 ),
    .dout_WIDTH( 36 ))
myFuncAccel4_mac_muladd_17ns_17ns_35ns_36_1_1_U9(
    .din0(grp_fu_766_p0),
    .din1(grp_fu_766_p1),
    .din2(grp_fu_766_p2),
    .dout(grp_fu_766_p3)
);

myFuncAccel4_mac_muladd_17ns_17ns_35ns_36_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 17 ),
    .din1_WIDTH( 17 ),
    .din2_WIDTH( 35 ),
    .dout_WIDTH( 36 ))
myFuncAccel4_mac_muladd_17ns_17ns_35ns_36_1_1_U10(
    .din0(grp_fu_774_p0),
    .din1(grp_fu_774_p1),
    .din2(grp_fu_774_p2),
    .dout(grp_fu_774_p3)
);

myFuncAccel4_mac_muladd_17ns_17ns_35ns_36_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 17 ),
    .din1_WIDTH( 17 ),
    .din2_WIDTH( 35 ),
    .dout_WIDTH( 36 ))
myFuncAccel4_mac_muladd_17ns_17ns_35ns_36_1_1_U11(
    .din0(grp_fu_782_p0),
    .din1(grp_fu_782_p1),
    .din2(grp_fu_782_p2),
    .dout(grp_fu_782_p3)
);

myFuncAccel4_mac_muladd_17ns_17ns_35ns_36_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 17 ),
    .din1_WIDTH( 17 ),
    .din2_WIDTH( 35 ),
    .dout_WIDTH( 36 ))
myFuncAccel4_mac_muladd_17ns_17ns_35ns_36_1_1_U12(
    .din0(grp_fu_790_p0),
    .din1(grp_fu_790_p1),
    .din2(grp_fu_790_p2),
    .dout(grp_fu_790_p3)
);

myFuncAccel4_mac_muladd_17ns_17ns_36ns_36_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 17 ),
    .din1_WIDTH( 17 ),
    .din2_WIDTH( 36 ),
    .dout_WIDTH( 36 ))
myFuncAccel4_mac_muladd_17ns_17ns_36ns_36_1_1_U13(
    .din0(grp_fu_798_p0),
    .din1(grp_fu_798_p1),
    .din2(grp_fu_798_p2),
    .dout(grp_fu_798_p3)
);

myFuncAccel4_mac_muladd_17ns_17ns_36ns_36_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 17 ),
    .din1_WIDTH( 17 ),
    .din2_WIDTH( 36 ),
    .dout_WIDTH( 36 ))
myFuncAccel4_mac_muladd_17ns_17ns_36ns_36_1_1_U14(
    .din0(grp_fu_806_p0),
    .din1(grp_fu_806_p1),
    .din2(grp_fu_806_p2),
    .dout(grp_fu_806_p3)
);

myFuncAccel4_mac_muladd_17ns_17ns_36ns_36_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 17 ),
    .din1_WIDTH( 17 ),
    .din2_WIDTH( 36 ),
    .dout_WIDTH( 36 ))
myFuncAccel4_mac_muladd_17ns_17ns_36ns_36_1_1_U15(
    .din0(grp_fu_814_p0),
    .din1(grp_fu_814_p1),
    .din2(grp_fu_814_p2),
    .dout(grp_fu_814_p3)
);

myFuncAccel4_mac_muladd_17ns_17ns_36ns_36_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 17 ),
    .din1_WIDTH( 17 ),
    .din2_WIDTH( 36 ),
    .dout_WIDTH( 36 ))
myFuncAccel4_mac_muladd_17ns_17ns_36ns_36_1_1_U16(
    .din0(grp_fu_822_p0),
    .din1(grp_fu_822_p1),
    .din2(grp_fu_822_p2),
    .dout(grp_fu_822_p3)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state2) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage3_subdone) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage3_subdone) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_1_reg_252 <= 32'd0;
    end else if (((icmp_ln33_reg_923 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        i_1_reg_252 <= i_reg_927;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln33_reg_923 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        data_out_V_addr_reg_943[31 : 2] <= zext_ln41_fu_348_p1[31 : 2];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        data_out_V_addr_reg_943_pp0_iter1_reg[31 : 2] <= data_out_V_addr_reg_943[31 : 2];
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        i_reg_927 <= i_fu_336_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        icmp_ln33_reg_923 <= icmp_ln33_fu_331_p2;
        icmp_ln33_reg_923_pp0_iter1_reg <= icmp_ln33_reg_923;
        icmp_ln33_reg_923_pp0_iter2_reg <= icmp_ln33_reg_923_pp0_iter1_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln33_reg_923_pp0_iter1_reg == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001))) begin
        p_trunc_ln708_2_reg_1008 <= p_trunc_ln708_2_fu_678_p3;
        p_trunc_ln708_5_reg_1013 <= p_trunc_ln708_5_fu_686_p3;
        p_trunc_ln708_8_reg_1018 <= p_trunc_ln708_8_fu_694_p3;
        p_trunc_ln708_s_reg_1023 <= p_trunc_ln708_s_fu_702_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((((icmp_ln33_reg_923 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)) | ((icmp_ln33_reg_923 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001)) | ((icmp_ln33_reg_923_pp0_iter1_reg == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage2_11001)) | ((icmp_ln33_reg_923_pp0_iter1_reg == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001)))) begin
        reg_263 <= data1_V_datain;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln33_fu_331_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        shl_ln41_reg_932[31 : 2] <= shl_ln41_fu_342_p2[31 : 2];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln33_reg_923_pp0_iter1_reg == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        tmp_10_reg_983 <= {{grp_fu_758_p3[34:2]}};
        tmp_3_reg_968 <= {{grp_fu_734_p3[34:2]}};
        tmp_6_reg_973 <= {{grp_fu_742_p3[34:2]}};
        tmp_9_reg_978 <= {{grp_fu_750_p3[34:2]}};
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln33_reg_923_pp0_iter1_reg == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001))) begin
        tmp_11_reg_1003 <= {{grp_fu_790_p3[35:2]}};
        tmp_4_reg_988 <= {{grp_fu_766_p3[35:2]}};
        tmp_7_reg_993 <= {{grp_fu_774_p3[35:2]}};
        tmp_s_reg_998 <= {{grp_fu_782_p3[35:2]}};
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln33_reg_923 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tmp_1_reg_963 <= {{mul_ln1118_12_fu_728_p2[33:2]}};
        tmp_2_reg_948 <= {{mul_ln1118_fu_710_p2[33:2]}};
        tmp_5_reg_953 <= {{mul_ln1118_4_fu_716_p2[33:2]}};
        tmp_8_reg_958 <= {{mul_ln1118_8_fu_722_p2[33:2]}};
    end
end

always @ (*) begin
    if ((icmp_ln33_fu_331_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln33_reg_923 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_i_1_phi_fu_256_p4 = i_reg_927;
    end else begin
        ap_phi_mux_i_1_phi_fu_256_p4 = i_1_reg_252;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln33_reg_923 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        data1_V_req_write = 1'b1;
    end else begin
        data1_V_req_write = 1'b0;
    end
end

always @ (*) begin
    if ((((icmp_ln33_reg_923 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)) | ((icmp_ln33_reg_923 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001)) | ((icmp_ln33_reg_923_pp0_iter1_reg == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage2_11001)) | ((icmp_ln33_reg_923_pp0_iter1_reg == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001)))) begin
        data1_V_rsp_read = 1'b1;
    end else begin
        data1_V_rsp_read = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter2 == 1'b1)) begin
        if ((1'b1 == ap_condition_764)) begin
            data_out_V_dataout = p_trunc_ln708_s_reg_1023;
        end else if ((1'b1 == ap_condition_760)) begin
            data_out_V_dataout = p_trunc_ln708_8_reg_1018;
        end else if ((1'b1 == ap_condition_756)) begin
            data_out_V_dataout = p_trunc_ln708_5_reg_1013;
        end else if ((1'b1 == ap_condition_752)) begin
            data_out_V_dataout = p_trunc_ln708_2_reg_1008;
        end else begin
            data_out_V_dataout = 'bx;
        end
    end else begin
        data_out_V_dataout = 'bx;
    end
end

always @ (*) begin
    if ((((icmp_ln33_reg_923_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)) | ((icmp_ln33_reg_923_pp0_iter2_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001)) | ((icmp_ln33_reg_923_pp0_iter2_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001)) | ((icmp_ln33_reg_923_pp0_iter2_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001)))) begin
        data_out_V_req_din = 1'b1;
    end else begin
        data_out_V_req_din = 1'b0;
    end
end

always @ (*) begin
    if ((((icmp_ln33_reg_923_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)) | ((icmp_ln33_reg_923_pp0_iter2_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001)) | ((icmp_ln33_reg_923_pp0_iter2_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001)) | ((icmp_ln33_reg_923_pp0_iter2_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001)))) begin
        data_out_V_req_write = 1'b1;
    end else begin
        data_out_V_req_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((1'b0 == ap_block_pp0_stage0_subdone) & (icmp_ln33_fu_331_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (icmp_ln33_fu_331_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_pp0_stage2 : begin
            if ((1'b0 == ap_block_pp0_stage2_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end
        end
        ap_ST_fsm_pp0_stage3 : begin
            if ((~((1'b0 == ap_block_pp0_stage3_subdone) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter1 == 1'b0)) & (1'b0 == ap_block_pp0_stage3_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((1'b0 == ap_block_pp0_stage3_subdone) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign and_ln52_1_fu_666_p2 = (icmp_ln1494_fu_592_p2 & icmp_ln1494_3_fu_655_p2);

assign and_ln52_2_fu_672_p2 = (and_ln52_fu_660_p2 & and_ln52_1_fu_666_p2);

assign and_ln52_fu_660_p2 = (icmp_ln1494_2_fu_634_p2 & icmp_ln1494_1_fu_613_p2);

assign and_ln728_1_fu_428_p3 = {{tmp_5_reg_953}, {2'd0}};

assign and_ln728_2_fu_448_p3 = {{tmp_8_reg_958}, {2'd0}};

assign and_ln728_3_fu_468_p3 = {{tmp_1_reg_963}, {2'd0}};

assign and_ln_fu_404_p3 = {{tmp_2_reg_948}, {2'd0}};

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_pp0_stage2 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_pp0_stage3 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd5];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((icmp_ln33_reg_923_pp0_iter1_reg == 1'd0) & (data_out_V_req_full_n == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((icmp_ln33_reg_923 == 1'd0) & (data1_V_rsp_empty_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((icmp_ln33_reg_923_pp0_iter1_reg == 1'd0) & (data_out_V_req_full_n == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((icmp_ln33_reg_923 == 1'd0) & (data1_V_rsp_empty_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage1_11001 = (((icmp_ln33_reg_923_pp0_iter2_reg == 1'd0) & (data_out_V_req_full_n == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((icmp_ln33_reg_923_pp0_iter1_reg == 1'd0) & (data1_V_rsp_empty_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage1_subdone = (((icmp_ln33_reg_923_pp0_iter2_reg == 1'd0) & (data_out_V_req_full_n == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((icmp_ln33_reg_923_pp0_iter1_reg == 1'd0) & (data1_V_rsp_empty_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end

assign ap_block_pp0_stage2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage2_11001 = (((icmp_ln33_reg_923_pp0_iter2_reg == 1'd0) & (data_out_V_req_full_n == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((icmp_ln33_reg_923_pp0_iter1_reg == 1'd0) & (data1_V_rsp_empty_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage2_subdone = (((icmp_ln33_reg_923_pp0_iter2_reg == 1'd0) & (data_out_V_req_full_n == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((icmp_ln33_reg_923_pp0_iter1_reg == 1'd0) & (data1_V_rsp_empty_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end

assign ap_block_pp0_stage3 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage3_11001 = (((icmp_ln33_reg_923_pp0_iter2_reg == 1'd0) & (data_out_V_req_full_n == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((icmp_ln33_reg_923 == 1'd0) & (data1_V_rsp_empty_n == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage3_subdone = (((icmp_ln33_reg_923_pp0_iter2_reg == 1'd0) & (data_out_V_req_full_n == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((icmp_ln33_reg_923 == 1'd0) & (data1_V_rsp_empty_n == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1)));
end

always @ (*) begin
    ap_block_state10_pp0_stage0_iter2 = ((icmp_ln33_reg_923_pp0_iter1_reg == 1'd0) & (data_out_V_req_full_n == 1'b0));
end

always @ (*) begin
    ap_block_state11_pp0_stage1_iter2 = ((icmp_ln33_reg_923_pp0_iter2_reg == 1'd0) & (data_out_V_req_full_n == 1'b0));
end

always @ (*) begin
    ap_block_state12_pp0_stage2_iter2 = ((icmp_ln33_reg_923_pp0_iter2_reg == 1'd0) & (data_out_V_req_full_n == 1'b0));
end

always @ (*) begin
    ap_block_state13_pp0_stage3_iter2 = ((icmp_ln33_reg_923_pp0_iter2_reg == 1'd0) & (data_out_V_req_full_n == 1'b0));
end

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage2_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state5_pp0_stage3_iter0 = ((icmp_ln33_reg_923 == 1'd0) & (data1_V_rsp_empty_n == 1'b0));
end

always @ (*) begin
    ap_block_state6_pp0_stage0_iter1 = ((icmp_ln33_reg_923 == 1'd0) & (data1_V_rsp_empty_n == 1'b0));
end

always @ (*) begin
    ap_block_state7_pp0_stage1_iter1 = ((icmp_ln33_reg_923_pp0_iter1_reg == 1'd0) & (data1_V_rsp_empty_n == 1'b0));
end

always @ (*) begin
    ap_block_state8_pp0_stage2_iter1 = ((icmp_ln33_reg_923_pp0_iter1_reg == 1'd0) & (data1_V_rsp_empty_n == 1'b0));
end

assign ap_block_state9_pp0_stage3_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_condition_752 = ((icmp_ln33_reg_923_pp0_iter1_reg == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001));
end

always @ (*) begin
    ap_condition_756 = ((icmp_ln33_reg_923_pp0_iter2_reg == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001));
end

always @ (*) begin
    ap_condition_760 = ((icmp_ln33_reg_923_pp0_iter2_reg == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001));
end

always @ (*) begin
    ap_condition_764 = ((icmp_ln33_reg_923_pp0_iter2_reg == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign data1_V_address = zext_ln41_fu_348_p1;

assign data1_V_dataout = 17'd0;

assign data1_V_req_din = 1'b0;

assign data1_V_size = 32'd4;

assign data_out_V_address = data_out_V_addr_reg_943_pp0_iter1_reg;

assign data_out_V_rsp_read = 1'b0;

assign data_out_V_size = 32'd4;

assign grp_fu_734_p0 = grp_fu_734_p00;

assign grp_fu_734_p00 = data0_1_V;

assign grp_fu_734_p1 = zext_ln1118_1_fu_411_p1;

assign grp_fu_734_p2 = grp_fu_734_p20;

assign grp_fu_734_p20 = and_ln_fu_404_p3;

assign grp_fu_742_p0 = grp_fu_742_p00;

assign grp_fu_742_p00 = data0_5_V;

assign grp_fu_742_p1 = zext_ln1118_1_fu_411_p1;

assign grp_fu_742_p2 = grp_fu_742_p20;

assign grp_fu_742_p20 = and_ln728_1_fu_428_p3;

assign grp_fu_750_p0 = grp_fu_750_p00;

assign grp_fu_750_p00 = data0_9_V;

assign grp_fu_750_p1 = zext_ln1118_1_fu_411_p1;

assign grp_fu_750_p2 = grp_fu_750_p20;

assign grp_fu_750_p20 = and_ln728_2_fu_448_p3;

assign grp_fu_758_p0 = grp_fu_758_p00;

assign grp_fu_758_p00 = data0_13_V;

assign grp_fu_758_p1 = zext_ln1118_1_fu_411_p1;

assign grp_fu_758_p2 = grp_fu_758_p20;

assign grp_fu_758_p20 = and_ln728_3_fu_468_p3;

assign grp_fu_766_p0 = grp_fu_766_p00;

assign grp_fu_766_p00 = data0_2_V;

assign grp_fu_766_p1 = zext_ln1118_2_fu_488_p1;

assign grp_fu_766_p2 = grp_fu_766_p20;

assign grp_fu_766_p20 = shl_ln1_fu_492_p3;

assign grp_fu_774_p0 = grp_fu_774_p00;

assign grp_fu_774_p00 = data0_6_V;

assign grp_fu_774_p1 = zext_ln1118_2_fu_488_p1;

assign grp_fu_774_p2 = grp_fu_774_p20;

assign grp_fu_774_p20 = shl_ln728_2_fu_512_p3;

assign grp_fu_782_p0 = grp_fu_782_p00;

assign grp_fu_782_p00 = data0_10_V;

assign grp_fu_782_p1 = zext_ln1118_2_fu_488_p1;

assign grp_fu_782_p2 = grp_fu_782_p20;

assign grp_fu_782_p20 = shl_ln728_4_fu_532_p3;

assign grp_fu_790_p0 = grp_fu_790_p00;

assign grp_fu_790_p00 = data0_14_V;

assign grp_fu_790_p1 = zext_ln1118_2_fu_488_p1;

assign grp_fu_790_p2 = grp_fu_790_p20;

assign grp_fu_790_p20 = shl_ln728_6_fu_552_p3;

assign grp_fu_798_p0 = grp_fu_798_p00;

assign grp_fu_798_p00 = data0_3_V;

assign grp_fu_798_p1 = zext_ln1118_3_fu_572_p1;

assign grp_fu_798_p2 = {{tmp_4_reg_988}, {2'd0}};

assign grp_fu_806_p0 = grp_fu_806_p00;

assign grp_fu_806_p00 = data0_7_V;

assign grp_fu_806_p1 = zext_ln1118_3_fu_572_p1;

assign grp_fu_806_p2 = {{tmp_7_reg_993}, {2'd0}};

assign grp_fu_814_p0 = grp_fu_814_p00;

assign grp_fu_814_p00 = data0_11_V;

assign grp_fu_814_p1 = zext_ln1118_3_fu_572_p1;

assign grp_fu_814_p2 = {{tmp_s_reg_998}, {2'd0}};

assign grp_fu_822_p0 = grp_fu_822_p00;

assign grp_fu_822_p00 = data0_15_V;

assign grp_fu_822_p1 = zext_ln1118_3_fu_572_p1;

assign grp_fu_822_p2 = {{tmp_11_reg_1003}, {2'd0}};

assign i_fu_336_p2 = (ap_phi_mux_i_1_phi_fu_256_p4 + 32'd1);

assign icmp_ln1494_1_fu_613_p2 = ((trunc_ln708_5_fu_604_p4 > threshold_V) ? 1'b1 : 1'b0);

assign icmp_ln1494_2_fu_634_p2 = ((trunc_ln708_8_fu_625_p4 > threshold_V) ? 1'b1 : 1'b0);

assign icmp_ln1494_3_fu_655_p2 = ((trunc_ln708_s_fu_646_p4 > threshold_V) ? 1'b1 : 1'b0);

assign icmp_ln1494_fu_592_p2 = ((trunc_ln708_2_fu_583_p4 > threshold_V) ? 1'b1 : 1'b0);

assign icmp_ln33_fu_331_p2 = ((ap_phi_mux_i_1_phi_fu_256_p4 == size) ? 1'b1 : 1'b0);

assign mul_ln1118_12_fu_728_p0 = mul_ln1118_12_fu_728_p00;

assign mul_ln1118_12_fu_728_p00 = data0_12_V;

assign mul_ln1118_12_fu_728_p1 = zext_ln1118_fu_364_p1;

assign mul_ln1118_4_fu_716_p0 = mul_ln1118_4_fu_716_p00;

assign mul_ln1118_4_fu_716_p00 = data0_4_V;

assign mul_ln1118_4_fu_716_p1 = zext_ln1118_fu_364_p1;

assign mul_ln1118_8_fu_722_p0 = mul_ln1118_8_fu_722_p00;

assign mul_ln1118_8_fu_722_p00 = data0_8_V;

assign mul_ln1118_8_fu_722_p1 = zext_ln1118_fu_364_p1;

assign mul_ln1118_fu_710_p0 = mul_ln1118_fu_710_p00;

assign mul_ln1118_fu_710_p00 = data0_0_V;

assign mul_ln1118_fu_710_p1 = zext_ln1118_fu_364_p1;

assign p_trunc_ln708_2_fu_678_p3 = ((and_ln52_2_fu_672_p2[0:0] === 1'b1) ? 34'd0 : trunc_ln708_2_fu_583_p4);

assign p_trunc_ln708_5_fu_686_p3 = ((and_ln52_2_fu_672_p2[0:0] === 1'b1) ? 34'd0 : trunc_ln708_5_fu_604_p4);

assign p_trunc_ln708_8_fu_694_p3 = ((and_ln52_2_fu_672_p2[0:0] === 1'b1) ? 34'd0 : trunc_ln708_8_fu_625_p4);

assign p_trunc_ln708_s_fu_702_p3 = ((and_ln52_2_fu_672_p2[0:0] === 1'b1) ? 34'd0 : trunc_ln708_s_fu_646_p4);

assign shl_ln1_fu_492_p3 = {{tmp_3_reg_968}, {2'd0}};

assign shl_ln41_fu_342_p2 = ap_phi_mux_i_1_phi_fu_256_p4 << 32'd2;

assign shl_ln728_2_fu_512_p3 = {{tmp_6_reg_973}, {2'd0}};

assign shl_ln728_4_fu_532_p3 = {{tmp_9_reg_978}, {2'd0}};

assign shl_ln728_6_fu_552_p3 = {{tmp_10_reg_983}, {2'd0}};

assign trunc_ln708_2_fu_583_p4 = {{grp_fu_798_p3[35:2]}};

assign trunc_ln708_5_fu_604_p4 = {{grp_fu_806_p3[35:2]}};

assign trunc_ln708_8_fu_625_p4 = {{grp_fu_814_p3[35:2]}};

assign trunc_ln708_s_fu_646_p4 = {{grp_fu_822_p3[35:2]}};

assign zext_ln1118_1_fu_411_p1 = reg_263;

assign zext_ln1118_2_fu_488_p1 = reg_263;

assign zext_ln1118_3_fu_572_p1 = reg_263;

assign zext_ln1118_fu_364_p1 = reg_263;

assign zext_ln41_fu_348_p1 = shl_ln41_reg_932;

always @ (posedge ap_clk) begin
    shl_ln41_reg_932[1:0] <= 2'b00;
    data_out_V_addr_reg_943[1:0] <= 2'b00;
    data_out_V_addr_reg_943_pp0_iter1_reg[1:0] <= 2'b00;
end

endmodule //myFuncAccel4
