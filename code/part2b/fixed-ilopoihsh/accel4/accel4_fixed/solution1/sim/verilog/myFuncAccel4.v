// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="myFuncAccel4,hls_ip_2019_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z020-clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.868000,HLS_SYN_LAT=403,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=16,HLS_SYN_FF=644,HLS_SYN_LUT=391,HLS_VERSION=2019_1}" *)

module myFuncAccel4 (
        ap_clk,
        ap_rst_n,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        size,
        dim,
        threshold_V,
        data0_0_V,
        data0_1_V,
        data0_2_V,
        data0_3_V,
        data0_4_V,
        data0_5_V,
        data0_6_V,
        data0_7_V,
        data0_8_V,
        data0_9_V,
        data0_10_V,
        data0_11_V,
        data0_12_V,
        data0_13_V,
        data0_14_V,
        data0_15_V,
        my_input1_V_TDATA,
        my_input1_V_TVALID,
        my_input1_V_TREADY,
        my_output_V_TDATA,
        my_output_V_TVALID,
        my_output_V_TREADY
);

parameter    ap_ST_fsm_state1 = 6'd1;
parameter    ap_ST_fsm_pp0_stage0 = 6'd2;
parameter    ap_ST_fsm_pp0_stage1 = 6'd4;
parameter    ap_ST_fsm_pp0_stage2 = 6'd8;
parameter    ap_ST_fsm_pp0_stage3 = 6'd16;
parameter    ap_ST_fsm_state8 = 6'd32;

input   ap_clk;
input   ap_rst_n;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] size;
input  [31:0] dim;
input  [33:0] threshold_V;
input  [16:0] data0_0_V;
input  [16:0] data0_1_V;
input  [16:0] data0_2_V;
input  [16:0] data0_3_V;
input  [16:0] data0_4_V;
input  [16:0] data0_5_V;
input  [16:0] data0_6_V;
input  [16:0] data0_7_V;
input  [16:0] data0_8_V;
input  [16:0] data0_9_V;
input  [16:0] data0_10_V;
input  [16:0] data0_11_V;
input  [16:0] data0_12_V;
input  [16:0] data0_13_V;
input  [16:0] data0_14_V;
input  [16:0] data0_15_V;
input  [23:0] my_input1_V_TDATA;
input   my_input1_V_TVALID;
output   my_input1_V_TREADY;
output  [39:0] my_output_V_TDATA;
output   my_output_V_TVALID;
input   my_output_V_TREADY;

reg ap_done;
reg ap_idle;
reg ap_ready;

 reg    ap_rst_n_inv;
(* fsm_encoding = "none" *) reg   [5:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [23:0] my_input1_V_0_data_out;
wire    my_input1_V_0_vld_in;
wire    my_input1_V_0_vld_out;
wire    my_input1_V_0_ack_in;
reg    my_input1_V_0_ack_out;
reg   [23:0] my_input1_V_0_payload_A;
reg   [23:0] my_input1_V_0_payload_B;
reg    my_input1_V_0_sel_rd;
reg    my_input1_V_0_sel_wr;
wire    my_input1_V_0_sel;
wire    my_input1_V_0_load_A;
wire    my_input1_V_0_load_B;
reg   [1:0] my_input1_V_0_state;
wire    my_input1_V_0_state_cmp_full;
reg   [39:0] my_output_V_1_data_out;
reg    my_output_V_1_vld_in;
wire    my_output_V_1_vld_out;
wire    my_output_V_1_ack_in;
wire    my_output_V_1_ack_out;
reg   [39:0] my_output_V_1_payload_A;
reg   [39:0] my_output_V_1_payload_B;
reg    my_output_V_1_sel_rd;
reg    my_output_V_1_sel_wr;
wire    my_output_V_1_sel;
wire    my_output_V_1_load_A;
wire    my_output_V_1_load_B;
reg   [1:0] my_output_V_1_state;
wire    my_output_V_1_state_cmp_full;
reg    my_input1_V_TDATA_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_pp0_stage0;
wire   [0:0] icmp_ln33_fu_318_p2;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_pp0_stage1;
reg   [0:0] icmp_ln33_reg_910;
wire    ap_CS_fsm_pp0_stage2;
wire    ap_block_pp0_stage2;
wire    ap_CS_fsm_pp0_stage3;
wire    ap_block_pp0_stage3;
reg    my_output_V_TDATA_blk_n;
reg    ap_enable_reg_pp0_iter1;
reg   [0:0] icmp_ln33_reg_910_pp0_iter1_reg;
reg   [31:0] i_1_reg_243;
reg    ap_block_state2_pp0_stage0_iter0;
wire    ap_block_state6_pp0_stage0_iter1;
reg    ap_block_state6_io;
reg    ap_block_pp0_stage0_11001;
wire   [31:0] i_fu_323_p2;
reg   [31:0] i_reg_914;
reg   [31:0] tmp_1_reg_919;
reg   [31:0] tmp_4_reg_924;
reg   [31:0] tmp_7_reg_929;
reg   [31:0] tmp_s_reg_934;
reg   [32:0] tmp_2_reg_939;
reg    ap_block_state3_pp0_stage1_iter0;
wire    ap_block_state7_pp0_stage1_iter1;
reg    ap_block_state7_io;
reg    ap_block_pp0_stage1_11001;
reg   [32:0] tmp_5_reg_944;
reg   [32:0] tmp_8_reg_949;
reg   [32:0] tmp_10_reg_954;
reg   [33:0] tmp_3_reg_959;
reg    ap_block_state4_pp0_stage2_iter0;
reg    ap_block_pp0_stage2_11001;
reg   [33:0] tmp_6_reg_964;
reg   [33:0] tmp_9_reg_969;
reg   [33:0] tmp_11_reg_974;
wire   [0:0] icmp_ln1494_fu_573_p2;
reg   [0:0] icmp_ln1494_reg_979;
reg    ap_block_state5_pp0_stage3_iter0;
reg    ap_block_pp0_stage3_11001;
wire   [0:0] icmp_ln1494_1_fu_594_p2;
reg   [0:0] icmp_ln1494_1_reg_984;
wire   [0:0] icmp_ln1494_2_fu_615_p2;
reg   [0:0] icmp_ln1494_2_reg_989;
wire   [33:0] trunc_ln708_s_fu_627_p4;
reg   [33:0] trunc_ln708_s_reg_994;
wire   [0:0] icmp_ln1494_3_fu_636_p2;
reg   [0:0] icmp_ln1494_3_reg_999;
wire   [39:0] zext_ln356_fu_692_p1;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
reg    ap_block_pp0_stage3_subdone;
reg    ap_block_pp0_stage1_subdone;
reg   [31:0] ap_phi_mux_i_1_phi_fu_247_p4;
reg    ap_block_pp0_stage0_01001;
wire   [16:0] trunc_ln356_fu_329_p1;
wire   [33:0] mul_ln1118_fu_697_p2;
wire   [33:0] mul_ln1118_4_fu_703_p2;
wire   [33:0] mul_ln1118_8_fu_709_p2;
wire   [33:0] mul_ln1118_12_fu_715_p2;
wire   [16:0] trunc_ln356_1_fu_373_p1;
wire   [33:0] and_ln_fu_377_p3;
wire   [34:0] grp_fu_721_p3;
wire   [33:0] and_ln728_1_fu_401_p3;
wire   [34:0] grp_fu_729_p3;
wire   [33:0] and_ln728_2_fu_421_p3;
wire   [34:0] grp_fu_737_p3;
wire   [33:0] and_ln728_3_fu_441_p3;
wire   [34:0] grp_fu_745_p3;
wire   [16:0] trunc_ln356_2_fu_461_p1;
wire   [34:0] shl_ln_fu_469_p3;
wire   [35:0] grp_fu_753_p3;
wire   [34:0] shl_ln728_2_fu_489_p3;
wire   [35:0] grp_fu_761_p3;
wire   [34:0] shl_ln728_4_fu_509_p3;
wire   [35:0] grp_fu_769_p3;
wire   [34:0] shl_ln728_6_fu_529_p3;
wire   [35:0] grp_fu_777_p3;
wire   [16:0] trunc_ln356_3_fu_549_p1;
wire   [35:0] grp_fu_785_p3;
wire   [33:0] trunc_ln708_2_fu_564_p4;
wire   [35:0] grp_fu_793_p3;
wire   [33:0] trunc_ln708_5_fu_585_p4;
wire   [35:0] grp_fu_801_p3;
wire   [33:0] trunc_ln708_8_fu_606_p4;
wire   [35:0] grp_fu_809_p3;
wire   [1:0] zext_ln1118_4_fu_641_p1;
wire   [1:0] zext_ln1118_5_fu_644_p1;
wire   [1:0] add_ln52_fu_653_p2;
wire   [1:0] zext_ln52_fu_650_p1;
wire   [1:0] zext_ln1118_6_fu_647_p1;
wire   [1:0] add_ln52_1_fu_663_p2;
wire   [2:0] zext_ln52_1_fu_659_p1;
wire   [2:0] zext_ln52_2_fu_669_p1;
wire   [2:0] add_ln52_2_fu_673_p2;
wire   [0:0] icmp_ln54_fu_679_p2;
wire   [33:0] select_ln54_fu_685_p3;
wire   [16:0] mul_ln1118_fu_697_p0;
wire   [16:0] mul_ln1118_fu_697_p1;
wire   [33:0] zext_ln1118_fu_333_p1;
wire   [16:0] mul_ln1118_4_fu_703_p0;
wire   [16:0] mul_ln1118_4_fu_703_p1;
wire   [16:0] mul_ln1118_8_fu_709_p0;
wire   [16:0] mul_ln1118_8_fu_709_p1;
wire   [16:0] mul_ln1118_12_fu_715_p0;
wire   [16:0] mul_ln1118_12_fu_715_p1;
wire   [16:0] grp_fu_721_p0;
wire   [16:0] grp_fu_721_p1;
wire   [33:0] zext_ln1118_1_fu_384_p1;
wire   [33:0] grp_fu_721_p2;
wire   [16:0] grp_fu_729_p0;
wire   [16:0] grp_fu_729_p1;
wire   [33:0] grp_fu_729_p2;
wire   [16:0] grp_fu_737_p0;
wire   [16:0] grp_fu_737_p1;
wire   [33:0] grp_fu_737_p2;
wire   [16:0] grp_fu_745_p0;
wire   [16:0] grp_fu_745_p1;
wire   [33:0] grp_fu_745_p2;
wire   [16:0] grp_fu_753_p0;
wire   [16:0] grp_fu_753_p1;
wire   [33:0] zext_ln1118_2_fu_465_p1;
wire   [34:0] grp_fu_753_p2;
wire   [16:0] grp_fu_761_p0;
wire   [16:0] grp_fu_761_p1;
wire   [34:0] grp_fu_761_p2;
wire   [16:0] grp_fu_769_p0;
wire   [16:0] grp_fu_769_p1;
wire   [34:0] grp_fu_769_p2;
wire   [16:0] grp_fu_777_p0;
wire   [16:0] grp_fu_777_p1;
wire   [34:0] grp_fu_777_p2;
wire   [16:0] grp_fu_785_p0;
wire   [16:0] grp_fu_785_p1;
wire   [33:0] zext_ln1118_3_fu_553_p1;
wire   [35:0] grp_fu_785_p2;
wire   [16:0] grp_fu_793_p0;
wire   [16:0] grp_fu_793_p1;
wire   [35:0] grp_fu_793_p2;
wire   [16:0] grp_fu_801_p0;
wire   [16:0] grp_fu_801_p1;
wire   [35:0] grp_fu_801_p2;
wire   [16:0] grp_fu_809_p0;
wire   [16:0] grp_fu_809_p1;
wire   [35:0] grp_fu_809_p2;
wire    ap_CS_fsm_state8;
reg    ap_block_state8;
reg   [5:0] ap_NS_fsm;
reg    ap_block_pp0_stage2_subdone;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire   [33:0] grp_fu_721_p00;
wire   [34:0] grp_fu_721_p20;
wire   [33:0] grp_fu_729_p00;
wire   [34:0] grp_fu_729_p20;
wire   [33:0] grp_fu_737_p00;
wire   [34:0] grp_fu_737_p20;
wire   [33:0] grp_fu_745_p00;
wire   [34:0] grp_fu_745_p20;
wire   [33:0] grp_fu_753_p00;
wire   [35:0] grp_fu_753_p20;
wire   [33:0] grp_fu_761_p00;
wire   [35:0] grp_fu_761_p20;
wire   [33:0] grp_fu_769_p00;
wire   [35:0] grp_fu_769_p20;
wire   [33:0] grp_fu_777_p00;
wire   [35:0] grp_fu_777_p20;
wire   [33:0] grp_fu_785_p00;
wire   [33:0] grp_fu_793_p00;
wire   [33:0] grp_fu_801_p00;
wire   [33:0] grp_fu_809_p00;
wire   [33:0] mul_ln1118_12_fu_715_p00;
wire   [33:0] mul_ln1118_4_fu_703_p00;
wire   [33:0] mul_ln1118_8_fu_709_p00;
wire   [33:0] mul_ln1118_fu_697_p00;

// power-on initialization
initial begin
#0 ap_CS_fsm = 6'd1;
#0 my_input1_V_0_sel_rd = 1'b0;
#0 my_input1_V_0_sel_wr = 1'b0;
#0 my_input1_V_0_state = 2'd0;
#0 my_output_V_1_sel_rd = 1'b0;
#0 my_output_V_1_sel_wr = 1'b0;
#0 my_output_V_1_state = 2'd0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
end

myFuncAccel4_mul_mul_17ns_17ns_34_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 17 ),
    .din1_WIDTH( 17 ),
    .dout_WIDTH( 34 ))
myFuncAccel4_mul_mul_17ns_17ns_34_1_1_U1(
    .din0(mul_ln1118_fu_697_p0),
    .din1(mul_ln1118_fu_697_p1),
    .dout(mul_ln1118_fu_697_p2)
);

myFuncAccel4_mul_mul_17ns_17ns_34_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 17 ),
    .din1_WIDTH( 17 ),
    .dout_WIDTH( 34 ))
myFuncAccel4_mul_mul_17ns_17ns_34_1_1_U2(
    .din0(mul_ln1118_4_fu_703_p0),
    .din1(mul_ln1118_4_fu_703_p1),
    .dout(mul_ln1118_4_fu_703_p2)
);

myFuncAccel4_mul_mul_17ns_17ns_34_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 17 ),
    .din1_WIDTH( 17 ),
    .dout_WIDTH( 34 ))
myFuncAccel4_mul_mul_17ns_17ns_34_1_1_U3(
    .din0(mul_ln1118_8_fu_709_p0),
    .din1(mul_ln1118_8_fu_709_p1),
    .dout(mul_ln1118_8_fu_709_p2)
);

myFuncAccel4_mul_mul_17ns_17ns_34_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 17 ),
    .din1_WIDTH( 17 ),
    .dout_WIDTH( 34 ))
myFuncAccel4_mul_mul_17ns_17ns_34_1_1_U4(
    .din0(mul_ln1118_12_fu_715_p0),
    .din1(mul_ln1118_12_fu_715_p1),
    .dout(mul_ln1118_12_fu_715_p2)
);

myFuncAccel4_mac_muladd_17ns_17ns_34ns_35_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 17 ),
    .din1_WIDTH( 17 ),
    .din2_WIDTH( 34 ),
    .dout_WIDTH( 35 ))
myFuncAccel4_mac_muladd_17ns_17ns_34ns_35_1_1_U5(
    .din0(grp_fu_721_p0),
    .din1(grp_fu_721_p1),
    .din2(grp_fu_721_p2),
    .dout(grp_fu_721_p3)
);

myFuncAccel4_mac_muladd_17ns_17ns_34ns_35_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 17 ),
    .din1_WIDTH( 17 ),
    .din2_WIDTH( 34 ),
    .dout_WIDTH( 35 ))
myFuncAccel4_mac_muladd_17ns_17ns_34ns_35_1_1_U6(
    .din0(grp_fu_729_p0),
    .din1(grp_fu_729_p1),
    .din2(grp_fu_729_p2),
    .dout(grp_fu_729_p3)
);

myFuncAccel4_mac_muladd_17ns_17ns_34ns_35_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 17 ),
    .din1_WIDTH( 17 ),
    .din2_WIDTH( 34 ),
    .dout_WIDTH( 35 ))
myFuncAccel4_mac_muladd_17ns_17ns_34ns_35_1_1_U7(
    .din0(grp_fu_737_p0),
    .din1(grp_fu_737_p1),
    .din2(grp_fu_737_p2),
    .dout(grp_fu_737_p3)
);

myFuncAccel4_mac_muladd_17ns_17ns_34ns_35_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 17 ),
    .din1_WIDTH( 17 ),
    .din2_WIDTH( 34 ),
    .dout_WIDTH( 35 ))
myFuncAccel4_mac_muladd_17ns_17ns_34ns_35_1_1_U8(
    .din0(grp_fu_745_p0),
    .din1(grp_fu_745_p1),
    .din2(grp_fu_745_p2),
    .dout(grp_fu_745_p3)
);

myFuncAccel4_mac_muladd_17ns_17ns_35ns_36_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 17 ),
    .din1_WIDTH( 17 ),
    .din2_WIDTH( 35 ),
    .dout_WIDTH( 36 ))
myFuncAccel4_mac_muladd_17ns_17ns_35ns_36_1_1_U9(
    .din0(grp_fu_753_p0),
    .din1(grp_fu_753_p1),
    .din2(grp_fu_753_p2),
    .dout(grp_fu_753_p3)
);

myFuncAccel4_mac_muladd_17ns_17ns_35ns_36_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 17 ),
    .din1_WIDTH( 17 ),
    .din2_WIDTH( 35 ),
    .dout_WIDTH( 36 ))
myFuncAccel4_mac_muladd_17ns_17ns_35ns_36_1_1_U10(
    .din0(grp_fu_761_p0),
    .din1(grp_fu_761_p1),
    .din2(grp_fu_761_p2),
    .dout(grp_fu_761_p3)
);

myFuncAccel4_mac_muladd_17ns_17ns_35ns_36_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 17 ),
    .din1_WIDTH( 17 ),
    .din2_WIDTH( 35 ),
    .dout_WIDTH( 36 ))
myFuncAccel4_mac_muladd_17ns_17ns_35ns_36_1_1_U11(
    .din0(grp_fu_769_p0),
    .din1(grp_fu_769_p1),
    .din2(grp_fu_769_p2),
    .dout(grp_fu_769_p3)
);

myFuncAccel4_mac_muladd_17ns_17ns_35ns_36_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 17 ),
    .din1_WIDTH( 17 ),
    .din2_WIDTH( 35 ),
    .dout_WIDTH( 36 ))
myFuncAccel4_mac_muladd_17ns_17ns_35ns_36_1_1_U12(
    .din0(grp_fu_777_p0),
    .din1(grp_fu_777_p1),
    .din2(grp_fu_777_p2),
    .dout(grp_fu_777_p3)
);

myFuncAccel4_mac_muladd_17ns_17ns_36ns_36_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 17 ),
    .din1_WIDTH( 17 ),
    .din2_WIDTH( 36 ),
    .dout_WIDTH( 36 ))
myFuncAccel4_mac_muladd_17ns_17ns_36ns_36_1_1_U13(
    .din0(grp_fu_785_p0),
    .din1(grp_fu_785_p1),
    .din2(grp_fu_785_p2),
    .dout(grp_fu_785_p3)
);

myFuncAccel4_mac_muladd_17ns_17ns_36ns_36_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 17 ),
    .din1_WIDTH( 17 ),
    .din2_WIDTH( 36 ),
    .dout_WIDTH( 36 ))
myFuncAccel4_mac_muladd_17ns_17ns_36ns_36_1_1_U14(
    .din0(grp_fu_793_p0),
    .din1(grp_fu_793_p1),
    .din2(grp_fu_793_p2),
    .dout(grp_fu_793_p3)
);

myFuncAccel4_mac_muladd_17ns_17ns_36ns_36_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 17 ),
    .din1_WIDTH( 17 ),
    .din2_WIDTH( 36 ),
    .dout_WIDTH( 36 ))
myFuncAccel4_mac_muladd_17ns_17ns_36ns_36_1_1_U15(
    .din0(grp_fu_801_p0),
    .din1(grp_fu_801_p1),
    .din2(grp_fu_801_p2),
    .dout(grp_fu_801_p3)
);

myFuncAccel4_mac_muladd_17ns_17ns_36ns_36_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 17 ),
    .din1_WIDTH( 17 ),
    .din2_WIDTH( 36 ),
    .dout_WIDTH( 36 ))
myFuncAccel4_mac_muladd_17ns_17ns_36ns_36_1_1_U16(
    .din0(grp_fu_809_p0),
    .din1(grp_fu_809_p1),
    .din2(grp_fu_809_p2),
    .dout(grp_fu_809_p3)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state2) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((((1'b0 == ap_block_pp0_stage3_subdone) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        my_input1_V_0_sel_rd <= 1'b0;
    end else begin
        if (((my_input1_V_0_ack_out == 1'b1) & (my_input1_V_0_vld_out == 1'b1))) begin
            my_input1_V_0_sel_rd <= ~my_input1_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        my_input1_V_0_sel_wr <= 1'b0;
    end else begin
        if (((my_input1_V_0_ack_in == 1'b1) & (my_input1_V_0_vld_in == 1'b1))) begin
            my_input1_V_0_sel_wr <= ~my_input1_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        my_input1_V_0_state <= 2'd0;
    end else begin
        if ((((my_input1_V_0_state == 2'd2) & (my_input1_V_0_vld_in == 1'b0)) | ((my_input1_V_0_state == 2'd3) & (my_input1_V_0_vld_in == 1'b0) & (my_input1_V_0_ack_out == 1'b1)))) begin
            my_input1_V_0_state <= 2'd2;
        end else if ((((my_input1_V_0_state == 2'd1) & (my_input1_V_0_ack_out == 1'b0)) | ((my_input1_V_0_state == 2'd3) & (my_input1_V_0_ack_out == 1'b0) & (my_input1_V_0_vld_in == 1'b1)))) begin
            my_input1_V_0_state <= 2'd1;
        end else if (((~((my_input1_V_0_vld_in == 1'b0) & (my_input1_V_0_ack_out == 1'b1)) & ~((my_input1_V_0_ack_out == 1'b0) & (my_input1_V_0_vld_in == 1'b1)) & (my_input1_V_0_state == 2'd3)) | ((my_input1_V_0_state == 2'd1) & (my_input1_V_0_ack_out == 1'b1)) | ((my_input1_V_0_state == 2'd2) & (my_input1_V_0_vld_in == 1'b1)))) begin
            my_input1_V_0_state <= 2'd3;
        end else begin
            my_input1_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        my_output_V_1_sel_rd <= 1'b0;
    end else begin
        if (((my_output_V_1_ack_out == 1'b1) & (my_output_V_1_vld_out == 1'b1))) begin
            my_output_V_1_sel_rd <= ~my_output_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        my_output_V_1_sel_wr <= 1'b0;
    end else begin
        if (((my_output_V_1_ack_in == 1'b1) & (my_output_V_1_vld_in == 1'b1))) begin
            my_output_V_1_sel_wr <= ~my_output_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        my_output_V_1_state <= 2'd0;
    end else begin
        if ((((my_output_V_1_state == 2'd2) & (my_output_V_1_vld_in == 1'b0)) | ((my_output_V_1_state == 2'd3) & (my_output_V_1_vld_in == 1'b0) & (my_output_V_1_ack_out == 1'b1)))) begin
            my_output_V_1_state <= 2'd2;
        end else if ((((my_output_V_1_state == 2'd1) & (my_output_V_TREADY == 1'b0)) | ((my_output_V_1_state == 2'd3) & (my_output_V_TREADY == 1'b0) & (my_output_V_1_vld_in == 1'b1)))) begin
            my_output_V_1_state <= 2'd1;
        end else if (((~((my_output_V_1_vld_in == 1'b0) & (my_output_V_1_ack_out == 1'b1)) & ~((my_output_V_TREADY == 1'b0) & (my_output_V_1_vld_in == 1'b1)) & (my_output_V_1_state == 2'd3)) | ((my_output_V_1_state == 2'd1) & (my_output_V_1_ack_out == 1'b1)) | ((my_output_V_1_state == 2'd2) & (my_output_V_1_vld_in == 1'b1)))) begin
            my_output_V_1_state <= 2'd3;
        end else begin
            my_output_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_1_reg_243 <= 32'd0;
    end else if (((icmp_ln33_reg_910 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        i_1_reg_243 <= i_reg_914;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        i_reg_914 <= i_fu_323_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln33_reg_910 == 1'd0) & (1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        icmp_ln1494_1_reg_984 <= icmp_ln1494_1_fu_594_p2;
        icmp_ln1494_2_reg_989 <= icmp_ln1494_2_fu_615_p2;
        icmp_ln1494_3_reg_999 <= icmp_ln1494_3_fu_636_p2;
        icmp_ln1494_reg_979 <= icmp_ln1494_fu_573_p2;
        trunc_ln708_s_reg_994 <= {{grp_fu_809_p3[35:2]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln33_reg_910 <= icmp_ln33_fu_318_p2;
        icmp_ln33_reg_910_pp0_iter1_reg <= icmp_ln33_reg_910;
    end
end

always @ (posedge ap_clk) begin
    if ((my_input1_V_0_load_A == 1'b1)) begin
        my_input1_V_0_payload_A <= my_input1_V_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((my_input1_V_0_load_B == 1'b1)) begin
        my_input1_V_0_payload_B <= my_input1_V_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((my_output_V_1_load_A == 1'b1)) begin
        my_output_V_1_payload_A <= zext_ln356_fu_692_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((my_output_V_1_load_B == 1'b1)) begin
        my_output_V_1_payload_B <= zext_ln356_fu_692_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln33_reg_910 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        tmp_10_reg_954 <= {{grp_fu_745_p3[34:2]}};
        tmp_2_reg_939 <= {{grp_fu_721_p3[34:2]}};
        tmp_5_reg_944 <= {{grp_fu_729_p3[34:2]}};
        tmp_8_reg_949 <= {{grp_fu_737_p3[34:2]}};
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln33_reg_910 == 1'd0) & (1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        tmp_11_reg_974 <= {{grp_fu_777_p3[35:2]}};
        tmp_3_reg_959 <= {{grp_fu_753_p3[35:2]}};
        tmp_6_reg_964 <= {{grp_fu_761_p3[35:2]}};
        tmp_9_reg_969 <= {{grp_fu_769_p3[35:2]}};
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln33_fu_318_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        tmp_1_reg_919 <= {{mul_ln1118_fu_697_p2[33:2]}};
        tmp_4_reg_924 <= {{mul_ln1118_4_fu_703_p2[33:2]}};
        tmp_7_reg_929 <= {{mul_ln1118_8_fu_709_p2[33:2]}};
        tmp_s_reg_934 <= {{mul_ln1118_12_fu_715_p2[33:2]}};
    end
end

always @ (*) begin
    if ((icmp_ln33_fu_318_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if ((~((my_output_V_1_state == 2'd1) | ((my_output_V_1_state == 2'd3) & (my_output_V_TREADY == 1'b0))) & (1'b1 == ap_CS_fsm_state8))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln33_reg_910 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_phi_mux_i_1_phi_fu_247_p4 = i_reg_914;
    end else begin
        ap_phi_mux_i_1_phi_fu_247_p4 = i_1_reg_243;
    end
end

always @ (*) begin
    if ((~((my_output_V_1_state == 2'd1) | ((my_output_V_1_state == 2'd3) & (my_output_V_TREADY == 1'b0))) & (1'b1 == ap_CS_fsm_state8))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((((icmp_ln33_reg_910 == 1'd0) & (1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((icmp_ln33_reg_910 == 1'd0) & (1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((icmp_ln33_reg_910 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((icmp_ln33_fu_318_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        my_input1_V_0_ack_out = 1'b1;
    end else begin
        my_input1_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((my_input1_V_0_sel == 1'b1)) begin
        my_input1_V_0_data_out = my_input1_V_0_payload_B;
    end else begin
        my_input1_V_0_data_out = my_input1_V_0_payload_A;
    end
end

always @ (*) begin
    if ((((icmp_ln33_reg_910 == 1'd0) & (1'b0 == ap_block_pp0_stage3) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((icmp_ln33_reg_910 == 1'd0) & (1'b0 == ap_block_pp0_stage2) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((icmp_ln33_reg_910 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage1)) | ((icmp_ln33_fu_318_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0)))) begin
        my_input1_V_TDATA_blk_n = my_input1_V_0_state[1'd0];
    end else begin
        my_input1_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((my_output_V_1_sel == 1'b1)) begin
        my_output_V_1_data_out = my_output_V_1_payload_B;
    end else begin
        my_output_V_1_data_out = my_output_V_1_payload_A;
    end
end

always @ (*) begin
    if (((icmp_ln33_reg_910 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        my_output_V_1_vld_in = 1'b1;
    end else begin
        my_output_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((((icmp_ln33_reg_910_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1)) | ((icmp_ln33_reg_910 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0)))) begin
        my_output_V_TDATA_blk_n = my_output_V_1_state[1'd1];
    end else begin
        my_output_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((icmp_ln33_fu_318_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else if (((icmp_ln33_fu_318_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((~((1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b0)) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end else if (((1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_pp0_stage2 : begin
            if ((1'b0 == ap_block_pp0_stage2_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end
        end
        ap_ST_fsm_pp0_stage3 : begin
            if ((1'b0 == ap_block_pp0_stage3_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end
        end
        ap_ST_fsm_state8 : begin
            if ((~((my_output_V_1_state == 2'd1) | ((my_output_V_1_state == 2'd3) & (my_output_V_TREADY == 1'b0))) & (1'b1 == ap_CS_fsm_state8))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln52_1_fu_663_p2 = (zext_ln52_fu_650_p1 + zext_ln1118_6_fu_647_p1);

assign add_ln52_2_fu_673_p2 = (zext_ln52_1_fu_659_p1 + zext_ln52_2_fu_669_p1);

assign add_ln52_fu_653_p2 = (zext_ln1118_4_fu_641_p1 + zext_ln1118_5_fu_644_p1);

assign and_ln728_1_fu_401_p3 = {{tmp_4_reg_924}, {2'd0}};

assign and_ln728_2_fu_421_p3 = {{tmp_7_reg_929}, {2'd0}};

assign and_ln728_3_fu_441_p3 = {{tmp_s_reg_934}, {2'd0}};

assign and_ln_fu_377_p3 = {{tmp_1_reg_919}, {2'd0}};

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_pp0_stage2 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_pp0_stage3 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd5];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((icmp_ln33_fu_318_p2 == 1'd0) & (my_input1_V_0_vld_out == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((1'b1 == ap_block_state6_io) & (ap_enable_reg_pp0_iter1 == 1'b1)) | ((icmp_ln33_fu_318_p2 == 1'd0) & (my_input1_V_0_vld_out == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((1'b1 == ap_block_state6_io) & (ap_enable_reg_pp0_iter1 == 1'b1)) | ((icmp_ln33_fu_318_p2 == 1'd0) & (my_input1_V_0_vld_out == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1)));
end

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage1_11001 = (((1'b1 == ap_block_state7_io) & (ap_enable_reg_pp0_iter1 == 1'b1)) | ((icmp_ln33_reg_910 == 1'd0) & (my_input1_V_0_vld_out == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage1_subdone = (((1'b1 == ap_block_state7_io) & (ap_enable_reg_pp0_iter1 == 1'b1)) | ((icmp_ln33_reg_910 == 1'd0) & (my_input1_V_0_vld_out == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1)));
end

assign ap_block_pp0_stage2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage2_11001 = ((icmp_ln33_reg_910 == 1'd0) & (my_input1_V_0_vld_out == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage2_subdone = ((icmp_ln33_reg_910 == 1'd0) & (my_input1_V_0_vld_out == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

assign ap_block_pp0_stage3 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage3_11001 = ((icmp_ln33_reg_910 == 1'd0) & (my_input1_V_0_vld_out == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage3_subdone = ((icmp_ln33_reg_910 == 1'd0) & (my_input1_V_0_vld_out == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

always @ (*) begin
    ap_block_state2_pp0_stage0_iter0 = ((icmp_ln33_fu_318_p2 == 1'd0) & (my_input1_V_0_vld_out == 1'b0));
end

always @ (*) begin
    ap_block_state3_pp0_stage1_iter0 = ((icmp_ln33_reg_910 == 1'd0) & (my_input1_V_0_vld_out == 1'b0));
end

always @ (*) begin
    ap_block_state4_pp0_stage2_iter0 = ((icmp_ln33_reg_910 == 1'd0) & (my_input1_V_0_vld_out == 1'b0));
end

always @ (*) begin
    ap_block_state5_pp0_stage3_iter0 = ((icmp_ln33_reg_910 == 1'd0) & (my_input1_V_0_vld_out == 1'b0));
end

always @ (*) begin
    ap_block_state6_io = ((icmp_ln33_reg_910 == 1'd0) & (my_output_V_1_ack_in == 1'b0));
end

assign ap_block_state6_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state7_io = ((icmp_ln33_reg_910_pp0_iter1_reg == 1'd0) & (my_output_V_1_ack_in == 1'b0));
end

assign ap_block_state7_pp0_stage1_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state8 = ((my_output_V_1_state == 2'd1) | ((my_output_V_1_state == 2'd3) & (my_output_V_TREADY == 1'b0)));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign grp_fu_721_p0 = grp_fu_721_p00;

assign grp_fu_721_p00 = data0_1_V;

assign grp_fu_721_p1 = zext_ln1118_1_fu_384_p1;

assign grp_fu_721_p2 = grp_fu_721_p20;

assign grp_fu_721_p20 = and_ln_fu_377_p3;

assign grp_fu_729_p0 = grp_fu_729_p00;

assign grp_fu_729_p00 = data0_5_V;

assign grp_fu_729_p1 = zext_ln1118_1_fu_384_p1;

assign grp_fu_729_p2 = grp_fu_729_p20;

assign grp_fu_729_p20 = and_ln728_1_fu_401_p3;

assign grp_fu_737_p0 = grp_fu_737_p00;

assign grp_fu_737_p00 = data0_9_V;

assign grp_fu_737_p1 = zext_ln1118_1_fu_384_p1;

assign grp_fu_737_p2 = grp_fu_737_p20;

assign grp_fu_737_p20 = and_ln728_2_fu_421_p3;

assign grp_fu_745_p0 = grp_fu_745_p00;

assign grp_fu_745_p00 = data0_13_V;

assign grp_fu_745_p1 = zext_ln1118_1_fu_384_p1;

assign grp_fu_745_p2 = grp_fu_745_p20;

assign grp_fu_745_p20 = and_ln728_3_fu_441_p3;

assign grp_fu_753_p0 = grp_fu_753_p00;

assign grp_fu_753_p00 = data0_2_V;

assign grp_fu_753_p1 = zext_ln1118_2_fu_465_p1;

assign grp_fu_753_p2 = grp_fu_753_p20;

assign grp_fu_753_p20 = shl_ln_fu_469_p3;

assign grp_fu_761_p0 = grp_fu_761_p00;

assign grp_fu_761_p00 = data0_6_V;

assign grp_fu_761_p1 = zext_ln1118_2_fu_465_p1;

assign grp_fu_761_p2 = grp_fu_761_p20;

assign grp_fu_761_p20 = shl_ln728_2_fu_489_p3;

assign grp_fu_769_p0 = grp_fu_769_p00;

assign grp_fu_769_p00 = data0_10_V;

assign grp_fu_769_p1 = zext_ln1118_2_fu_465_p1;

assign grp_fu_769_p2 = grp_fu_769_p20;

assign grp_fu_769_p20 = shl_ln728_4_fu_509_p3;

assign grp_fu_777_p0 = grp_fu_777_p00;

assign grp_fu_777_p00 = data0_14_V;

assign grp_fu_777_p1 = zext_ln1118_2_fu_465_p1;

assign grp_fu_777_p2 = grp_fu_777_p20;

assign grp_fu_777_p20 = shl_ln728_6_fu_529_p3;

assign grp_fu_785_p0 = grp_fu_785_p00;

assign grp_fu_785_p00 = data0_3_V;

assign grp_fu_785_p1 = zext_ln1118_3_fu_553_p1;

assign grp_fu_785_p2 = {{tmp_3_reg_959}, {2'd0}};

assign grp_fu_793_p0 = grp_fu_793_p00;

assign grp_fu_793_p00 = data0_7_V;

assign grp_fu_793_p1 = zext_ln1118_3_fu_553_p1;

assign grp_fu_793_p2 = {{tmp_6_reg_964}, {2'd0}};

assign grp_fu_801_p0 = grp_fu_801_p00;

assign grp_fu_801_p00 = data0_11_V;

assign grp_fu_801_p1 = zext_ln1118_3_fu_553_p1;

assign grp_fu_801_p2 = {{tmp_9_reg_969}, {2'd0}};

assign grp_fu_809_p0 = grp_fu_809_p00;

assign grp_fu_809_p00 = data0_15_V;

assign grp_fu_809_p1 = zext_ln1118_3_fu_553_p1;

assign grp_fu_809_p2 = {{tmp_11_reg_974}, {2'd0}};

assign i_fu_323_p2 = (ap_phi_mux_i_1_phi_fu_247_p4 + 32'd1);

assign icmp_ln1494_1_fu_594_p2 = ((trunc_ln708_5_fu_585_p4 > threshold_V) ? 1'b1 : 1'b0);

assign icmp_ln1494_2_fu_615_p2 = ((trunc_ln708_8_fu_606_p4 > threshold_V) ? 1'b1 : 1'b0);

assign icmp_ln1494_3_fu_636_p2 = ((trunc_ln708_s_fu_627_p4 > threshold_V) ? 1'b1 : 1'b0);

assign icmp_ln1494_fu_573_p2 = ((trunc_ln708_2_fu_564_p4 > threshold_V) ? 1'b1 : 1'b0);

assign icmp_ln33_fu_318_p2 = ((ap_phi_mux_i_1_phi_fu_247_p4 == size) ? 1'b1 : 1'b0);

assign icmp_ln54_fu_679_p2 = ((add_ln52_2_fu_673_p2 == 3'd4) ? 1'b1 : 1'b0);

assign mul_ln1118_12_fu_715_p0 = mul_ln1118_12_fu_715_p00;

assign mul_ln1118_12_fu_715_p00 = data0_12_V;

assign mul_ln1118_12_fu_715_p1 = zext_ln1118_fu_333_p1;

assign mul_ln1118_4_fu_703_p0 = mul_ln1118_4_fu_703_p00;

assign mul_ln1118_4_fu_703_p00 = data0_4_V;

assign mul_ln1118_4_fu_703_p1 = zext_ln1118_fu_333_p1;

assign mul_ln1118_8_fu_709_p0 = mul_ln1118_8_fu_709_p00;

assign mul_ln1118_8_fu_709_p00 = data0_8_V;

assign mul_ln1118_8_fu_709_p1 = zext_ln1118_fu_333_p1;

assign mul_ln1118_fu_697_p0 = mul_ln1118_fu_697_p00;

assign mul_ln1118_fu_697_p00 = data0_0_V;

assign mul_ln1118_fu_697_p1 = zext_ln1118_fu_333_p1;

assign my_input1_V_0_ack_in = my_input1_V_0_state[1'd1];

assign my_input1_V_0_load_A = (my_input1_V_0_state_cmp_full & ~my_input1_V_0_sel_wr);

assign my_input1_V_0_load_B = (my_input1_V_0_state_cmp_full & my_input1_V_0_sel_wr);

assign my_input1_V_0_sel = my_input1_V_0_sel_rd;

assign my_input1_V_0_state_cmp_full = ((my_input1_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign my_input1_V_0_vld_in = my_input1_V_TVALID;

assign my_input1_V_0_vld_out = my_input1_V_0_state[1'd0];

assign my_input1_V_TREADY = my_input1_V_0_state[1'd1];

assign my_output_V_1_ack_in = my_output_V_1_state[1'd1];

assign my_output_V_1_ack_out = my_output_V_TREADY;

assign my_output_V_1_load_A = (my_output_V_1_state_cmp_full & ~my_output_V_1_sel_wr);

assign my_output_V_1_load_B = (my_output_V_1_state_cmp_full & my_output_V_1_sel_wr);

assign my_output_V_1_sel = my_output_V_1_sel_rd;

assign my_output_V_1_state_cmp_full = ((my_output_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign my_output_V_1_vld_out = my_output_V_1_state[1'd0];

assign my_output_V_TDATA = my_output_V_1_data_out;

assign my_output_V_TVALID = my_output_V_1_state[1'd0];

assign select_ln54_fu_685_p3 = ((icmp_ln54_fu_679_p2[0:0] === 1'b1) ? 34'd0 : trunc_ln708_s_reg_994);

assign shl_ln728_2_fu_489_p3 = {{tmp_5_reg_944}, {2'd0}};

assign shl_ln728_4_fu_509_p3 = {{tmp_8_reg_949}, {2'd0}};

assign shl_ln728_6_fu_529_p3 = {{tmp_10_reg_954}, {2'd0}};

assign shl_ln_fu_469_p3 = {{tmp_2_reg_939}, {2'd0}};

assign trunc_ln356_1_fu_373_p1 = my_input1_V_0_data_out[16:0];

assign trunc_ln356_2_fu_461_p1 = my_input1_V_0_data_out[16:0];

assign trunc_ln356_3_fu_549_p1 = my_input1_V_0_data_out[16:0];

assign trunc_ln356_fu_329_p1 = my_input1_V_0_data_out[16:0];

assign trunc_ln708_2_fu_564_p4 = {{grp_fu_785_p3[35:2]}};

assign trunc_ln708_5_fu_585_p4 = {{grp_fu_793_p3[35:2]}};

assign trunc_ln708_8_fu_606_p4 = {{grp_fu_801_p3[35:2]}};

assign trunc_ln708_s_fu_627_p4 = {{grp_fu_809_p3[35:2]}};

assign zext_ln1118_1_fu_384_p1 = trunc_ln356_1_fu_373_p1;

assign zext_ln1118_2_fu_465_p1 = trunc_ln356_2_fu_461_p1;

assign zext_ln1118_3_fu_553_p1 = trunc_ln356_3_fu_549_p1;

assign zext_ln1118_4_fu_641_p1 = icmp_ln1494_reg_979;

assign zext_ln1118_5_fu_644_p1 = icmp_ln1494_1_reg_984;

assign zext_ln1118_6_fu_647_p1 = icmp_ln1494_2_reg_989;

assign zext_ln1118_fu_333_p1 = trunc_ln356_fu_329_p1;

assign zext_ln356_fu_692_p1 = select_ln54_fu_685_p3;

assign zext_ln52_1_fu_659_p1 = add_ln52_fu_653_p2;

assign zext_ln52_2_fu_669_p1 = add_ln52_1_fu_663_p2;

assign zext_ln52_fu_650_p1 = icmp_ln1494_3_reg_999;

endmodule //myFuncAccel4
