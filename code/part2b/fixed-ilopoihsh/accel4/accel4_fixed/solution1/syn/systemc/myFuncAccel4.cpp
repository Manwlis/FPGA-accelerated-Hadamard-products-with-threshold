// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "myFuncAccel4.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic myFuncAccel4::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic myFuncAccel4::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<6> myFuncAccel4::ap_ST_fsm_state1 = "1";
const sc_lv<6> myFuncAccel4::ap_ST_fsm_pp0_stage0 = "10";
const sc_lv<6> myFuncAccel4::ap_ST_fsm_pp0_stage1 = "100";
const sc_lv<6> myFuncAccel4::ap_ST_fsm_pp0_stage2 = "1000";
const sc_lv<6> myFuncAccel4::ap_ST_fsm_pp0_stage3 = "10000";
const sc_lv<6> myFuncAccel4::ap_ST_fsm_state8 = "100000";
const sc_lv<32> myFuncAccel4::ap_const_lv32_0 = "00000000000000000000000000000000";
const bool myFuncAccel4::ap_const_boolean_1 = true;
const sc_lv<1> myFuncAccel4::ap_const_lv1_0 = "0";
const sc_lv<1> myFuncAccel4::ap_const_lv1_1 = "1";
const sc_lv<2> myFuncAccel4::ap_const_lv2_0 = "00";
const sc_lv<2> myFuncAccel4::ap_const_lv2_2 = "10";
const sc_lv<2> myFuncAccel4::ap_const_lv2_3 = "11";
const sc_lv<2> myFuncAccel4::ap_const_lv2_1 = "1";
const sc_lv<32> myFuncAccel4::ap_const_lv32_1 = "1";
const bool myFuncAccel4::ap_const_boolean_0 = false;
const sc_lv<32> myFuncAccel4::ap_const_lv32_2 = "10";
const sc_lv<32> myFuncAccel4::ap_const_lv32_3 = "11";
const sc_lv<32> myFuncAccel4::ap_const_lv32_4 = "100";
const sc_lv<32> myFuncAccel4::ap_const_lv32_21 = "100001";
const sc_lv<32> myFuncAccel4::ap_const_lv32_22 = "100010";
const sc_lv<32> myFuncAccel4::ap_const_lv32_23 = "100011";
const sc_lv<3> myFuncAccel4::ap_const_lv3_4 = "100";
const sc_lv<34> myFuncAccel4::ap_const_lv34_0 = "0000000000000000000000000000000000";
const sc_lv<32> myFuncAccel4::ap_const_lv32_5 = "101";

myFuncAccel4::myFuncAccel4(sc_module_name name) : sc_module(name), mVcdFile(0) {
    myFuncAccel4_mul_mul_17ns_17ns_34_1_1_U1 = new myFuncAccel4_mul_mul_17ns_17ns_34_1_1<1,1,17,17,34>("myFuncAccel4_mul_mul_17ns_17ns_34_1_1_U1");
    myFuncAccel4_mul_mul_17ns_17ns_34_1_1_U1->din0(mul_ln1118_fu_697_p0);
    myFuncAccel4_mul_mul_17ns_17ns_34_1_1_U1->din1(mul_ln1118_fu_697_p1);
    myFuncAccel4_mul_mul_17ns_17ns_34_1_1_U1->dout(mul_ln1118_fu_697_p2);
    myFuncAccel4_mul_mul_17ns_17ns_34_1_1_U2 = new myFuncAccel4_mul_mul_17ns_17ns_34_1_1<1,1,17,17,34>("myFuncAccel4_mul_mul_17ns_17ns_34_1_1_U2");
    myFuncAccel4_mul_mul_17ns_17ns_34_1_1_U2->din0(mul_ln1118_4_fu_703_p0);
    myFuncAccel4_mul_mul_17ns_17ns_34_1_1_U2->din1(mul_ln1118_4_fu_703_p1);
    myFuncAccel4_mul_mul_17ns_17ns_34_1_1_U2->dout(mul_ln1118_4_fu_703_p2);
    myFuncAccel4_mul_mul_17ns_17ns_34_1_1_U3 = new myFuncAccel4_mul_mul_17ns_17ns_34_1_1<1,1,17,17,34>("myFuncAccel4_mul_mul_17ns_17ns_34_1_1_U3");
    myFuncAccel4_mul_mul_17ns_17ns_34_1_1_U3->din0(mul_ln1118_8_fu_709_p0);
    myFuncAccel4_mul_mul_17ns_17ns_34_1_1_U3->din1(mul_ln1118_8_fu_709_p1);
    myFuncAccel4_mul_mul_17ns_17ns_34_1_1_U3->dout(mul_ln1118_8_fu_709_p2);
    myFuncAccel4_mul_mul_17ns_17ns_34_1_1_U4 = new myFuncAccel4_mul_mul_17ns_17ns_34_1_1<1,1,17,17,34>("myFuncAccel4_mul_mul_17ns_17ns_34_1_1_U4");
    myFuncAccel4_mul_mul_17ns_17ns_34_1_1_U4->din0(mul_ln1118_12_fu_715_p0);
    myFuncAccel4_mul_mul_17ns_17ns_34_1_1_U4->din1(mul_ln1118_12_fu_715_p1);
    myFuncAccel4_mul_mul_17ns_17ns_34_1_1_U4->dout(mul_ln1118_12_fu_715_p2);
    myFuncAccel4_mac_muladd_17ns_17ns_34ns_35_1_1_U5 = new myFuncAccel4_mac_muladd_17ns_17ns_34ns_35_1_1<1,1,17,17,34,35>("myFuncAccel4_mac_muladd_17ns_17ns_34ns_35_1_1_U5");
    myFuncAccel4_mac_muladd_17ns_17ns_34ns_35_1_1_U5->din0(grp_fu_721_p0);
    myFuncAccel4_mac_muladd_17ns_17ns_34ns_35_1_1_U5->din1(grp_fu_721_p1);
    myFuncAccel4_mac_muladd_17ns_17ns_34ns_35_1_1_U5->din2(grp_fu_721_p2);
    myFuncAccel4_mac_muladd_17ns_17ns_34ns_35_1_1_U5->dout(grp_fu_721_p3);
    myFuncAccel4_mac_muladd_17ns_17ns_34ns_35_1_1_U6 = new myFuncAccel4_mac_muladd_17ns_17ns_34ns_35_1_1<1,1,17,17,34,35>("myFuncAccel4_mac_muladd_17ns_17ns_34ns_35_1_1_U6");
    myFuncAccel4_mac_muladd_17ns_17ns_34ns_35_1_1_U6->din0(grp_fu_729_p0);
    myFuncAccel4_mac_muladd_17ns_17ns_34ns_35_1_1_U6->din1(grp_fu_729_p1);
    myFuncAccel4_mac_muladd_17ns_17ns_34ns_35_1_1_U6->din2(grp_fu_729_p2);
    myFuncAccel4_mac_muladd_17ns_17ns_34ns_35_1_1_U6->dout(grp_fu_729_p3);
    myFuncAccel4_mac_muladd_17ns_17ns_34ns_35_1_1_U7 = new myFuncAccel4_mac_muladd_17ns_17ns_34ns_35_1_1<1,1,17,17,34,35>("myFuncAccel4_mac_muladd_17ns_17ns_34ns_35_1_1_U7");
    myFuncAccel4_mac_muladd_17ns_17ns_34ns_35_1_1_U7->din0(grp_fu_737_p0);
    myFuncAccel4_mac_muladd_17ns_17ns_34ns_35_1_1_U7->din1(grp_fu_737_p1);
    myFuncAccel4_mac_muladd_17ns_17ns_34ns_35_1_1_U7->din2(grp_fu_737_p2);
    myFuncAccel4_mac_muladd_17ns_17ns_34ns_35_1_1_U7->dout(grp_fu_737_p3);
    myFuncAccel4_mac_muladd_17ns_17ns_34ns_35_1_1_U8 = new myFuncAccel4_mac_muladd_17ns_17ns_34ns_35_1_1<1,1,17,17,34,35>("myFuncAccel4_mac_muladd_17ns_17ns_34ns_35_1_1_U8");
    myFuncAccel4_mac_muladd_17ns_17ns_34ns_35_1_1_U8->din0(grp_fu_745_p0);
    myFuncAccel4_mac_muladd_17ns_17ns_34ns_35_1_1_U8->din1(grp_fu_745_p1);
    myFuncAccel4_mac_muladd_17ns_17ns_34ns_35_1_1_U8->din2(grp_fu_745_p2);
    myFuncAccel4_mac_muladd_17ns_17ns_34ns_35_1_1_U8->dout(grp_fu_745_p3);
    myFuncAccel4_mac_muladd_17ns_17ns_35ns_36_1_1_U9 = new myFuncAccel4_mac_muladd_17ns_17ns_35ns_36_1_1<1,1,17,17,35,36>("myFuncAccel4_mac_muladd_17ns_17ns_35ns_36_1_1_U9");
    myFuncAccel4_mac_muladd_17ns_17ns_35ns_36_1_1_U9->din0(grp_fu_753_p0);
    myFuncAccel4_mac_muladd_17ns_17ns_35ns_36_1_1_U9->din1(grp_fu_753_p1);
    myFuncAccel4_mac_muladd_17ns_17ns_35ns_36_1_1_U9->din2(grp_fu_753_p2);
    myFuncAccel4_mac_muladd_17ns_17ns_35ns_36_1_1_U9->dout(grp_fu_753_p3);
    myFuncAccel4_mac_muladd_17ns_17ns_35ns_36_1_1_U10 = new myFuncAccel4_mac_muladd_17ns_17ns_35ns_36_1_1<1,1,17,17,35,36>("myFuncAccel4_mac_muladd_17ns_17ns_35ns_36_1_1_U10");
    myFuncAccel4_mac_muladd_17ns_17ns_35ns_36_1_1_U10->din0(grp_fu_761_p0);
    myFuncAccel4_mac_muladd_17ns_17ns_35ns_36_1_1_U10->din1(grp_fu_761_p1);
    myFuncAccel4_mac_muladd_17ns_17ns_35ns_36_1_1_U10->din2(grp_fu_761_p2);
    myFuncAccel4_mac_muladd_17ns_17ns_35ns_36_1_1_U10->dout(grp_fu_761_p3);
    myFuncAccel4_mac_muladd_17ns_17ns_35ns_36_1_1_U11 = new myFuncAccel4_mac_muladd_17ns_17ns_35ns_36_1_1<1,1,17,17,35,36>("myFuncAccel4_mac_muladd_17ns_17ns_35ns_36_1_1_U11");
    myFuncAccel4_mac_muladd_17ns_17ns_35ns_36_1_1_U11->din0(grp_fu_769_p0);
    myFuncAccel4_mac_muladd_17ns_17ns_35ns_36_1_1_U11->din1(grp_fu_769_p1);
    myFuncAccel4_mac_muladd_17ns_17ns_35ns_36_1_1_U11->din2(grp_fu_769_p2);
    myFuncAccel4_mac_muladd_17ns_17ns_35ns_36_1_1_U11->dout(grp_fu_769_p3);
    myFuncAccel4_mac_muladd_17ns_17ns_35ns_36_1_1_U12 = new myFuncAccel4_mac_muladd_17ns_17ns_35ns_36_1_1<1,1,17,17,35,36>("myFuncAccel4_mac_muladd_17ns_17ns_35ns_36_1_1_U12");
    myFuncAccel4_mac_muladd_17ns_17ns_35ns_36_1_1_U12->din0(grp_fu_777_p0);
    myFuncAccel4_mac_muladd_17ns_17ns_35ns_36_1_1_U12->din1(grp_fu_777_p1);
    myFuncAccel4_mac_muladd_17ns_17ns_35ns_36_1_1_U12->din2(grp_fu_777_p2);
    myFuncAccel4_mac_muladd_17ns_17ns_35ns_36_1_1_U12->dout(grp_fu_777_p3);
    myFuncAccel4_mac_muladd_17ns_17ns_36ns_36_1_1_U13 = new myFuncAccel4_mac_muladd_17ns_17ns_36ns_36_1_1<1,1,17,17,36,36>("myFuncAccel4_mac_muladd_17ns_17ns_36ns_36_1_1_U13");
    myFuncAccel4_mac_muladd_17ns_17ns_36ns_36_1_1_U13->din0(grp_fu_785_p0);
    myFuncAccel4_mac_muladd_17ns_17ns_36ns_36_1_1_U13->din1(grp_fu_785_p1);
    myFuncAccel4_mac_muladd_17ns_17ns_36ns_36_1_1_U13->din2(grp_fu_785_p2);
    myFuncAccel4_mac_muladd_17ns_17ns_36ns_36_1_1_U13->dout(grp_fu_785_p3);
    myFuncAccel4_mac_muladd_17ns_17ns_36ns_36_1_1_U14 = new myFuncAccel4_mac_muladd_17ns_17ns_36ns_36_1_1<1,1,17,17,36,36>("myFuncAccel4_mac_muladd_17ns_17ns_36ns_36_1_1_U14");
    myFuncAccel4_mac_muladd_17ns_17ns_36ns_36_1_1_U14->din0(grp_fu_793_p0);
    myFuncAccel4_mac_muladd_17ns_17ns_36ns_36_1_1_U14->din1(grp_fu_793_p1);
    myFuncAccel4_mac_muladd_17ns_17ns_36ns_36_1_1_U14->din2(grp_fu_793_p2);
    myFuncAccel4_mac_muladd_17ns_17ns_36ns_36_1_1_U14->dout(grp_fu_793_p3);
    myFuncAccel4_mac_muladd_17ns_17ns_36ns_36_1_1_U15 = new myFuncAccel4_mac_muladd_17ns_17ns_36ns_36_1_1<1,1,17,17,36,36>("myFuncAccel4_mac_muladd_17ns_17ns_36ns_36_1_1_U15");
    myFuncAccel4_mac_muladd_17ns_17ns_36ns_36_1_1_U15->din0(grp_fu_801_p0);
    myFuncAccel4_mac_muladd_17ns_17ns_36ns_36_1_1_U15->din1(grp_fu_801_p1);
    myFuncAccel4_mac_muladd_17ns_17ns_36ns_36_1_1_U15->din2(grp_fu_801_p2);
    myFuncAccel4_mac_muladd_17ns_17ns_36ns_36_1_1_U15->dout(grp_fu_801_p3);
    myFuncAccel4_mac_muladd_17ns_17ns_36ns_36_1_1_U16 = new myFuncAccel4_mac_muladd_17ns_17ns_36ns_36_1_1<1,1,17,17,36,36>("myFuncAccel4_mac_muladd_17ns_17ns_36ns_36_1_1_U16");
    myFuncAccel4_mac_muladd_17ns_17ns_36ns_36_1_1_U16->din0(grp_fu_809_p0);
    myFuncAccel4_mac_muladd_17ns_17ns_36ns_36_1_1_U16->din1(grp_fu_809_p1);
    myFuncAccel4_mac_muladd_17ns_17ns_36ns_36_1_1_U16->din2(grp_fu_809_p2);
    myFuncAccel4_mac_muladd_17ns_17ns_36ns_36_1_1_U16->dout(grp_fu_809_p3);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_add_ln52_1_fu_663_p2);
    sensitive << ( zext_ln52_fu_650_p1 );
    sensitive << ( zext_ln1118_6_fu_647_p1 );

    SC_METHOD(thread_add_ln52_2_fu_673_p2);
    sensitive << ( zext_ln52_1_fu_659_p1 );
    sensitive << ( zext_ln52_2_fu_669_p1 );

    SC_METHOD(thread_add_ln52_fu_653_p2);
    sensitive << ( zext_ln1118_4_fu_641_p1 );
    sensitive << ( zext_ln1118_5_fu_644_p1 );

    SC_METHOD(thread_and_ln728_1_fu_401_p3);
    sensitive << ( tmp_4_reg_924 );

    SC_METHOD(thread_and_ln728_2_fu_421_p3);
    sensitive << ( tmp_7_reg_929 );

    SC_METHOD(thread_and_ln728_3_fu_441_p3);
    sensitive << ( tmp_s_reg_934 );

    SC_METHOD(thread_and_ln_fu_377_p3);
    sensitive << ( tmp_1_reg_919 );

    SC_METHOD(thread_ap_CS_fsm_pp0_stage0);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_pp0_stage1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_pp0_stage2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_pp0_stage3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state8);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_block_pp0_stage0);

    SC_METHOD(thread_ap_block_pp0_stage0_01001);
    sensitive << ( my_input1_V_0_vld_out );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( icmp_ln33_fu_318_p2 );

    SC_METHOD(thread_ap_block_pp0_stage0_11001);
    sensitive << ( my_input1_V_0_vld_out );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( icmp_ln33_fu_318_p2 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_state6_io );

    SC_METHOD(thread_ap_block_pp0_stage0_subdone);
    sensitive << ( my_input1_V_0_vld_out );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( icmp_ln33_fu_318_p2 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_state6_io );

    SC_METHOD(thread_ap_block_pp0_stage1);

    SC_METHOD(thread_ap_block_pp0_stage1_11001);
    sensitive << ( my_input1_V_0_vld_out );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( icmp_ln33_reg_910 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_state7_io );

    SC_METHOD(thread_ap_block_pp0_stage1_subdone);
    sensitive << ( my_input1_V_0_vld_out );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( icmp_ln33_reg_910 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_state7_io );

    SC_METHOD(thread_ap_block_pp0_stage2);

    SC_METHOD(thread_ap_block_pp0_stage2_11001);
    sensitive << ( my_input1_V_0_vld_out );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( icmp_ln33_reg_910 );

    SC_METHOD(thread_ap_block_pp0_stage2_subdone);
    sensitive << ( my_input1_V_0_vld_out );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( icmp_ln33_reg_910 );

    SC_METHOD(thread_ap_block_pp0_stage3);

    SC_METHOD(thread_ap_block_pp0_stage3_11001);
    sensitive << ( my_input1_V_0_vld_out );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( icmp_ln33_reg_910 );

    SC_METHOD(thread_ap_block_pp0_stage3_subdone);
    sensitive << ( my_input1_V_0_vld_out );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( icmp_ln33_reg_910 );

    SC_METHOD(thread_ap_block_state2_pp0_stage0_iter0);
    sensitive << ( my_input1_V_0_vld_out );
    sensitive << ( icmp_ln33_fu_318_p2 );

    SC_METHOD(thread_ap_block_state3_pp0_stage1_iter0);
    sensitive << ( my_input1_V_0_vld_out );
    sensitive << ( icmp_ln33_reg_910 );

    SC_METHOD(thread_ap_block_state4_pp0_stage2_iter0);
    sensitive << ( my_input1_V_0_vld_out );
    sensitive << ( icmp_ln33_reg_910 );

    SC_METHOD(thread_ap_block_state5_pp0_stage3_iter0);
    sensitive << ( my_input1_V_0_vld_out );
    sensitive << ( icmp_ln33_reg_910 );

    SC_METHOD(thread_ap_block_state6_io);
    sensitive << ( my_output_V_1_ack_in );
    sensitive << ( icmp_ln33_reg_910 );

    SC_METHOD(thread_ap_block_state6_pp0_stage0_iter1);

    SC_METHOD(thread_ap_block_state7_io);
    sensitive << ( my_output_V_1_ack_in );
    sensitive << ( icmp_ln33_reg_910_pp0_iter1_reg );

    SC_METHOD(thread_ap_block_state7_pp0_stage1_iter1);

    SC_METHOD(thread_ap_block_state8);
    sensitive << ( my_output_V_TREADY );
    sensitive << ( my_output_V_1_state );

    SC_METHOD(thread_ap_condition_pp0_exit_iter0_state2);
    sensitive << ( icmp_ln33_fu_318_p2 );

    SC_METHOD(thread_ap_done);
    sensitive << ( my_output_V_TREADY );
    sensitive << ( my_output_V_1_state );
    sensitive << ( ap_CS_fsm_state8 );

    SC_METHOD(thread_ap_enable_pp0);
    sensitive << ( ap_idle_pp0 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_idle_pp0);
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );

    SC_METHOD(thread_ap_phi_mux_i_1_phi_fu_247_p4);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( icmp_ln33_reg_910 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( i_1_reg_243 );
    sensitive << ( i_reg_914 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( my_output_V_TREADY );
    sensitive << ( my_output_V_1_state );
    sensitive << ( ap_CS_fsm_state8 );

    SC_METHOD(thread_ap_rst_n_inv);
    sensitive << ( ap_rst_n );

    SC_METHOD(thread_grp_fu_721_p0);
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_CS_fsm_pp0_stage1 );
    sensitive << ( ap_block_pp0_stage1 );
    sensitive << ( icmp_ln33_reg_910 );
    sensitive << ( grp_fu_721_p00 );

    SC_METHOD(thread_grp_fu_721_p00);
    sensitive << ( data0_1_V );

    SC_METHOD(thread_grp_fu_721_p1);
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_CS_fsm_pp0_stage1 );
    sensitive << ( ap_block_pp0_stage1 );
    sensitive << ( icmp_ln33_reg_910 );
    sensitive << ( zext_ln1118_1_fu_384_p1 );

    SC_METHOD(thread_grp_fu_721_p2);
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_CS_fsm_pp0_stage1 );
    sensitive << ( ap_block_pp0_stage1 );
    sensitive << ( icmp_ln33_reg_910 );
    sensitive << ( grp_fu_721_p20 );

    SC_METHOD(thread_grp_fu_721_p20);
    sensitive << ( and_ln_fu_377_p3 );

    SC_METHOD(thread_grp_fu_729_p0);
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_CS_fsm_pp0_stage1 );
    sensitive << ( ap_block_pp0_stage1 );
    sensitive << ( icmp_ln33_reg_910 );
    sensitive << ( grp_fu_729_p00 );

    SC_METHOD(thread_grp_fu_729_p00);
    sensitive << ( data0_5_V );

    SC_METHOD(thread_grp_fu_729_p1);
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_CS_fsm_pp0_stage1 );
    sensitive << ( ap_block_pp0_stage1 );
    sensitive << ( icmp_ln33_reg_910 );
    sensitive << ( zext_ln1118_1_fu_384_p1 );

    SC_METHOD(thread_grp_fu_729_p2);
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_CS_fsm_pp0_stage1 );
    sensitive << ( ap_block_pp0_stage1 );
    sensitive << ( icmp_ln33_reg_910 );
    sensitive << ( grp_fu_729_p20 );

    SC_METHOD(thread_grp_fu_729_p20);
    sensitive << ( and_ln728_1_fu_401_p3 );

    SC_METHOD(thread_grp_fu_737_p0);
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_CS_fsm_pp0_stage1 );
    sensitive << ( ap_block_pp0_stage1 );
    sensitive << ( icmp_ln33_reg_910 );
    sensitive << ( grp_fu_737_p00 );

    SC_METHOD(thread_grp_fu_737_p00);
    sensitive << ( data0_9_V );

    SC_METHOD(thread_grp_fu_737_p1);
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_CS_fsm_pp0_stage1 );
    sensitive << ( ap_block_pp0_stage1 );
    sensitive << ( icmp_ln33_reg_910 );
    sensitive << ( zext_ln1118_1_fu_384_p1 );

    SC_METHOD(thread_grp_fu_737_p2);
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_CS_fsm_pp0_stage1 );
    sensitive << ( ap_block_pp0_stage1 );
    sensitive << ( icmp_ln33_reg_910 );
    sensitive << ( grp_fu_737_p20 );

    SC_METHOD(thread_grp_fu_737_p20);
    sensitive << ( and_ln728_2_fu_421_p3 );

    SC_METHOD(thread_grp_fu_745_p0);
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_CS_fsm_pp0_stage1 );
    sensitive << ( ap_block_pp0_stage1 );
    sensitive << ( icmp_ln33_reg_910 );
    sensitive << ( grp_fu_745_p00 );

    SC_METHOD(thread_grp_fu_745_p00);
    sensitive << ( data0_13_V );

    SC_METHOD(thread_grp_fu_745_p1);
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_CS_fsm_pp0_stage1 );
    sensitive << ( ap_block_pp0_stage1 );
    sensitive << ( icmp_ln33_reg_910 );
    sensitive << ( zext_ln1118_1_fu_384_p1 );

    SC_METHOD(thread_grp_fu_745_p2);
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_CS_fsm_pp0_stage1 );
    sensitive << ( ap_block_pp0_stage1 );
    sensitive << ( icmp_ln33_reg_910 );
    sensitive << ( grp_fu_745_p20 );

    SC_METHOD(thread_grp_fu_745_p20);
    sensitive << ( and_ln728_3_fu_441_p3 );

    SC_METHOD(thread_grp_fu_753_p0);
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( icmp_ln33_reg_910 );
    sensitive << ( ap_CS_fsm_pp0_stage2 );
    sensitive << ( ap_block_pp0_stage2 );
    sensitive << ( grp_fu_753_p00 );

    SC_METHOD(thread_grp_fu_753_p00);
    sensitive << ( data0_2_V );

    SC_METHOD(thread_grp_fu_753_p1);
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( icmp_ln33_reg_910 );
    sensitive << ( ap_CS_fsm_pp0_stage2 );
    sensitive << ( ap_block_pp0_stage2 );
    sensitive << ( zext_ln1118_2_fu_465_p1 );

    SC_METHOD(thread_grp_fu_753_p2);
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( icmp_ln33_reg_910 );
    sensitive << ( ap_CS_fsm_pp0_stage2 );
    sensitive << ( ap_block_pp0_stage2 );
    sensitive << ( grp_fu_753_p20 );

    SC_METHOD(thread_grp_fu_753_p20);
    sensitive << ( shl_ln_fu_469_p3 );

    SC_METHOD(thread_grp_fu_761_p0);
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( icmp_ln33_reg_910 );
    sensitive << ( ap_CS_fsm_pp0_stage2 );
    sensitive << ( ap_block_pp0_stage2 );
    sensitive << ( grp_fu_761_p00 );

    SC_METHOD(thread_grp_fu_761_p00);
    sensitive << ( data0_6_V );

    SC_METHOD(thread_grp_fu_761_p1);
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( icmp_ln33_reg_910 );
    sensitive << ( ap_CS_fsm_pp0_stage2 );
    sensitive << ( ap_block_pp0_stage2 );
    sensitive << ( zext_ln1118_2_fu_465_p1 );

    SC_METHOD(thread_grp_fu_761_p2);
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( icmp_ln33_reg_910 );
    sensitive << ( ap_CS_fsm_pp0_stage2 );
    sensitive << ( ap_block_pp0_stage2 );
    sensitive << ( grp_fu_761_p20 );

    SC_METHOD(thread_grp_fu_761_p20);
    sensitive << ( shl_ln728_2_fu_489_p3 );

    SC_METHOD(thread_grp_fu_769_p0);
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( icmp_ln33_reg_910 );
    sensitive << ( ap_CS_fsm_pp0_stage2 );
    sensitive << ( ap_block_pp0_stage2 );
    sensitive << ( grp_fu_769_p00 );

    SC_METHOD(thread_grp_fu_769_p00);
    sensitive << ( data0_10_V );

    SC_METHOD(thread_grp_fu_769_p1);
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( icmp_ln33_reg_910 );
    sensitive << ( ap_CS_fsm_pp0_stage2 );
    sensitive << ( ap_block_pp0_stage2 );
    sensitive << ( zext_ln1118_2_fu_465_p1 );

    SC_METHOD(thread_grp_fu_769_p2);
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( icmp_ln33_reg_910 );
    sensitive << ( ap_CS_fsm_pp0_stage2 );
    sensitive << ( ap_block_pp0_stage2 );
    sensitive << ( grp_fu_769_p20 );

    SC_METHOD(thread_grp_fu_769_p20);
    sensitive << ( shl_ln728_4_fu_509_p3 );

    SC_METHOD(thread_grp_fu_777_p0);
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( icmp_ln33_reg_910 );
    sensitive << ( ap_CS_fsm_pp0_stage2 );
    sensitive << ( ap_block_pp0_stage2 );
    sensitive << ( grp_fu_777_p00 );

    SC_METHOD(thread_grp_fu_777_p00);
    sensitive << ( data0_14_V );

    SC_METHOD(thread_grp_fu_777_p1);
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( icmp_ln33_reg_910 );
    sensitive << ( ap_CS_fsm_pp0_stage2 );
    sensitive << ( ap_block_pp0_stage2 );
    sensitive << ( zext_ln1118_2_fu_465_p1 );

    SC_METHOD(thread_grp_fu_777_p2);
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( icmp_ln33_reg_910 );
    sensitive << ( ap_CS_fsm_pp0_stage2 );
    sensitive << ( ap_block_pp0_stage2 );
    sensitive << ( grp_fu_777_p20 );

    SC_METHOD(thread_grp_fu_777_p20);
    sensitive << ( shl_ln728_6_fu_529_p3 );

    SC_METHOD(thread_grp_fu_785_p0);
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( icmp_ln33_reg_910 );
    sensitive << ( ap_CS_fsm_pp0_stage3 );
    sensitive << ( ap_block_pp0_stage3 );
    sensitive << ( grp_fu_785_p00 );

    SC_METHOD(thread_grp_fu_785_p00);
    sensitive << ( data0_3_V );

    SC_METHOD(thread_grp_fu_785_p1);
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( icmp_ln33_reg_910 );
    sensitive << ( ap_CS_fsm_pp0_stage3 );
    sensitive << ( ap_block_pp0_stage3 );
    sensitive << ( zext_ln1118_3_fu_553_p1 );

    SC_METHOD(thread_grp_fu_785_p2);
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( icmp_ln33_reg_910 );
    sensitive << ( ap_CS_fsm_pp0_stage3 );
    sensitive << ( ap_block_pp0_stage3 );
    sensitive << ( tmp_3_reg_959 );

    SC_METHOD(thread_grp_fu_793_p0);
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( icmp_ln33_reg_910 );
    sensitive << ( ap_CS_fsm_pp0_stage3 );
    sensitive << ( ap_block_pp0_stage3 );
    sensitive << ( grp_fu_793_p00 );

    SC_METHOD(thread_grp_fu_793_p00);
    sensitive << ( data0_7_V );

    SC_METHOD(thread_grp_fu_793_p1);
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( icmp_ln33_reg_910 );
    sensitive << ( ap_CS_fsm_pp0_stage3 );
    sensitive << ( ap_block_pp0_stage3 );
    sensitive << ( zext_ln1118_3_fu_553_p1 );

    SC_METHOD(thread_grp_fu_793_p2);
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( icmp_ln33_reg_910 );
    sensitive << ( ap_CS_fsm_pp0_stage3 );
    sensitive << ( ap_block_pp0_stage3 );
    sensitive << ( tmp_6_reg_964 );

    SC_METHOD(thread_grp_fu_801_p0);
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( icmp_ln33_reg_910 );
    sensitive << ( ap_CS_fsm_pp0_stage3 );
    sensitive << ( ap_block_pp0_stage3 );
    sensitive << ( grp_fu_801_p00 );

    SC_METHOD(thread_grp_fu_801_p00);
    sensitive << ( data0_11_V );

    SC_METHOD(thread_grp_fu_801_p1);
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( icmp_ln33_reg_910 );
    sensitive << ( ap_CS_fsm_pp0_stage3 );
    sensitive << ( ap_block_pp0_stage3 );
    sensitive << ( zext_ln1118_3_fu_553_p1 );

    SC_METHOD(thread_grp_fu_801_p2);
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( icmp_ln33_reg_910 );
    sensitive << ( ap_CS_fsm_pp0_stage3 );
    sensitive << ( ap_block_pp0_stage3 );
    sensitive << ( tmp_9_reg_969 );

    SC_METHOD(thread_grp_fu_809_p0);
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( icmp_ln33_reg_910 );
    sensitive << ( ap_CS_fsm_pp0_stage3 );
    sensitive << ( ap_block_pp0_stage3 );
    sensitive << ( grp_fu_809_p00 );

    SC_METHOD(thread_grp_fu_809_p00);
    sensitive << ( data0_15_V );

    SC_METHOD(thread_grp_fu_809_p1);
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( icmp_ln33_reg_910 );
    sensitive << ( ap_CS_fsm_pp0_stage3 );
    sensitive << ( ap_block_pp0_stage3 );
    sensitive << ( zext_ln1118_3_fu_553_p1 );

    SC_METHOD(thread_grp_fu_809_p2);
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( icmp_ln33_reg_910 );
    sensitive << ( ap_CS_fsm_pp0_stage3 );
    sensitive << ( ap_block_pp0_stage3 );
    sensitive << ( tmp_11_reg_974 );

    SC_METHOD(thread_i_fu_323_p2);
    sensitive << ( ap_phi_mux_i_1_phi_fu_247_p4 );

    SC_METHOD(thread_icmp_ln1494_1_fu_594_p2);
    sensitive << ( threshold_V );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( icmp_ln33_reg_910 );
    sensitive << ( ap_CS_fsm_pp0_stage3 );
    sensitive << ( ap_block_pp0_stage3_11001 );
    sensitive << ( trunc_ln708_5_fu_585_p4 );

    SC_METHOD(thread_icmp_ln1494_2_fu_615_p2);
    sensitive << ( threshold_V );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( icmp_ln33_reg_910 );
    sensitive << ( ap_CS_fsm_pp0_stage3 );
    sensitive << ( ap_block_pp0_stage3_11001 );
    sensitive << ( trunc_ln708_8_fu_606_p4 );

    SC_METHOD(thread_icmp_ln1494_3_fu_636_p2);
    sensitive << ( threshold_V );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( icmp_ln33_reg_910 );
    sensitive << ( ap_CS_fsm_pp0_stage3 );
    sensitive << ( ap_block_pp0_stage3_11001 );
    sensitive << ( trunc_ln708_s_fu_627_p4 );

    SC_METHOD(thread_icmp_ln1494_fu_573_p2);
    sensitive << ( threshold_V );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( icmp_ln33_reg_910 );
    sensitive << ( ap_CS_fsm_pp0_stage3 );
    sensitive << ( ap_block_pp0_stage3_11001 );
    sensitive << ( trunc_ln708_2_fu_564_p4 );

    SC_METHOD(thread_icmp_ln33_fu_318_p2);
    sensitive << ( size );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_phi_mux_i_1_phi_fu_247_p4 );

    SC_METHOD(thread_icmp_ln54_fu_679_p2);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( icmp_ln33_reg_910 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( add_ln52_2_fu_673_p2 );

    SC_METHOD(thread_mul_ln1118_12_fu_715_p0);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( mul_ln1118_12_fu_715_p00 );

    SC_METHOD(thread_mul_ln1118_12_fu_715_p00);
    sensitive << ( data0_12_V );

    SC_METHOD(thread_mul_ln1118_12_fu_715_p1);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( zext_ln1118_fu_333_p1 );

    SC_METHOD(thread_mul_ln1118_4_fu_703_p0);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( mul_ln1118_4_fu_703_p00 );

    SC_METHOD(thread_mul_ln1118_4_fu_703_p00);
    sensitive << ( data0_4_V );

    SC_METHOD(thread_mul_ln1118_4_fu_703_p1);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( zext_ln1118_fu_333_p1 );

    SC_METHOD(thread_mul_ln1118_8_fu_709_p0);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( mul_ln1118_8_fu_709_p00 );

    SC_METHOD(thread_mul_ln1118_8_fu_709_p00);
    sensitive << ( data0_8_V );

    SC_METHOD(thread_mul_ln1118_8_fu_709_p1);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( zext_ln1118_fu_333_p1 );

    SC_METHOD(thread_mul_ln1118_fu_697_p0);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( mul_ln1118_fu_697_p00 );

    SC_METHOD(thread_mul_ln1118_fu_697_p00);
    sensitive << ( data0_0_V );

    SC_METHOD(thread_mul_ln1118_fu_697_p1);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( zext_ln1118_fu_333_p1 );

    SC_METHOD(thread_my_input1_V_0_ack_in);
    sensitive << ( my_input1_V_0_state );

    SC_METHOD(thread_my_input1_V_0_ack_out);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( icmp_ln33_fu_318_p2 );
    sensitive << ( ap_CS_fsm_pp0_stage1 );
    sensitive << ( icmp_ln33_reg_910 );
    sensitive << ( ap_CS_fsm_pp0_stage2 );
    sensitive << ( ap_CS_fsm_pp0_stage3 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_block_pp0_stage1_11001 );
    sensitive << ( ap_block_pp0_stage2_11001 );
    sensitive << ( ap_block_pp0_stage3_11001 );

    SC_METHOD(thread_my_input1_V_0_data_out);
    sensitive << ( my_input1_V_0_payload_A );
    sensitive << ( my_input1_V_0_payload_B );
    sensitive << ( my_input1_V_0_sel );

    SC_METHOD(thread_my_input1_V_0_load_A);
    sensitive << ( my_input1_V_0_sel_wr );
    sensitive << ( my_input1_V_0_state_cmp_full );

    SC_METHOD(thread_my_input1_V_0_load_B);
    sensitive << ( my_input1_V_0_sel_wr );
    sensitive << ( my_input1_V_0_state_cmp_full );

    SC_METHOD(thread_my_input1_V_0_sel);
    sensitive << ( my_input1_V_0_sel_rd );

    SC_METHOD(thread_my_input1_V_0_state_cmp_full);
    sensitive << ( my_input1_V_0_state );

    SC_METHOD(thread_my_input1_V_0_vld_in);
    sensitive << ( my_input1_V_TVALID );

    SC_METHOD(thread_my_input1_V_0_vld_out);
    sensitive << ( my_input1_V_0_state );

    SC_METHOD(thread_my_input1_V_TDATA_blk_n);
    sensitive << ( my_input1_V_0_state );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( icmp_ln33_fu_318_p2 );
    sensitive << ( ap_CS_fsm_pp0_stage1 );
    sensitive << ( ap_block_pp0_stage1 );
    sensitive << ( icmp_ln33_reg_910 );
    sensitive << ( ap_CS_fsm_pp0_stage2 );
    sensitive << ( ap_block_pp0_stage2 );
    sensitive << ( ap_CS_fsm_pp0_stage3 );
    sensitive << ( ap_block_pp0_stage3 );

    SC_METHOD(thread_my_input1_V_TREADY);
    sensitive << ( my_input1_V_0_state );

    SC_METHOD(thread_my_output_V_1_ack_in);
    sensitive << ( my_output_V_1_state );

    SC_METHOD(thread_my_output_V_1_ack_out);
    sensitive << ( my_output_V_TREADY );

    SC_METHOD(thread_my_output_V_1_data_out);
    sensitive << ( my_output_V_1_payload_A );
    sensitive << ( my_output_V_1_payload_B );
    sensitive << ( my_output_V_1_sel );

    SC_METHOD(thread_my_output_V_1_load_A);
    sensitive << ( my_output_V_1_sel_wr );
    sensitive << ( my_output_V_1_state_cmp_full );

    SC_METHOD(thread_my_output_V_1_load_B);
    sensitive << ( my_output_V_1_sel_wr );
    sensitive << ( my_output_V_1_state_cmp_full );

    SC_METHOD(thread_my_output_V_1_sel);
    sensitive << ( my_output_V_1_sel_rd );

    SC_METHOD(thread_my_output_V_1_state_cmp_full);
    sensitive << ( my_output_V_1_state );

    SC_METHOD(thread_my_output_V_1_vld_in);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( icmp_ln33_reg_910 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_my_output_V_1_vld_out);
    sensitive << ( my_output_V_1_state );

    SC_METHOD(thread_my_output_V_TDATA);
    sensitive << ( my_output_V_1_data_out );

    SC_METHOD(thread_my_output_V_TDATA_blk_n);
    sensitive << ( my_output_V_1_state );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( ap_CS_fsm_pp0_stage1 );
    sensitive << ( ap_block_pp0_stage1 );
    sensitive << ( icmp_ln33_reg_910 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( icmp_ln33_reg_910_pp0_iter1_reg );

    SC_METHOD(thread_my_output_V_TVALID);
    sensitive << ( my_output_V_1_state );

    SC_METHOD(thread_select_ln54_fu_685_p3);
    sensitive << ( trunc_ln708_s_reg_994 );
    sensitive << ( icmp_ln54_fu_679_p2 );

    SC_METHOD(thread_shl_ln728_2_fu_489_p3);
    sensitive << ( tmp_5_reg_944 );

    SC_METHOD(thread_shl_ln728_4_fu_509_p3);
    sensitive << ( tmp_8_reg_949 );

    SC_METHOD(thread_shl_ln728_6_fu_529_p3);
    sensitive << ( tmp_10_reg_954 );

    SC_METHOD(thread_shl_ln_fu_469_p3);
    sensitive << ( tmp_2_reg_939 );

    SC_METHOD(thread_trunc_ln356_1_fu_373_p1);
    sensitive << ( my_input1_V_0_data_out );

    SC_METHOD(thread_trunc_ln356_2_fu_461_p1);
    sensitive << ( my_input1_V_0_data_out );

    SC_METHOD(thread_trunc_ln356_3_fu_549_p1);
    sensitive << ( my_input1_V_0_data_out );

    SC_METHOD(thread_trunc_ln356_fu_329_p1);
    sensitive << ( my_input1_V_0_data_out );

    SC_METHOD(thread_trunc_ln708_2_fu_564_p4);
    sensitive << ( grp_fu_785_p3 );

    SC_METHOD(thread_trunc_ln708_5_fu_585_p4);
    sensitive << ( grp_fu_793_p3 );

    SC_METHOD(thread_trunc_ln708_8_fu_606_p4);
    sensitive << ( grp_fu_801_p3 );

    SC_METHOD(thread_trunc_ln708_s_fu_627_p4);
    sensitive << ( grp_fu_809_p3 );

    SC_METHOD(thread_zext_ln1118_1_fu_384_p1);
    sensitive << ( trunc_ln356_1_fu_373_p1 );

    SC_METHOD(thread_zext_ln1118_2_fu_465_p1);
    sensitive << ( trunc_ln356_2_fu_461_p1 );

    SC_METHOD(thread_zext_ln1118_3_fu_553_p1);
    sensitive << ( trunc_ln356_3_fu_549_p1 );

    SC_METHOD(thread_zext_ln1118_4_fu_641_p1);
    sensitive << ( icmp_ln1494_reg_979 );

    SC_METHOD(thread_zext_ln1118_5_fu_644_p1);
    sensitive << ( icmp_ln1494_1_reg_984 );

    SC_METHOD(thread_zext_ln1118_6_fu_647_p1);
    sensitive << ( icmp_ln1494_2_reg_989 );

    SC_METHOD(thread_zext_ln1118_fu_333_p1);
    sensitive << ( trunc_ln356_fu_329_p1 );

    SC_METHOD(thread_zext_ln356_fu_692_p1);
    sensitive << ( select_ln54_fu_685_p3 );

    SC_METHOD(thread_zext_ln52_1_fu_659_p1);
    sensitive << ( add_ln52_fu_653_p2 );

    SC_METHOD(thread_zext_ln52_2_fu_669_p1);
    sensitive << ( add_ln52_1_fu_663_p2 );

    SC_METHOD(thread_zext_ln52_fu_650_p1);
    sensitive << ( icmp_ln1494_3_reg_999 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( my_output_V_TREADY );
    sensitive << ( my_output_V_1_state );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( icmp_ln33_fu_318_p2 );
    sensitive << ( ap_CS_fsm_pp0_stage1 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0_subdone );
    sensitive << ( ap_block_pp0_stage3_subdone );
    sensitive << ( ap_block_pp0_stage1_subdone );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_block_pp0_stage2_subdone );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    ap_CS_fsm = "000001";
    my_input1_V_0_sel_rd = SC_LOGIC_0;
    my_input1_V_0_sel_wr = SC_LOGIC_0;
    my_input1_V_0_state = "00";
    my_output_V_1_sel_rd = SC_LOGIC_0;
    my_output_V_1_sel_wr = SC_LOGIC_0;
    my_output_V_1_state = "00";
    ap_enable_reg_pp0_iter0 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter1 = SC_LOGIC_0;
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "myFuncAccel4_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst_n, "(port)ap_rst_n");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, size, "(port)size");
    sc_trace(mVcdFile, dim, "(port)dim");
    sc_trace(mVcdFile, threshold_V, "(port)threshold_V");
    sc_trace(mVcdFile, data0_0_V, "(port)data0_0_V");
    sc_trace(mVcdFile, data0_1_V, "(port)data0_1_V");
    sc_trace(mVcdFile, data0_2_V, "(port)data0_2_V");
    sc_trace(mVcdFile, data0_3_V, "(port)data0_3_V");
    sc_trace(mVcdFile, data0_4_V, "(port)data0_4_V");
    sc_trace(mVcdFile, data0_5_V, "(port)data0_5_V");
    sc_trace(mVcdFile, data0_6_V, "(port)data0_6_V");
    sc_trace(mVcdFile, data0_7_V, "(port)data0_7_V");
    sc_trace(mVcdFile, data0_8_V, "(port)data0_8_V");
    sc_trace(mVcdFile, data0_9_V, "(port)data0_9_V");
    sc_trace(mVcdFile, data0_10_V, "(port)data0_10_V");
    sc_trace(mVcdFile, data0_11_V, "(port)data0_11_V");
    sc_trace(mVcdFile, data0_12_V, "(port)data0_12_V");
    sc_trace(mVcdFile, data0_13_V, "(port)data0_13_V");
    sc_trace(mVcdFile, data0_14_V, "(port)data0_14_V");
    sc_trace(mVcdFile, data0_15_V, "(port)data0_15_V");
    sc_trace(mVcdFile, my_input1_V_TDATA, "(port)my_input1_V_TDATA");
    sc_trace(mVcdFile, my_input1_V_TVALID, "(port)my_input1_V_TVALID");
    sc_trace(mVcdFile, my_input1_V_TREADY, "(port)my_input1_V_TREADY");
    sc_trace(mVcdFile, my_output_V_TDATA, "(port)my_output_V_TDATA");
    sc_trace(mVcdFile, my_output_V_TVALID, "(port)my_output_V_TVALID");
    sc_trace(mVcdFile, my_output_V_TREADY, "(port)my_output_V_TREADY");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_rst_n_inv, "ap_rst_n_inv");
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, my_input1_V_0_data_out, "my_input1_V_0_data_out");
    sc_trace(mVcdFile, my_input1_V_0_vld_in, "my_input1_V_0_vld_in");
    sc_trace(mVcdFile, my_input1_V_0_vld_out, "my_input1_V_0_vld_out");
    sc_trace(mVcdFile, my_input1_V_0_ack_in, "my_input1_V_0_ack_in");
    sc_trace(mVcdFile, my_input1_V_0_ack_out, "my_input1_V_0_ack_out");
    sc_trace(mVcdFile, my_input1_V_0_payload_A, "my_input1_V_0_payload_A");
    sc_trace(mVcdFile, my_input1_V_0_payload_B, "my_input1_V_0_payload_B");
    sc_trace(mVcdFile, my_input1_V_0_sel_rd, "my_input1_V_0_sel_rd");
    sc_trace(mVcdFile, my_input1_V_0_sel_wr, "my_input1_V_0_sel_wr");
    sc_trace(mVcdFile, my_input1_V_0_sel, "my_input1_V_0_sel");
    sc_trace(mVcdFile, my_input1_V_0_load_A, "my_input1_V_0_load_A");
    sc_trace(mVcdFile, my_input1_V_0_load_B, "my_input1_V_0_load_B");
    sc_trace(mVcdFile, my_input1_V_0_state, "my_input1_V_0_state");
    sc_trace(mVcdFile, my_input1_V_0_state_cmp_full, "my_input1_V_0_state_cmp_full");
    sc_trace(mVcdFile, my_output_V_1_data_out, "my_output_V_1_data_out");
    sc_trace(mVcdFile, my_output_V_1_vld_in, "my_output_V_1_vld_in");
    sc_trace(mVcdFile, my_output_V_1_vld_out, "my_output_V_1_vld_out");
    sc_trace(mVcdFile, my_output_V_1_ack_in, "my_output_V_1_ack_in");
    sc_trace(mVcdFile, my_output_V_1_ack_out, "my_output_V_1_ack_out");
    sc_trace(mVcdFile, my_output_V_1_payload_A, "my_output_V_1_payload_A");
    sc_trace(mVcdFile, my_output_V_1_payload_B, "my_output_V_1_payload_B");
    sc_trace(mVcdFile, my_output_V_1_sel_rd, "my_output_V_1_sel_rd");
    sc_trace(mVcdFile, my_output_V_1_sel_wr, "my_output_V_1_sel_wr");
    sc_trace(mVcdFile, my_output_V_1_sel, "my_output_V_1_sel");
    sc_trace(mVcdFile, my_output_V_1_load_A, "my_output_V_1_load_A");
    sc_trace(mVcdFile, my_output_V_1_load_B, "my_output_V_1_load_B");
    sc_trace(mVcdFile, my_output_V_1_state, "my_output_V_1_state");
    sc_trace(mVcdFile, my_output_V_1_state_cmp_full, "my_output_V_1_state_cmp_full");
    sc_trace(mVcdFile, my_input1_V_TDATA_blk_n, "my_input1_V_TDATA_blk_n");
    sc_trace(mVcdFile, ap_CS_fsm_pp0_stage0, "ap_CS_fsm_pp0_stage0");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter0, "ap_enable_reg_pp0_iter0");
    sc_trace(mVcdFile, ap_block_pp0_stage0, "ap_block_pp0_stage0");
    sc_trace(mVcdFile, icmp_ln33_fu_318_p2, "icmp_ln33_fu_318_p2");
    sc_trace(mVcdFile, ap_CS_fsm_pp0_stage1, "ap_CS_fsm_pp0_stage1");
    sc_trace(mVcdFile, ap_block_pp0_stage1, "ap_block_pp0_stage1");
    sc_trace(mVcdFile, icmp_ln33_reg_910, "icmp_ln33_reg_910");
    sc_trace(mVcdFile, ap_CS_fsm_pp0_stage2, "ap_CS_fsm_pp0_stage2");
    sc_trace(mVcdFile, ap_block_pp0_stage2, "ap_block_pp0_stage2");
    sc_trace(mVcdFile, ap_CS_fsm_pp0_stage3, "ap_CS_fsm_pp0_stage3");
    sc_trace(mVcdFile, ap_block_pp0_stage3, "ap_block_pp0_stage3");
    sc_trace(mVcdFile, my_output_V_TDATA_blk_n, "my_output_V_TDATA_blk_n");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter1, "ap_enable_reg_pp0_iter1");
    sc_trace(mVcdFile, icmp_ln33_reg_910_pp0_iter1_reg, "icmp_ln33_reg_910_pp0_iter1_reg");
    sc_trace(mVcdFile, i_1_reg_243, "i_1_reg_243");
    sc_trace(mVcdFile, ap_block_state2_pp0_stage0_iter0, "ap_block_state2_pp0_stage0_iter0");
    sc_trace(mVcdFile, ap_block_state6_pp0_stage0_iter1, "ap_block_state6_pp0_stage0_iter1");
    sc_trace(mVcdFile, ap_block_state6_io, "ap_block_state6_io");
    sc_trace(mVcdFile, ap_block_pp0_stage0_11001, "ap_block_pp0_stage0_11001");
    sc_trace(mVcdFile, i_fu_323_p2, "i_fu_323_p2");
    sc_trace(mVcdFile, i_reg_914, "i_reg_914");
    sc_trace(mVcdFile, tmp_1_reg_919, "tmp_1_reg_919");
    sc_trace(mVcdFile, tmp_4_reg_924, "tmp_4_reg_924");
    sc_trace(mVcdFile, tmp_7_reg_929, "tmp_7_reg_929");
    sc_trace(mVcdFile, tmp_s_reg_934, "tmp_s_reg_934");
    sc_trace(mVcdFile, tmp_2_reg_939, "tmp_2_reg_939");
    sc_trace(mVcdFile, ap_block_state3_pp0_stage1_iter0, "ap_block_state3_pp0_stage1_iter0");
    sc_trace(mVcdFile, ap_block_state7_pp0_stage1_iter1, "ap_block_state7_pp0_stage1_iter1");
    sc_trace(mVcdFile, ap_block_state7_io, "ap_block_state7_io");
    sc_trace(mVcdFile, ap_block_pp0_stage1_11001, "ap_block_pp0_stage1_11001");
    sc_trace(mVcdFile, tmp_5_reg_944, "tmp_5_reg_944");
    sc_trace(mVcdFile, tmp_8_reg_949, "tmp_8_reg_949");
    sc_trace(mVcdFile, tmp_10_reg_954, "tmp_10_reg_954");
    sc_trace(mVcdFile, tmp_3_reg_959, "tmp_3_reg_959");
    sc_trace(mVcdFile, ap_block_state4_pp0_stage2_iter0, "ap_block_state4_pp0_stage2_iter0");
    sc_trace(mVcdFile, ap_block_pp0_stage2_11001, "ap_block_pp0_stage2_11001");
    sc_trace(mVcdFile, tmp_6_reg_964, "tmp_6_reg_964");
    sc_trace(mVcdFile, tmp_9_reg_969, "tmp_9_reg_969");
    sc_trace(mVcdFile, tmp_11_reg_974, "tmp_11_reg_974");
    sc_trace(mVcdFile, icmp_ln1494_fu_573_p2, "icmp_ln1494_fu_573_p2");
    sc_trace(mVcdFile, icmp_ln1494_reg_979, "icmp_ln1494_reg_979");
    sc_trace(mVcdFile, ap_block_state5_pp0_stage3_iter0, "ap_block_state5_pp0_stage3_iter0");
    sc_trace(mVcdFile, ap_block_pp0_stage3_11001, "ap_block_pp0_stage3_11001");
    sc_trace(mVcdFile, icmp_ln1494_1_fu_594_p2, "icmp_ln1494_1_fu_594_p2");
    sc_trace(mVcdFile, icmp_ln1494_1_reg_984, "icmp_ln1494_1_reg_984");
    sc_trace(mVcdFile, icmp_ln1494_2_fu_615_p2, "icmp_ln1494_2_fu_615_p2");
    sc_trace(mVcdFile, icmp_ln1494_2_reg_989, "icmp_ln1494_2_reg_989");
    sc_trace(mVcdFile, trunc_ln708_s_fu_627_p4, "trunc_ln708_s_fu_627_p4");
    sc_trace(mVcdFile, trunc_ln708_s_reg_994, "trunc_ln708_s_reg_994");
    sc_trace(mVcdFile, icmp_ln1494_3_fu_636_p2, "icmp_ln1494_3_fu_636_p2");
    sc_trace(mVcdFile, icmp_ln1494_3_reg_999, "icmp_ln1494_3_reg_999");
    sc_trace(mVcdFile, zext_ln356_fu_692_p1, "zext_ln356_fu_692_p1");
    sc_trace(mVcdFile, ap_block_pp0_stage0_subdone, "ap_block_pp0_stage0_subdone");
    sc_trace(mVcdFile, ap_condition_pp0_exit_iter0_state2, "ap_condition_pp0_exit_iter0_state2");
    sc_trace(mVcdFile, ap_block_pp0_stage3_subdone, "ap_block_pp0_stage3_subdone");
    sc_trace(mVcdFile, ap_block_pp0_stage1_subdone, "ap_block_pp0_stage1_subdone");
    sc_trace(mVcdFile, ap_phi_mux_i_1_phi_fu_247_p4, "ap_phi_mux_i_1_phi_fu_247_p4");
    sc_trace(mVcdFile, ap_block_pp0_stage0_01001, "ap_block_pp0_stage0_01001");
    sc_trace(mVcdFile, trunc_ln356_fu_329_p1, "trunc_ln356_fu_329_p1");
    sc_trace(mVcdFile, mul_ln1118_fu_697_p2, "mul_ln1118_fu_697_p2");
    sc_trace(mVcdFile, mul_ln1118_4_fu_703_p2, "mul_ln1118_4_fu_703_p2");
    sc_trace(mVcdFile, mul_ln1118_8_fu_709_p2, "mul_ln1118_8_fu_709_p2");
    sc_trace(mVcdFile, mul_ln1118_12_fu_715_p2, "mul_ln1118_12_fu_715_p2");
    sc_trace(mVcdFile, trunc_ln356_1_fu_373_p1, "trunc_ln356_1_fu_373_p1");
    sc_trace(mVcdFile, and_ln_fu_377_p3, "and_ln_fu_377_p3");
    sc_trace(mVcdFile, grp_fu_721_p3, "grp_fu_721_p3");
    sc_trace(mVcdFile, and_ln728_1_fu_401_p3, "and_ln728_1_fu_401_p3");
    sc_trace(mVcdFile, grp_fu_729_p3, "grp_fu_729_p3");
    sc_trace(mVcdFile, and_ln728_2_fu_421_p3, "and_ln728_2_fu_421_p3");
    sc_trace(mVcdFile, grp_fu_737_p3, "grp_fu_737_p3");
    sc_trace(mVcdFile, and_ln728_3_fu_441_p3, "and_ln728_3_fu_441_p3");
    sc_trace(mVcdFile, grp_fu_745_p3, "grp_fu_745_p3");
    sc_trace(mVcdFile, trunc_ln356_2_fu_461_p1, "trunc_ln356_2_fu_461_p1");
    sc_trace(mVcdFile, shl_ln_fu_469_p3, "shl_ln_fu_469_p3");
    sc_trace(mVcdFile, grp_fu_753_p3, "grp_fu_753_p3");
    sc_trace(mVcdFile, shl_ln728_2_fu_489_p3, "shl_ln728_2_fu_489_p3");
    sc_trace(mVcdFile, grp_fu_761_p3, "grp_fu_761_p3");
    sc_trace(mVcdFile, shl_ln728_4_fu_509_p3, "shl_ln728_4_fu_509_p3");
    sc_trace(mVcdFile, grp_fu_769_p3, "grp_fu_769_p3");
    sc_trace(mVcdFile, shl_ln728_6_fu_529_p3, "shl_ln728_6_fu_529_p3");
    sc_trace(mVcdFile, grp_fu_777_p3, "grp_fu_777_p3");
    sc_trace(mVcdFile, trunc_ln356_3_fu_549_p1, "trunc_ln356_3_fu_549_p1");
    sc_trace(mVcdFile, grp_fu_785_p3, "grp_fu_785_p3");
    sc_trace(mVcdFile, trunc_ln708_2_fu_564_p4, "trunc_ln708_2_fu_564_p4");
    sc_trace(mVcdFile, grp_fu_793_p3, "grp_fu_793_p3");
    sc_trace(mVcdFile, trunc_ln708_5_fu_585_p4, "trunc_ln708_5_fu_585_p4");
    sc_trace(mVcdFile, grp_fu_801_p3, "grp_fu_801_p3");
    sc_trace(mVcdFile, trunc_ln708_8_fu_606_p4, "trunc_ln708_8_fu_606_p4");
    sc_trace(mVcdFile, grp_fu_809_p3, "grp_fu_809_p3");
    sc_trace(mVcdFile, zext_ln1118_4_fu_641_p1, "zext_ln1118_4_fu_641_p1");
    sc_trace(mVcdFile, zext_ln1118_5_fu_644_p1, "zext_ln1118_5_fu_644_p1");
    sc_trace(mVcdFile, add_ln52_fu_653_p2, "add_ln52_fu_653_p2");
    sc_trace(mVcdFile, zext_ln52_fu_650_p1, "zext_ln52_fu_650_p1");
    sc_trace(mVcdFile, zext_ln1118_6_fu_647_p1, "zext_ln1118_6_fu_647_p1");
    sc_trace(mVcdFile, add_ln52_1_fu_663_p2, "add_ln52_1_fu_663_p2");
    sc_trace(mVcdFile, zext_ln52_1_fu_659_p1, "zext_ln52_1_fu_659_p1");
    sc_trace(mVcdFile, zext_ln52_2_fu_669_p1, "zext_ln52_2_fu_669_p1");
    sc_trace(mVcdFile, add_ln52_2_fu_673_p2, "add_ln52_2_fu_673_p2");
    sc_trace(mVcdFile, icmp_ln54_fu_679_p2, "icmp_ln54_fu_679_p2");
    sc_trace(mVcdFile, select_ln54_fu_685_p3, "select_ln54_fu_685_p3");
    sc_trace(mVcdFile, mul_ln1118_fu_697_p0, "mul_ln1118_fu_697_p0");
    sc_trace(mVcdFile, mul_ln1118_fu_697_p1, "mul_ln1118_fu_697_p1");
    sc_trace(mVcdFile, zext_ln1118_fu_333_p1, "zext_ln1118_fu_333_p1");
    sc_trace(mVcdFile, mul_ln1118_4_fu_703_p0, "mul_ln1118_4_fu_703_p0");
    sc_trace(mVcdFile, mul_ln1118_4_fu_703_p1, "mul_ln1118_4_fu_703_p1");
    sc_trace(mVcdFile, mul_ln1118_8_fu_709_p0, "mul_ln1118_8_fu_709_p0");
    sc_trace(mVcdFile, mul_ln1118_8_fu_709_p1, "mul_ln1118_8_fu_709_p1");
    sc_trace(mVcdFile, mul_ln1118_12_fu_715_p0, "mul_ln1118_12_fu_715_p0");
    sc_trace(mVcdFile, mul_ln1118_12_fu_715_p1, "mul_ln1118_12_fu_715_p1");
    sc_trace(mVcdFile, grp_fu_721_p0, "grp_fu_721_p0");
    sc_trace(mVcdFile, grp_fu_721_p1, "grp_fu_721_p1");
    sc_trace(mVcdFile, zext_ln1118_1_fu_384_p1, "zext_ln1118_1_fu_384_p1");
    sc_trace(mVcdFile, grp_fu_721_p2, "grp_fu_721_p2");
    sc_trace(mVcdFile, grp_fu_729_p0, "grp_fu_729_p0");
    sc_trace(mVcdFile, grp_fu_729_p1, "grp_fu_729_p1");
    sc_trace(mVcdFile, grp_fu_729_p2, "grp_fu_729_p2");
    sc_trace(mVcdFile, grp_fu_737_p0, "grp_fu_737_p0");
    sc_trace(mVcdFile, grp_fu_737_p1, "grp_fu_737_p1");
    sc_trace(mVcdFile, grp_fu_737_p2, "grp_fu_737_p2");
    sc_trace(mVcdFile, grp_fu_745_p0, "grp_fu_745_p0");
    sc_trace(mVcdFile, grp_fu_745_p1, "grp_fu_745_p1");
    sc_trace(mVcdFile, grp_fu_745_p2, "grp_fu_745_p2");
    sc_trace(mVcdFile, grp_fu_753_p0, "grp_fu_753_p0");
    sc_trace(mVcdFile, grp_fu_753_p1, "grp_fu_753_p1");
    sc_trace(mVcdFile, zext_ln1118_2_fu_465_p1, "zext_ln1118_2_fu_465_p1");
    sc_trace(mVcdFile, grp_fu_753_p2, "grp_fu_753_p2");
    sc_trace(mVcdFile, grp_fu_761_p0, "grp_fu_761_p0");
    sc_trace(mVcdFile, grp_fu_761_p1, "grp_fu_761_p1");
    sc_trace(mVcdFile, grp_fu_761_p2, "grp_fu_761_p2");
    sc_trace(mVcdFile, grp_fu_769_p0, "grp_fu_769_p0");
    sc_trace(mVcdFile, grp_fu_769_p1, "grp_fu_769_p1");
    sc_trace(mVcdFile, grp_fu_769_p2, "grp_fu_769_p2");
    sc_trace(mVcdFile, grp_fu_777_p0, "grp_fu_777_p0");
    sc_trace(mVcdFile, grp_fu_777_p1, "grp_fu_777_p1");
    sc_trace(mVcdFile, grp_fu_777_p2, "grp_fu_777_p2");
    sc_trace(mVcdFile, grp_fu_785_p0, "grp_fu_785_p0");
    sc_trace(mVcdFile, grp_fu_785_p1, "grp_fu_785_p1");
    sc_trace(mVcdFile, zext_ln1118_3_fu_553_p1, "zext_ln1118_3_fu_553_p1");
    sc_trace(mVcdFile, grp_fu_785_p2, "grp_fu_785_p2");
    sc_trace(mVcdFile, grp_fu_793_p0, "grp_fu_793_p0");
    sc_trace(mVcdFile, grp_fu_793_p1, "grp_fu_793_p1");
    sc_trace(mVcdFile, grp_fu_793_p2, "grp_fu_793_p2");
    sc_trace(mVcdFile, grp_fu_801_p0, "grp_fu_801_p0");
    sc_trace(mVcdFile, grp_fu_801_p1, "grp_fu_801_p1");
    sc_trace(mVcdFile, grp_fu_801_p2, "grp_fu_801_p2");
    sc_trace(mVcdFile, grp_fu_809_p0, "grp_fu_809_p0");
    sc_trace(mVcdFile, grp_fu_809_p1, "grp_fu_809_p1");
    sc_trace(mVcdFile, grp_fu_809_p2, "grp_fu_809_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state8, "ap_CS_fsm_state8");
    sc_trace(mVcdFile, ap_block_state8, "ap_block_state8");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
    sc_trace(mVcdFile, ap_block_pp0_stage2_subdone, "ap_block_pp0_stage2_subdone");
    sc_trace(mVcdFile, ap_idle_pp0, "ap_idle_pp0");
    sc_trace(mVcdFile, ap_enable_pp0, "ap_enable_pp0");
    sc_trace(mVcdFile, grp_fu_721_p00, "grp_fu_721_p00");
    sc_trace(mVcdFile, grp_fu_721_p20, "grp_fu_721_p20");
    sc_trace(mVcdFile, grp_fu_729_p00, "grp_fu_729_p00");
    sc_trace(mVcdFile, grp_fu_729_p20, "grp_fu_729_p20");
    sc_trace(mVcdFile, grp_fu_737_p00, "grp_fu_737_p00");
    sc_trace(mVcdFile, grp_fu_737_p20, "grp_fu_737_p20");
    sc_trace(mVcdFile, grp_fu_745_p00, "grp_fu_745_p00");
    sc_trace(mVcdFile, grp_fu_745_p20, "grp_fu_745_p20");
    sc_trace(mVcdFile, grp_fu_753_p00, "grp_fu_753_p00");
    sc_trace(mVcdFile, grp_fu_753_p20, "grp_fu_753_p20");
    sc_trace(mVcdFile, grp_fu_761_p00, "grp_fu_761_p00");
    sc_trace(mVcdFile, grp_fu_761_p20, "grp_fu_761_p20");
    sc_trace(mVcdFile, grp_fu_769_p00, "grp_fu_769_p00");
    sc_trace(mVcdFile, grp_fu_769_p20, "grp_fu_769_p20");
    sc_trace(mVcdFile, grp_fu_777_p00, "grp_fu_777_p00");
    sc_trace(mVcdFile, grp_fu_777_p20, "grp_fu_777_p20");
    sc_trace(mVcdFile, grp_fu_785_p00, "grp_fu_785_p00");
    sc_trace(mVcdFile, grp_fu_793_p00, "grp_fu_793_p00");
    sc_trace(mVcdFile, grp_fu_801_p00, "grp_fu_801_p00");
    sc_trace(mVcdFile, grp_fu_809_p00, "grp_fu_809_p00");
    sc_trace(mVcdFile, mul_ln1118_12_fu_715_p00, "mul_ln1118_12_fu_715_p00");
    sc_trace(mVcdFile, mul_ln1118_4_fu_703_p00, "mul_ln1118_4_fu_703_p00");
    sc_trace(mVcdFile, mul_ln1118_8_fu_709_p00, "mul_ln1118_8_fu_709_p00");
    sc_trace(mVcdFile, mul_ln1118_fu_697_p00, "mul_ln1118_fu_697_p00");
#endif

    }
    mHdltvinHandle.open("myFuncAccel4.hdltvin.dat");
    mHdltvoutHandle.open("myFuncAccel4.hdltvout.dat");
}

myFuncAccel4::~myFuncAccel4() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
    delete myFuncAccel4_mul_mul_17ns_17ns_34_1_1_U1;
    delete myFuncAccel4_mul_mul_17ns_17ns_34_1_1_U2;
    delete myFuncAccel4_mul_mul_17ns_17ns_34_1_1_U3;
    delete myFuncAccel4_mul_mul_17ns_17ns_34_1_1_U4;
    delete myFuncAccel4_mac_muladd_17ns_17ns_34ns_35_1_1_U5;
    delete myFuncAccel4_mac_muladd_17ns_17ns_34ns_35_1_1_U6;
    delete myFuncAccel4_mac_muladd_17ns_17ns_34ns_35_1_1_U7;
    delete myFuncAccel4_mac_muladd_17ns_17ns_34ns_35_1_1_U8;
    delete myFuncAccel4_mac_muladd_17ns_17ns_35ns_36_1_1_U9;
    delete myFuncAccel4_mac_muladd_17ns_17ns_35ns_36_1_1_U10;
    delete myFuncAccel4_mac_muladd_17ns_17ns_35ns_36_1_1_U11;
    delete myFuncAccel4_mac_muladd_17ns_17ns_35ns_36_1_1_U12;
    delete myFuncAccel4_mac_muladd_17ns_17ns_36ns_36_1_1_U13;
    delete myFuncAccel4_mac_muladd_17ns_17ns_36ns_36_1_1_U14;
    delete myFuncAccel4_mac_muladd_17ns_17ns_36ns_36_1_1_U15;
    delete myFuncAccel4_mac_muladd_17ns_17ns_36ns_36_1_1_U16;
}

void myFuncAccel4::thread_ap_clk_no_reset_() {
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter0 = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
             esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && 
             esl_seteq<1,1,1>(ap_const_logic_1, ap_condition_pp0_exit_iter0_state2.read()))) {
            ap_enable_reg_pp0_iter0 = ap_const_logic_0;
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                    esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
            ap_enable_reg_pp0_iter0 = ap_const_logic_1;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter1 = ap_const_logic_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage3.read()) && 
              esl_seteq<1,1,1>(ap_block_pp0_stage3_subdone.read(), ap_const_boolean_0)) || 
             (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage1.read()) && 
              esl_seteq<1,1,1>(ap_block_pp0_stage1_subdone.read(), ap_const_boolean_0)))) {
            ap_enable_reg_pp0_iter1 = ap_enable_reg_pp0_iter0.read();
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                    esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
            ap_enable_reg_pp0_iter1 = ap_const_logic_0;
        }
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        i_1_reg_243 = ap_const_lv32_0;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln33_reg_910.read()) && 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
                esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        i_1_reg_243 = i_reg_914.read();
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        my_input1_V_0_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, my_input1_V_0_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, my_input1_V_0_vld_out.read()))) {
            my_input1_V_0_sel_rd =  (sc_logic) (~my_input1_V_0_sel_rd.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        my_input1_V_0_sel_wr = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, my_input1_V_0_vld_in.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, my_input1_V_0_ack_in.read()))) {
            my_input1_V_0_sel_wr =  (sc_logic) (~my_input1_V_0_sel_wr.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        my_input1_V_0_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, my_input1_V_0_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, my_input1_V_0_ack_out.read()) && 
              esl_seteq<1,2,2>(my_input1_V_0_state.read(), ap_const_lv2_3)) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, my_input1_V_0_vld_in.read()) && 
              esl_seteq<1,2,2>(my_input1_V_0_state.read(), ap_const_lv2_2)))) {
            my_input1_V_0_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, my_input1_V_0_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, my_input1_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(my_input1_V_0_state.read(), ap_const_lv2_3)) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, my_input1_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(my_input1_V_0_state.read(), ap_const_lv2_1)))) {
            my_input1_V_0_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, my_input1_V_0_vld_in.read()) && 
                     esl_seteq<1,2,2>(my_input1_V_0_state.read(), ap_const_lv2_2)) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, my_input1_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(my_input1_V_0_state.read(), ap_const_lv2_1)) || 
                    (esl_seteq<1,2,2>(my_input1_V_0_state.read(), ap_const_lv2_3) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, my_input1_V_0_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, my_input1_V_0_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, my_input1_V_0_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, my_input1_V_0_ack_out.read()))))) {
            my_input1_V_0_state = ap_const_lv2_3;
        } else {
            my_input1_V_0_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        my_output_V_1_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, my_output_V_1_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, my_output_V_1_vld_out.read()))) {
            my_output_V_1_sel_rd =  (sc_logic) (~my_output_V_1_sel_rd.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        my_output_V_1_sel_wr = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, my_output_V_1_vld_in.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, my_output_V_1_ack_in.read()))) {
            my_output_V_1_sel_wr =  (sc_logic) (~my_output_V_1_sel_wr.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        my_output_V_1_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, my_output_V_1_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, my_output_V_1_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, my_output_V_1_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, my_output_V_1_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, my_output_V_1_state.read())))) {
            my_output_V_1_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, my_output_V_1_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, my_output_V_TREADY.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, my_output_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, my_output_V_TREADY.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, my_output_V_1_state.read())))) {
            my_output_V_1_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, my_output_V_1_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, my_output_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, my_output_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, my_output_V_1_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, my_output_V_1_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, my_output_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, my_output_V_TREADY.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, my_output_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, my_output_V_1_ack_out.read()))))) {
            my_output_V_1_state = ap_const_lv2_3;
        } else {
            my_output_V_1_state = ap_const_lv2_2;
        }
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        i_reg_914 = i_fu_323_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln33_reg_910.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage3.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage3_11001.read(), ap_const_boolean_0))) {
        icmp_ln1494_1_reg_984 = icmp_ln1494_1_fu_594_p2.read();
        icmp_ln1494_2_reg_989 = icmp_ln1494_2_fu_615_p2.read();
        icmp_ln1494_3_reg_999 = icmp_ln1494_3_fu_636_p2.read();
        icmp_ln1494_reg_979 = icmp_ln1494_fu_573_p2.read();
        trunc_ln708_s_reg_994 = grp_fu_809_p3.read().range(35, 2);
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        icmp_ln33_reg_910 = icmp_ln33_fu_318_p2.read();
        icmp_ln33_reg_910_pp0_iter1_reg = icmp_ln33_reg_910.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, my_input1_V_0_load_A.read())) {
        my_input1_V_0_payload_A = my_input1_V_TDATA.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, my_input1_V_0_load_B.read())) {
        my_input1_V_0_payload_B = my_input1_V_TDATA.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, my_output_V_1_load_A.read())) {
        my_output_V_1_payload_A = zext_ln356_fu_692_p1.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, my_output_V_1_load_B.read())) {
        my_output_V_1_payload_B = zext_ln356_fu_692_p1.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage1.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln33_reg_910.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage1_11001.read(), ap_const_boolean_0))) {
        tmp_10_reg_954 = grp_fu_745_p3.read().range(34, 2);
        tmp_2_reg_939 = grp_fu_721_p3.read().range(34, 2);
        tmp_5_reg_944 = grp_fu_729_p3.read().range(34, 2);
        tmp_8_reg_949 = grp_fu_737_p3.read().range(34, 2);
    }
    if ((esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln33_reg_910.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage2.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage2_11001.read(), ap_const_boolean_0))) {
        tmp_11_reg_974 = grp_fu_777_p3.read().range(35, 2);
        tmp_3_reg_959 = grp_fu_753_p3.read().range(35, 2);
        tmp_6_reg_964 = grp_fu_761_p3.read().range(35, 2);
        tmp_9_reg_969 = grp_fu_769_p3.read().range(35, 2);
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln33_fu_318_p2.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        tmp_1_reg_919 = mul_ln1118_fu_697_p2.read().range(33, 2);
        tmp_4_reg_924 = mul_ln1118_4_fu_703_p2.read().range(33, 2);
        tmp_7_reg_929 = mul_ln1118_8_fu_709_p2.read().range(33, 2);
        tmp_s_reg_934 = mul_ln1118_12_fu_715_p2.read().range(33, 2);
    }
}

void myFuncAccel4::thread_add_ln52_1_fu_663_p2() {
    add_ln52_1_fu_663_p2 = (!zext_ln52_fu_650_p1.read().is_01() || !zext_ln1118_6_fu_647_p1.read().is_01())? sc_lv<2>(): (sc_biguint<2>(zext_ln52_fu_650_p1.read()) + sc_biguint<2>(zext_ln1118_6_fu_647_p1.read()));
}

void myFuncAccel4::thread_add_ln52_2_fu_673_p2() {
    add_ln52_2_fu_673_p2 = (!zext_ln52_1_fu_659_p1.read().is_01() || !zext_ln52_2_fu_669_p1.read().is_01())? sc_lv<3>(): (sc_biguint<3>(zext_ln52_1_fu_659_p1.read()) + sc_biguint<3>(zext_ln52_2_fu_669_p1.read()));
}

void myFuncAccel4::thread_add_ln52_fu_653_p2() {
    add_ln52_fu_653_p2 = (!zext_ln1118_4_fu_641_p1.read().is_01() || !zext_ln1118_5_fu_644_p1.read().is_01())? sc_lv<2>(): (sc_biguint<2>(zext_ln1118_4_fu_641_p1.read()) + sc_biguint<2>(zext_ln1118_5_fu_644_p1.read()));
}

void myFuncAccel4::thread_and_ln728_1_fu_401_p3() {
    and_ln728_1_fu_401_p3 = esl_concat<32,2>(tmp_4_reg_924.read(), ap_const_lv2_0);
}

void myFuncAccel4::thread_and_ln728_2_fu_421_p3() {
    and_ln728_2_fu_421_p3 = esl_concat<32,2>(tmp_7_reg_929.read(), ap_const_lv2_0);
}

void myFuncAccel4::thread_and_ln728_3_fu_441_p3() {
    and_ln728_3_fu_441_p3 = esl_concat<32,2>(tmp_s_reg_934.read(), ap_const_lv2_0);
}

void myFuncAccel4::thread_and_ln_fu_377_p3() {
    and_ln_fu_377_p3 = esl_concat<32,2>(tmp_1_reg_919.read(), ap_const_lv2_0);
}

void myFuncAccel4::thread_ap_CS_fsm_pp0_stage0() {
    ap_CS_fsm_pp0_stage0 = ap_CS_fsm.read()[1];
}

void myFuncAccel4::thread_ap_CS_fsm_pp0_stage1() {
    ap_CS_fsm_pp0_stage1 = ap_CS_fsm.read()[2];
}

void myFuncAccel4::thread_ap_CS_fsm_pp0_stage2() {
    ap_CS_fsm_pp0_stage2 = ap_CS_fsm.read()[3];
}

void myFuncAccel4::thread_ap_CS_fsm_pp0_stage3() {
    ap_CS_fsm_pp0_stage3 = ap_CS_fsm.read()[4];
}

void myFuncAccel4::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void myFuncAccel4::thread_ap_CS_fsm_state8() {
    ap_CS_fsm_state8 = ap_CS_fsm.read()[5];
}

void myFuncAccel4::thread_ap_block_pp0_stage0() {
    ap_block_pp0_stage0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void myFuncAccel4::thread_ap_block_pp0_stage0_01001() {
    ap_block_pp0_stage0_01001 = (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln33_fu_318_p2.read()) && esl_seteq<1,1,1>(ap_const_logic_0, my_input1_V_0_vld_out.read()));
}

void myFuncAccel4::thread_ap_block_pp0_stage0_11001() {
    ap_block_pp0_stage0_11001 = ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
  esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln33_fu_318_p2.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, my_input1_V_0_vld_out.read())) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state6_io.read())));
}

void myFuncAccel4::thread_ap_block_pp0_stage0_subdone() {
    ap_block_pp0_stage0_subdone = ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
  esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln33_fu_318_p2.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, my_input1_V_0_vld_out.read())) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state6_io.read())));
}

void myFuncAccel4::thread_ap_block_pp0_stage1() {
    ap_block_pp0_stage1 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void myFuncAccel4::thread_ap_block_pp0_stage1_11001() {
    ap_block_pp0_stage1_11001 = ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
  esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln33_reg_910.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, my_input1_V_0_vld_out.read())) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state7_io.read())));
}

void myFuncAccel4::thread_ap_block_pp0_stage1_subdone() {
    ap_block_pp0_stage1_subdone = ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
  esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln33_reg_910.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, my_input1_V_0_vld_out.read())) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state7_io.read())));
}

void myFuncAccel4::thread_ap_block_pp0_stage2() {
    ap_block_pp0_stage2 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void myFuncAccel4::thread_ap_block_pp0_stage2_11001() {
    ap_block_pp0_stage2_11001 = (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln33_reg_910.read()) && esl_seteq<1,1,1>(ap_const_logic_0, my_input1_V_0_vld_out.read()));
}

void myFuncAccel4::thread_ap_block_pp0_stage2_subdone() {
    ap_block_pp0_stage2_subdone = (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln33_reg_910.read()) && esl_seteq<1,1,1>(ap_const_logic_0, my_input1_V_0_vld_out.read()));
}

void myFuncAccel4::thread_ap_block_pp0_stage3() {
    ap_block_pp0_stage3 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void myFuncAccel4::thread_ap_block_pp0_stage3_11001() {
    ap_block_pp0_stage3_11001 = (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln33_reg_910.read()) && esl_seteq<1,1,1>(ap_const_logic_0, my_input1_V_0_vld_out.read()));
}

void myFuncAccel4::thread_ap_block_pp0_stage3_subdone() {
    ap_block_pp0_stage3_subdone = (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln33_reg_910.read()) && esl_seteq<1,1,1>(ap_const_logic_0, my_input1_V_0_vld_out.read()));
}

void myFuncAccel4::thread_ap_block_state2_pp0_stage0_iter0() {
    ap_block_state2_pp0_stage0_iter0 = (esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln33_fu_318_p2.read()) && esl_seteq<1,1,1>(ap_const_logic_0, my_input1_V_0_vld_out.read()));
}

void myFuncAccel4::thread_ap_block_state3_pp0_stage1_iter0() {
    ap_block_state3_pp0_stage1_iter0 = (esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln33_reg_910.read()) && esl_seteq<1,1,1>(ap_const_logic_0, my_input1_V_0_vld_out.read()));
}

void myFuncAccel4::thread_ap_block_state4_pp0_stage2_iter0() {
    ap_block_state4_pp0_stage2_iter0 = (esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln33_reg_910.read()) && esl_seteq<1,1,1>(ap_const_logic_0, my_input1_V_0_vld_out.read()));
}

void myFuncAccel4::thread_ap_block_state5_pp0_stage3_iter0() {
    ap_block_state5_pp0_stage3_iter0 = (esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln33_reg_910.read()) && esl_seteq<1,1,1>(ap_const_logic_0, my_input1_V_0_vld_out.read()));
}

void myFuncAccel4::thread_ap_block_state6_io() {
    ap_block_state6_io = (esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln33_reg_910.read()) && esl_seteq<1,1,1>(ap_const_logic_0, my_output_V_1_ack_in.read()));
}

void myFuncAccel4::thread_ap_block_state6_pp0_stage0_iter1() {
    ap_block_state6_pp0_stage0_iter1 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void myFuncAccel4::thread_ap_block_state7_io() {
    ap_block_state7_io = (esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln33_reg_910_pp0_iter1_reg.read()) && esl_seteq<1,1,1>(ap_const_logic_0, my_output_V_1_ack_in.read()));
}

void myFuncAccel4::thread_ap_block_state7_pp0_stage1_iter1() {
    ap_block_state7_pp0_stage1_iter1 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void myFuncAccel4::thread_ap_block_state8() {
    ap_block_state8 = (esl_seteq<1,2,2>(ap_const_lv2_1, my_output_V_1_state.read()) || (esl_seteq<1,1,1>(ap_const_logic_0, my_output_V_TREADY.read()) && 
  esl_seteq<1,2,2>(ap_const_lv2_3, my_output_V_1_state.read())));
}

void myFuncAccel4::thread_ap_condition_pp0_exit_iter0_state2() {
    if (esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln33_fu_318_p2.read())) {
        ap_condition_pp0_exit_iter0_state2 = ap_const_logic_1;
    } else {
        ap_condition_pp0_exit_iter0_state2 = ap_const_logic_0;
    }
}

void myFuncAccel4::thread_ap_done() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) && 
         !(esl_seteq<1,2,2>(ap_const_lv2_1, my_output_V_1_state.read()) || (esl_seteq<1,1,1>(ap_const_logic_0, my_output_V_TREADY.read()) && 
  esl_seteq<1,2,2>(ap_const_lv2_3, my_output_V_1_state.read()))))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void myFuncAccel4::thread_ap_enable_pp0() {
    ap_enable_pp0 = (ap_idle_pp0.read() ^ ap_const_logic_1);
}

void myFuncAccel4::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void myFuncAccel4::thread_ap_idle_pp0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter1.read()))) {
        ap_idle_pp0 = ap_const_logic_1;
    } else {
        ap_idle_pp0 = ap_const_logic_0;
    }
}

void myFuncAccel4::thread_ap_phi_mux_i_1_phi_fu_247_p4() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln33_reg_910.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()))) {
        ap_phi_mux_i_1_phi_fu_247_p4 = i_reg_914.read();
    } else {
        ap_phi_mux_i_1_phi_fu_247_p4 = i_1_reg_243.read();
    }
}

void myFuncAccel4::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) && 
         !(esl_seteq<1,2,2>(ap_const_lv2_1, my_output_V_1_state.read()) || (esl_seteq<1,1,1>(ap_const_logic_0, my_output_V_TREADY.read()) && 
  esl_seteq<1,2,2>(ap_const_lv2_3, my_output_V_1_state.read()))))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void myFuncAccel4::thread_ap_rst_n_inv() {
    ap_rst_n_inv =  (sc_logic) (~ap_rst_n.read());
}

void myFuncAccel4::thread_grp_fu_721_p0() {
    grp_fu_721_p0 =  (sc_lv<17>) (grp_fu_721_p00.read());
}

void myFuncAccel4::thread_grp_fu_721_p00() {
    grp_fu_721_p00 = esl_zext<34,17>(data0_1_V.read());
}

void myFuncAccel4::thread_grp_fu_721_p1() {
    grp_fu_721_p1 =  (sc_lv<17>) (zext_ln1118_1_fu_384_p1.read());
}

void myFuncAccel4::thread_grp_fu_721_p2() {
    grp_fu_721_p2 =  (sc_lv<34>) (grp_fu_721_p20.read());
}

void myFuncAccel4::thread_grp_fu_721_p20() {
    grp_fu_721_p20 = esl_zext<35,34>(and_ln_fu_377_p3.read());
}

void myFuncAccel4::thread_grp_fu_729_p0() {
    grp_fu_729_p0 =  (sc_lv<17>) (grp_fu_729_p00.read());
}

void myFuncAccel4::thread_grp_fu_729_p00() {
    grp_fu_729_p00 = esl_zext<34,17>(data0_5_V.read());
}

void myFuncAccel4::thread_grp_fu_729_p1() {
    grp_fu_729_p1 =  (sc_lv<17>) (zext_ln1118_1_fu_384_p1.read());
}

void myFuncAccel4::thread_grp_fu_729_p2() {
    grp_fu_729_p2 =  (sc_lv<34>) (grp_fu_729_p20.read());
}

void myFuncAccel4::thread_grp_fu_729_p20() {
    grp_fu_729_p20 = esl_zext<35,34>(and_ln728_1_fu_401_p3.read());
}

void myFuncAccel4::thread_grp_fu_737_p0() {
    grp_fu_737_p0 =  (sc_lv<17>) (grp_fu_737_p00.read());
}

void myFuncAccel4::thread_grp_fu_737_p00() {
    grp_fu_737_p00 = esl_zext<34,17>(data0_9_V.read());
}

void myFuncAccel4::thread_grp_fu_737_p1() {
    grp_fu_737_p1 =  (sc_lv<17>) (zext_ln1118_1_fu_384_p1.read());
}

void myFuncAccel4::thread_grp_fu_737_p2() {
    grp_fu_737_p2 =  (sc_lv<34>) (grp_fu_737_p20.read());
}

void myFuncAccel4::thread_grp_fu_737_p20() {
    grp_fu_737_p20 = esl_zext<35,34>(and_ln728_2_fu_421_p3.read());
}

void myFuncAccel4::thread_grp_fu_745_p0() {
    grp_fu_745_p0 =  (sc_lv<17>) (grp_fu_745_p00.read());
}

void myFuncAccel4::thread_grp_fu_745_p00() {
    grp_fu_745_p00 = esl_zext<34,17>(data0_13_V.read());
}

void myFuncAccel4::thread_grp_fu_745_p1() {
    grp_fu_745_p1 =  (sc_lv<17>) (zext_ln1118_1_fu_384_p1.read());
}

void myFuncAccel4::thread_grp_fu_745_p2() {
    grp_fu_745_p2 =  (sc_lv<34>) (grp_fu_745_p20.read());
}

void myFuncAccel4::thread_grp_fu_745_p20() {
    grp_fu_745_p20 = esl_zext<35,34>(and_ln728_3_fu_441_p3.read());
}

void myFuncAccel4::thread_grp_fu_753_p0() {
    grp_fu_753_p0 =  (sc_lv<17>) (grp_fu_753_p00.read());
}

void myFuncAccel4::thread_grp_fu_753_p00() {
    grp_fu_753_p00 = esl_zext<34,17>(data0_2_V.read());
}

void myFuncAccel4::thread_grp_fu_753_p1() {
    grp_fu_753_p1 =  (sc_lv<17>) (zext_ln1118_2_fu_465_p1.read());
}

void myFuncAccel4::thread_grp_fu_753_p2() {
    grp_fu_753_p2 =  (sc_lv<35>) (grp_fu_753_p20.read());
}

void myFuncAccel4::thread_grp_fu_753_p20() {
    grp_fu_753_p20 = esl_zext<36,35>(shl_ln_fu_469_p3.read());
}

void myFuncAccel4::thread_grp_fu_761_p0() {
    grp_fu_761_p0 =  (sc_lv<17>) (grp_fu_761_p00.read());
}

void myFuncAccel4::thread_grp_fu_761_p00() {
    grp_fu_761_p00 = esl_zext<34,17>(data0_6_V.read());
}

void myFuncAccel4::thread_grp_fu_761_p1() {
    grp_fu_761_p1 =  (sc_lv<17>) (zext_ln1118_2_fu_465_p1.read());
}

void myFuncAccel4::thread_grp_fu_761_p2() {
    grp_fu_761_p2 =  (sc_lv<35>) (grp_fu_761_p20.read());
}

void myFuncAccel4::thread_grp_fu_761_p20() {
    grp_fu_761_p20 = esl_zext<36,35>(shl_ln728_2_fu_489_p3.read());
}

void myFuncAccel4::thread_grp_fu_769_p0() {
    grp_fu_769_p0 =  (sc_lv<17>) (grp_fu_769_p00.read());
}

void myFuncAccel4::thread_grp_fu_769_p00() {
    grp_fu_769_p00 = esl_zext<34,17>(data0_10_V.read());
}

void myFuncAccel4::thread_grp_fu_769_p1() {
    grp_fu_769_p1 =  (sc_lv<17>) (zext_ln1118_2_fu_465_p1.read());
}

void myFuncAccel4::thread_grp_fu_769_p2() {
    grp_fu_769_p2 =  (sc_lv<35>) (grp_fu_769_p20.read());
}

void myFuncAccel4::thread_grp_fu_769_p20() {
    grp_fu_769_p20 = esl_zext<36,35>(shl_ln728_4_fu_509_p3.read());
}

void myFuncAccel4::thread_grp_fu_777_p0() {
    grp_fu_777_p0 =  (sc_lv<17>) (grp_fu_777_p00.read());
}

void myFuncAccel4::thread_grp_fu_777_p00() {
    grp_fu_777_p00 = esl_zext<34,17>(data0_14_V.read());
}

void myFuncAccel4::thread_grp_fu_777_p1() {
    grp_fu_777_p1 =  (sc_lv<17>) (zext_ln1118_2_fu_465_p1.read());
}

void myFuncAccel4::thread_grp_fu_777_p2() {
    grp_fu_777_p2 =  (sc_lv<35>) (grp_fu_777_p20.read());
}

void myFuncAccel4::thread_grp_fu_777_p20() {
    grp_fu_777_p20 = esl_zext<36,35>(shl_ln728_6_fu_529_p3.read());
}

void myFuncAccel4::thread_grp_fu_785_p0() {
    grp_fu_785_p0 =  (sc_lv<17>) (grp_fu_785_p00.read());
}

void myFuncAccel4::thread_grp_fu_785_p00() {
    grp_fu_785_p00 = esl_zext<34,17>(data0_3_V.read());
}

void myFuncAccel4::thread_grp_fu_785_p1() {
    grp_fu_785_p1 =  (sc_lv<17>) (zext_ln1118_3_fu_553_p1.read());
}

void myFuncAccel4::thread_grp_fu_785_p2() {
    grp_fu_785_p2 = esl_concat<34,2>(tmp_3_reg_959.read(), ap_const_lv2_0);
}

void myFuncAccel4::thread_grp_fu_793_p0() {
    grp_fu_793_p0 =  (sc_lv<17>) (grp_fu_793_p00.read());
}

void myFuncAccel4::thread_grp_fu_793_p00() {
    grp_fu_793_p00 = esl_zext<34,17>(data0_7_V.read());
}

void myFuncAccel4::thread_grp_fu_793_p1() {
    grp_fu_793_p1 =  (sc_lv<17>) (zext_ln1118_3_fu_553_p1.read());
}

void myFuncAccel4::thread_grp_fu_793_p2() {
    grp_fu_793_p2 = esl_concat<34,2>(tmp_6_reg_964.read(), ap_const_lv2_0);
}

void myFuncAccel4::thread_grp_fu_801_p0() {
    grp_fu_801_p0 =  (sc_lv<17>) (grp_fu_801_p00.read());
}

void myFuncAccel4::thread_grp_fu_801_p00() {
    grp_fu_801_p00 = esl_zext<34,17>(data0_11_V.read());
}

void myFuncAccel4::thread_grp_fu_801_p1() {
    grp_fu_801_p1 =  (sc_lv<17>) (zext_ln1118_3_fu_553_p1.read());
}

void myFuncAccel4::thread_grp_fu_801_p2() {
    grp_fu_801_p2 = esl_concat<34,2>(tmp_9_reg_969.read(), ap_const_lv2_0);
}

void myFuncAccel4::thread_grp_fu_809_p0() {
    grp_fu_809_p0 =  (sc_lv<17>) (grp_fu_809_p00.read());
}

void myFuncAccel4::thread_grp_fu_809_p00() {
    grp_fu_809_p00 = esl_zext<34,17>(data0_15_V.read());
}

void myFuncAccel4::thread_grp_fu_809_p1() {
    grp_fu_809_p1 =  (sc_lv<17>) (zext_ln1118_3_fu_553_p1.read());
}

void myFuncAccel4::thread_grp_fu_809_p2() {
    grp_fu_809_p2 = esl_concat<34,2>(tmp_11_reg_974.read(), ap_const_lv2_0);
}

void myFuncAccel4::thread_i_fu_323_p2() {
    i_fu_323_p2 = (!ap_phi_mux_i_1_phi_fu_247_p4.read().is_01() || !ap_const_lv32_1.is_01())? sc_lv<32>(): (sc_biguint<32>(ap_phi_mux_i_1_phi_fu_247_p4.read()) + sc_biguint<32>(ap_const_lv32_1));
}

void myFuncAccel4::thread_icmp_ln1494_1_fu_594_p2() {
    icmp_ln1494_1_fu_594_p2 = (!trunc_ln708_5_fu_585_p4.read().is_01() || !threshold_V.read().is_01())? sc_lv<1>(): (sc_biguint<34>(trunc_ln708_5_fu_585_p4.read()) > sc_biguint<34>(threshold_V.read()));
}

void myFuncAccel4::thread_icmp_ln1494_2_fu_615_p2() {
    icmp_ln1494_2_fu_615_p2 = (!trunc_ln708_8_fu_606_p4.read().is_01() || !threshold_V.read().is_01())? sc_lv<1>(): (sc_biguint<34>(trunc_ln708_8_fu_606_p4.read()) > sc_biguint<34>(threshold_V.read()));
}

void myFuncAccel4::thread_icmp_ln1494_3_fu_636_p2() {
    icmp_ln1494_3_fu_636_p2 = (!trunc_ln708_s_fu_627_p4.read().is_01() || !threshold_V.read().is_01())? sc_lv<1>(): (sc_biguint<34>(trunc_ln708_s_fu_627_p4.read()) > sc_biguint<34>(threshold_V.read()));
}

void myFuncAccel4::thread_icmp_ln1494_fu_573_p2() {
    icmp_ln1494_fu_573_p2 = (!trunc_ln708_2_fu_564_p4.read().is_01() || !threshold_V.read().is_01())? sc_lv<1>(): (sc_biguint<34>(trunc_ln708_2_fu_564_p4.read()) > sc_biguint<34>(threshold_V.read()));
}

void myFuncAccel4::thread_icmp_ln33_fu_318_p2() {
    icmp_ln33_fu_318_p2 = (!ap_phi_mux_i_1_phi_fu_247_p4.read().is_01() || !size.read().is_01())? sc_lv<1>(): sc_lv<1>(ap_phi_mux_i_1_phi_fu_247_p4.read() == size.read());
}

void myFuncAccel4::thread_icmp_ln54_fu_679_p2() {
    icmp_ln54_fu_679_p2 = (!add_ln52_2_fu_673_p2.read().is_01() || !ap_const_lv3_4.is_01())? sc_lv<1>(): sc_lv<1>(add_ln52_2_fu_673_p2.read() == ap_const_lv3_4);
}

void myFuncAccel4::thread_mul_ln1118_12_fu_715_p0() {
    mul_ln1118_12_fu_715_p0 =  (sc_lv<17>) (mul_ln1118_12_fu_715_p00.read());
}

void myFuncAccel4::thread_mul_ln1118_12_fu_715_p00() {
    mul_ln1118_12_fu_715_p00 = esl_zext<34,17>(data0_12_V.read());
}

void myFuncAccel4::thread_mul_ln1118_12_fu_715_p1() {
    mul_ln1118_12_fu_715_p1 =  (sc_lv<17>) (zext_ln1118_fu_333_p1.read());
}

void myFuncAccel4::thread_mul_ln1118_4_fu_703_p0() {
    mul_ln1118_4_fu_703_p0 =  (sc_lv<17>) (mul_ln1118_4_fu_703_p00.read());
}

void myFuncAccel4::thread_mul_ln1118_4_fu_703_p00() {
    mul_ln1118_4_fu_703_p00 = esl_zext<34,17>(data0_4_V.read());
}

void myFuncAccel4::thread_mul_ln1118_4_fu_703_p1() {
    mul_ln1118_4_fu_703_p1 =  (sc_lv<17>) (zext_ln1118_fu_333_p1.read());
}

void myFuncAccel4::thread_mul_ln1118_8_fu_709_p0() {
    mul_ln1118_8_fu_709_p0 =  (sc_lv<17>) (mul_ln1118_8_fu_709_p00.read());
}

void myFuncAccel4::thread_mul_ln1118_8_fu_709_p00() {
    mul_ln1118_8_fu_709_p00 = esl_zext<34,17>(data0_8_V.read());
}

void myFuncAccel4::thread_mul_ln1118_8_fu_709_p1() {
    mul_ln1118_8_fu_709_p1 =  (sc_lv<17>) (zext_ln1118_fu_333_p1.read());
}

void myFuncAccel4::thread_mul_ln1118_fu_697_p0() {
    mul_ln1118_fu_697_p0 =  (sc_lv<17>) (mul_ln1118_fu_697_p00.read());
}

void myFuncAccel4::thread_mul_ln1118_fu_697_p00() {
    mul_ln1118_fu_697_p00 = esl_zext<34,17>(data0_0_V.read());
}

void myFuncAccel4::thread_mul_ln1118_fu_697_p1() {
    mul_ln1118_fu_697_p1 =  (sc_lv<17>) (zext_ln1118_fu_333_p1.read());
}

void myFuncAccel4::thread_my_input1_V_0_ack_in() {
    my_input1_V_0_ack_in = my_input1_V_0_state.read()[1];
}

void myFuncAccel4::thread_my_input1_V_0_ack_out() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln33_fu_318_p2.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage1.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln33_reg_910.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage1_11001.read(), ap_const_boolean_0)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln33_reg_910.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage2.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage2_11001.read(), ap_const_boolean_0)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln33_reg_910.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage3.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage3_11001.read(), ap_const_boolean_0)))) {
        my_input1_V_0_ack_out = ap_const_logic_1;
    } else {
        my_input1_V_0_ack_out = ap_const_logic_0;
    }
}

void myFuncAccel4::thread_my_input1_V_0_data_out() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, my_input1_V_0_sel.read())) {
        my_input1_V_0_data_out = my_input1_V_0_payload_B.read();
    } else {
        my_input1_V_0_data_out = my_input1_V_0_payload_A.read();
    }
}

void myFuncAccel4::thread_my_input1_V_0_load_A() {
    my_input1_V_0_load_A = (my_input1_V_0_state_cmp_full.read() & ~my_input1_V_0_sel_wr.read());
}

void myFuncAccel4::thread_my_input1_V_0_load_B() {
    my_input1_V_0_load_B = (my_input1_V_0_sel_wr.read() & my_input1_V_0_state_cmp_full.read());
}

void myFuncAccel4::thread_my_input1_V_0_sel() {
    my_input1_V_0_sel = my_input1_V_0_sel_rd.read();
}

void myFuncAccel4::thread_my_input1_V_0_state_cmp_full() {
    my_input1_V_0_state_cmp_full =  (sc_logic) ((!my_input1_V_0_state.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<1>(): sc_lv<1>(my_input1_V_0_state.read() != ap_const_lv2_1))[0];
}

void myFuncAccel4::thread_my_input1_V_0_vld_in() {
    my_input1_V_0_vld_in = my_input1_V_TVALID.read();
}

void myFuncAccel4::thread_my_input1_V_0_vld_out() {
    my_input1_V_0_vld_out = my_input1_V_0_state.read()[0];
}

void myFuncAccel4::thread_my_input1_V_TDATA_blk_n() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln33_fu_318_p2.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage1.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage1.read(), ap_const_boolean_0) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln33_reg_910.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln33_reg_910.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage2.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage2.read(), ap_const_boolean_0)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln33_reg_910.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage3.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage3.read(), ap_const_boolean_0)))) {
        my_input1_V_TDATA_blk_n = my_input1_V_0_state.read()[0];
    } else {
        my_input1_V_TDATA_blk_n = ap_const_logic_1;
    }
}

void myFuncAccel4::thread_my_input1_V_TREADY() {
    my_input1_V_TREADY = my_input1_V_0_state.read()[1];
}

void myFuncAccel4::thread_my_output_V_1_ack_in() {
    my_output_V_1_ack_in = my_output_V_1_state.read()[1];
}

void myFuncAccel4::thread_my_output_V_1_ack_out() {
    my_output_V_1_ack_out = my_output_V_TREADY.read();
}

void myFuncAccel4::thread_my_output_V_1_data_out() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, my_output_V_1_sel.read())) {
        my_output_V_1_data_out = my_output_V_1_payload_B.read();
    } else {
        my_output_V_1_data_out = my_output_V_1_payload_A.read();
    }
}

void myFuncAccel4::thread_my_output_V_1_load_A() {
    my_output_V_1_load_A = (my_output_V_1_state_cmp_full.read() & ~my_output_V_1_sel_wr.read());
}

void myFuncAccel4::thread_my_output_V_1_load_B() {
    my_output_V_1_load_B = (my_output_V_1_sel_wr.read() & my_output_V_1_state_cmp_full.read());
}

void myFuncAccel4::thread_my_output_V_1_sel() {
    my_output_V_1_sel = my_output_V_1_sel_rd.read();
}

void myFuncAccel4::thread_my_output_V_1_state_cmp_full() {
    my_output_V_1_state_cmp_full =  (sc_logic) ((!my_output_V_1_state.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<1>(): sc_lv<1>(my_output_V_1_state.read() != ap_const_lv2_1))[0];
}

void myFuncAccel4::thread_my_output_V_1_vld_in() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln33_reg_910.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        my_output_V_1_vld_in = ap_const_logic_1;
    } else {
        my_output_V_1_vld_in = ap_const_logic_0;
    }
}

void myFuncAccel4::thread_my_output_V_1_vld_out() {
    my_output_V_1_vld_out = my_output_V_1_state.read()[0];
}

void myFuncAccel4::thread_my_output_V_TDATA() {
    my_output_V_TDATA = my_output_V_1_data_out.read();
}

void myFuncAccel4::thread_my_output_V_TDATA_blk_n() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln33_reg_910.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage1.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage1.read(), ap_const_boolean_0) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln33_reg_910_pp0_iter1_reg.read())))) {
        my_output_V_TDATA_blk_n = my_output_V_1_state.read()[1];
    } else {
        my_output_V_TDATA_blk_n = ap_const_logic_1;
    }
}

void myFuncAccel4::thread_my_output_V_TVALID() {
    my_output_V_TVALID = my_output_V_1_state.read()[0];
}

void myFuncAccel4::thread_select_ln54_fu_685_p3() {
    select_ln54_fu_685_p3 = (!icmp_ln54_fu_679_p2.read()[0].is_01())? sc_lv<34>(): ((icmp_ln54_fu_679_p2.read()[0].to_bool())? ap_const_lv34_0: trunc_ln708_s_reg_994.read());
}

void myFuncAccel4::thread_shl_ln728_2_fu_489_p3() {
    shl_ln728_2_fu_489_p3 = esl_concat<33,2>(tmp_5_reg_944.read(), ap_const_lv2_0);
}

void myFuncAccel4::thread_shl_ln728_4_fu_509_p3() {
    shl_ln728_4_fu_509_p3 = esl_concat<33,2>(tmp_8_reg_949.read(), ap_const_lv2_0);
}

void myFuncAccel4::thread_shl_ln728_6_fu_529_p3() {
    shl_ln728_6_fu_529_p3 = esl_concat<33,2>(tmp_10_reg_954.read(), ap_const_lv2_0);
}

void myFuncAccel4::thread_shl_ln_fu_469_p3() {
    shl_ln_fu_469_p3 = esl_concat<33,2>(tmp_2_reg_939.read(), ap_const_lv2_0);
}

void myFuncAccel4::thread_trunc_ln356_1_fu_373_p1() {
    trunc_ln356_1_fu_373_p1 = my_input1_V_0_data_out.read().range(17-1, 0);
}

void myFuncAccel4::thread_trunc_ln356_2_fu_461_p1() {
    trunc_ln356_2_fu_461_p1 = my_input1_V_0_data_out.read().range(17-1, 0);
}

void myFuncAccel4::thread_trunc_ln356_3_fu_549_p1() {
    trunc_ln356_3_fu_549_p1 = my_input1_V_0_data_out.read().range(17-1, 0);
}

void myFuncAccel4::thread_trunc_ln356_fu_329_p1() {
    trunc_ln356_fu_329_p1 = my_input1_V_0_data_out.read().range(17-1, 0);
}

void myFuncAccel4::thread_trunc_ln708_2_fu_564_p4() {
    trunc_ln708_2_fu_564_p4 = grp_fu_785_p3.read().range(35, 2);
}

void myFuncAccel4::thread_trunc_ln708_5_fu_585_p4() {
    trunc_ln708_5_fu_585_p4 = grp_fu_793_p3.read().range(35, 2);
}

void myFuncAccel4::thread_trunc_ln708_8_fu_606_p4() {
    trunc_ln708_8_fu_606_p4 = grp_fu_801_p3.read().range(35, 2);
}

void myFuncAccel4::thread_trunc_ln708_s_fu_627_p4() {
    trunc_ln708_s_fu_627_p4 = grp_fu_809_p3.read().range(35, 2);
}

void myFuncAccel4::thread_zext_ln1118_1_fu_384_p1() {
    zext_ln1118_1_fu_384_p1 = esl_zext<34,17>(trunc_ln356_1_fu_373_p1.read());
}

void myFuncAccel4::thread_zext_ln1118_2_fu_465_p1() {
    zext_ln1118_2_fu_465_p1 = esl_zext<34,17>(trunc_ln356_2_fu_461_p1.read());
}

void myFuncAccel4::thread_zext_ln1118_3_fu_553_p1() {
    zext_ln1118_3_fu_553_p1 = esl_zext<34,17>(trunc_ln356_3_fu_549_p1.read());
}

void myFuncAccel4::thread_zext_ln1118_4_fu_641_p1() {
    zext_ln1118_4_fu_641_p1 = esl_zext<2,1>(icmp_ln1494_reg_979.read());
}

void myFuncAccel4::thread_zext_ln1118_5_fu_644_p1() {
    zext_ln1118_5_fu_644_p1 = esl_zext<2,1>(icmp_ln1494_1_reg_984.read());
}

void myFuncAccel4::thread_zext_ln1118_6_fu_647_p1() {
    zext_ln1118_6_fu_647_p1 = esl_zext<2,1>(icmp_ln1494_2_reg_989.read());
}

void myFuncAccel4::thread_zext_ln1118_fu_333_p1() {
    zext_ln1118_fu_333_p1 = esl_zext<34,17>(trunc_ln356_fu_329_p1.read());
}

void myFuncAccel4::thread_zext_ln356_fu_692_p1() {
    zext_ln356_fu_692_p1 = esl_zext<40,34>(select_ln54_fu_685_p3.read());
}

void myFuncAccel4::thread_zext_ln52_1_fu_659_p1() {
    zext_ln52_1_fu_659_p1 = esl_zext<3,2>(add_ln52_fu_653_p2.read());
}

void myFuncAccel4::thread_zext_ln52_2_fu_669_p1() {
    zext_ln52_2_fu_669_p1 = esl_zext<3,2>(add_ln52_1_fu_663_p2.read());
}

void myFuncAccel4::thread_zext_ln52_fu_650_p1() {
    zext_ln52_fu_650_p1 = esl_zext<2,1>(icmp_ln1494_3_reg_999.read());
}

void myFuncAccel4::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && !(esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln33_fu_318_p2.read()) && esl_seteq<1,1,1>(ap_enable_reg_pp0_iter1.read(), ap_const_logic_0)))) {
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln33_fu_318_p2.read()) && esl_seteq<1,1,1>(ap_enable_reg_pp0_iter1.read(), ap_const_logic_0))) {
                ap_NS_fsm = ap_ST_fsm_state8;
            } else {
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            }
            break;
        case 4 : 
            if ((esl_seteq<1,1,1>(ap_block_pp0_stage1_subdone.read(), ap_const_boolean_0) && !(esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage1.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage1_subdone.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_enable_reg_pp0_iter0.read(), ap_const_logic_0)))) {
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage1.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage1_subdone.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_enable_reg_pp0_iter0.read(), ap_const_logic_0))) {
                ap_NS_fsm = ap_ST_fsm_state8;
            } else {
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            }
            break;
        case 8 : 
            if (esl_seteq<1,1,1>(ap_block_pp0_stage2_subdone.read(), ap_const_boolean_0)) {
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            } else {
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            }
            break;
        case 16 : 
            if (esl_seteq<1,1,1>(ap_block_pp0_stage3_subdone.read(), ap_const_boolean_0)) {
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            } else {
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            }
            break;
        case 32 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) && !(esl_seteq<1,2,2>(ap_const_lv2_1, my_output_V_1_state.read()) || (esl_seteq<1,1,1>(ap_const_logic_0, my_output_V_TREADY.read()) && 
  esl_seteq<1,2,2>(ap_const_lv2_3, my_output_V_1_state.read()))))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else {
                ap_NS_fsm = ap_ST_fsm_state8;
            }
            break;
        default : 
            ap_NS_fsm = "XXXXXX";
            break;
    }
}

void myFuncAccel4::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst_n\" :  \"" << ap_rst_n.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"ap_start\" :  \"" << ap_start.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"ap_done\" :  \"" << ap_done.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_idle\" :  \"" << ap_idle.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_ready\" :  \"" << ap_ready.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"size\" :  \"" << size.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"dim\" :  \"" << dim.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"threshold_V\" :  \"" << threshold_V.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"data0_0_V\" :  \"" << data0_0_V.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"data0_1_V\" :  \"" << data0_1_V.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"data0_2_V\" :  \"" << data0_2_V.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"data0_3_V\" :  \"" << data0_3_V.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"data0_4_V\" :  \"" << data0_4_V.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"data0_5_V\" :  \"" << data0_5_V.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"data0_6_V\" :  \"" << data0_6_V.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"data0_7_V\" :  \"" << data0_7_V.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"data0_8_V\" :  \"" << data0_8_V.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"data0_9_V\" :  \"" << data0_9_V.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"data0_10_V\" :  \"" << data0_10_V.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"data0_11_V\" :  \"" << data0_11_V.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"data0_12_V\" :  \"" << data0_12_V.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"data0_13_V\" :  \"" << data0_13_V.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"data0_14_V\" :  \"" << data0_14_V.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"data0_15_V\" :  \"" << data0_15_V.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"my_input1_V_TDATA\" :  \"" << my_input1_V_TDATA.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"my_input1_V_TVALID\" :  \"" << my_input1_V_TVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"my_input1_V_TREADY\" :  \"" << my_input1_V_TREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"my_output_V_TDATA\" :  \"" << my_output_V_TDATA.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"my_output_V_TVALID\" :  \"" << my_output_V_TVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"my_output_V_TREADY\" :  \"" << my_output_V_TREADY.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

