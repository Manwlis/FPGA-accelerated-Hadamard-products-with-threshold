-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity myFuncAccel4 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    size : IN STD_LOGIC_VECTOR (31 downto 0);
    dim : IN STD_LOGIC_VECTOR (31 downto 0);
    threshold_V : IN STD_LOGIC_VECTOR (33 downto 0);
    data0_0_V : IN STD_LOGIC_VECTOR (16 downto 0);
    data0_1_V : IN STD_LOGIC_VECTOR (16 downto 0);
    data0_2_V : IN STD_LOGIC_VECTOR (16 downto 0);
    data0_3_V : IN STD_LOGIC_VECTOR (16 downto 0);
    data0_4_V : IN STD_LOGIC_VECTOR (16 downto 0);
    data0_5_V : IN STD_LOGIC_VECTOR (16 downto 0);
    data0_6_V : IN STD_LOGIC_VECTOR (16 downto 0);
    data0_7_V : IN STD_LOGIC_VECTOR (16 downto 0);
    data0_8_V : IN STD_LOGIC_VECTOR (16 downto 0);
    data0_9_V : IN STD_LOGIC_VECTOR (16 downto 0);
    data0_10_V : IN STD_LOGIC_VECTOR (16 downto 0);
    data0_11_V : IN STD_LOGIC_VECTOR (16 downto 0);
    data0_12_V : IN STD_LOGIC_VECTOR (16 downto 0);
    data0_13_V : IN STD_LOGIC_VECTOR (16 downto 0);
    data0_14_V : IN STD_LOGIC_VECTOR (16 downto 0);
    data0_15_V : IN STD_LOGIC_VECTOR (16 downto 0);
    data1_V_req_din : OUT STD_LOGIC;
    data1_V_req_full_n : IN STD_LOGIC;
    data1_V_req_write : OUT STD_LOGIC;
    data1_V_rsp_empty_n : IN STD_LOGIC;
    data1_V_rsp_read : OUT STD_LOGIC;
    data1_V_address : OUT STD_LOGIC_VECTOR (31 downto 0);
    data1_V_datain : IN STD_LOGIC_VECTOR (16 downto 0);
    data1_V_dataout : OUT STD_LOGIC_VECTOR (16 downto 0);
    data1_V_size : OUT STD_LOGIC_VECTOR (31 downto 0);
    data_out_V_req_din : OUT STD_LOGIC;
    data_out_V_req_full_n : IN STD_LOGIC;
    data_out_V_req_write : OUT STD_LOGIC;
    data_out_V_rsp_empty_n : IN STD_LOGIC;
    data_out_V_rsp_read : OUT STD_LOGIC;
    data_out_V_address : OUT STD_LOGIC_VECTOR (31 downto 0);
    data_out_V_datain : IN STD_LOGIC_VECTOR (33 downto 0);
    data_out_V_dataout : OUT STD_LOGIC_VECTOR (33 downto 0);
    data_out_V_size : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of myFuncAccel4 is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "myFuncAccel4,hls_ip_2019_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z020-clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=10.759750,HLS_SYN_LAT=409,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=16,HLS_SYN_FF=811,HLS_SYN_LUT=463,HLS_VERSION=2019_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (5 downto 0) := "000010";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (5 downto 0) := "000100";
    constant ap_ST_fsm_pp0_stage2 : STD_LOGIC_VECTOR (5 downto 0) := "001000";
    constant ap_ST_fsm_pp0_stage3 : STD_LOGIC_VECTOR (5 downto 0) := "010000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_21 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100001";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv32_22 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100010";
    constant ap_const_lv32_23 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100011";
    constant ap_const_lv34_0 : STD_LOGIC_VECTOR (33 downto 0) := "0000000000000000000000000000000000";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv17_0 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000000";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal i_1_reg_252 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_263 : STD_LOGIC_VECTOR (16 downto 0);
    signal ap_CS_fsm_pp0_stage3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage3 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal icmp_ln33_reg_923 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state5_pp0_stage3_iter0 : BOOLEAN;
    signal ap_block_state9_pp0_stage3_iter1 : BOOLEAN;
    signal icmp_ln33_reg_923_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state13_pp0_stage3_iter2 : BOOLEAN;
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_block_pp0_stage3_11001 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter1 : BOOLEAN;
    signal icmp_ln33_reg_923_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state10_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_block_state3_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_state7_pp0_stage1_iter1 : BOOLEAN;
    signal ap_block_state11_pp0_stage1_iter2 : BOOLEAN;
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage2 : signal is "none";
    signal ap_block_state4_pp0_stage2_iter0 : BOOLEAN;
    signal ap_block_state8_pp0_stage2_iter1 : BOOLEAN;
    signal ap_block_state12_pp0_stage2_iter2 : BOOLEAN;
    signal ap_block_pp0_stage2_11001 : BOOLEAN;
    signal icmp_ln33_fu_331_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_fu_336_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_reg_927 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln41_fu_342_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln41_reg_932 : STD_LOGIC_VECTOR (31 downto 0);
    signal data_out_V_addr_reg_943 : STD_LOGIC_VECTOR (31 downto 0);
    signal data_out_V_addr_reg_943_pp0_iter1_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_reg_948 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_5_reg_953 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_8_reg_958 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_reg_963 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_3_reg_968 : STD_LOGIC_VECTOR (32 downto 0);
    signal tmp_6_reg_973 : STD_LOGIC_VECTOR (32 downto 0);
    signal tmp_9_reg_978 : STD_LOGIC_VECTOR (32 downto 0);
    signal tmp_10_reg_983 : STD_LOGIC_VECTOR (32 downto 0);
    signal tmp_4_reg_988 : STD_LOGIC_VECTOR (33 downto 0);
    signal tmp_7_reg_993 : STD_LOGIC_VECTOR (33 downto 0);
    signal tmp_s_reg_998 : STD_LOGIC_VECTOR (33 downto 0);
    signal tmp_11_reg_1003 : STD_LOGIC_VECTOR (33 downto 0);
    signal p_trunc_ln708_2_fu_678_p3 : STD_LOGIC_VECTOR (33 downto 0);
    signal p_trunc_ln708_2_reg_1008 : STD_LOGIC_VECTOR (33 downto 0);
    signal p_trunc_ln708_5_fu_686_p3 : STD_LOGIC_VECTOR (33 downto 0);
    signal p_trunc_ln708_5_reg_1013 : STD_LOGIC_VECTOR (33 downto 0);
    signal p_trunc_ln708_8_fu_694_p3 : STD_LOGIC_VECTOR (33 downto 0);
    signal p_trunc_ln708_8_reg_1018 : STD_LOGIC_VECTOR (33 downto 0);
    signal p_trunc_ln708_s_fu_702_p3 : STD_LOGIC_VECTOR (33 downto 0);
    signal p_trunc_ln708_s_reg_1023 : STD_LOGIC_VECTOR (33 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state2 : STD_LOGIC;
    signal ap_block_pp0_stage3_subdone : BOOLEAN;
    signal ap_phi_mux_i_1_phi_fu_256_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal zext_ln41_fu_348_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal mul_ln1118_fu_710_p2 : STD_LOGIC_VECTOR (33 downto 0);
    signal mul_ln1118_4_fu_716_p2 : STD_LOGIC_VECTOR (33 downto 0);
    signal mul_ln1118_8_fu_722_p2 : STD_LOGIC_VECTOR (33 downto 0);
    signal mul_ln1118_12_fu_728_p2 : STD_LOGIC_VECTOR (33 downto 0);
    signal and_ln_fu_404_p3 : STD_LOGIC_VECTOR (33 downto 0);
    signal grp_fu_734_p3 : STD_LOGIC_VECTOR (34 downto 0);
    signal and_ln728_1_fu_428_p3 : STD_LOGIC_VECTOR (33 downto 0);
    signal grp_fu_742_p3 : STD_LOGIC_VECTOR (34 downto 0);
    signal and_ln728_2_fu_448_p3 : STD_LOGIC_VECTOR (33 downto 0);
    signal grp_fu_750_p3 : STD_LOGIC_VECTOR (34 downto 0);
    signal and_ln728_3_fu_468_p3 : STD_LOGIC_VECTOR (33 downto 0);
    signal grp_fu_758_p3 : STD_LOGIC_VECTOR (34 downto 0);
    signal ap_block_pp0_stage2 : BOOLEAN;
    signal shl_ln1_fu_492_p3 : STD_LOGIC_VECTOR (34 downto 0);
    signal grp_fu_766_p3 : STD_LOGIC_VECTOR (35 downto 0);
    signal shl_ln728_2_fu_512_p3 : STD_LOGIC_VECTOR (34 downto 0);
    signal grp_fu_774_p3 : STD_LOGIC_VECTOR (35 downto 0);
    signal shl_ln728_4_fu_532_p3 : STD_LOGIC_VECTOR (34 downto 0);
    signal grp_fu_782_p3 : STD_LOGIC_VECTOR (35 downto 0);
    signal shl_ln728_6_fu_552_p3 : STD_LOGIC_VECTOR (34 downto 0);
    signal grp_fu_790_p3 : STD_LOGIC_VECTOR (35 downto 0);
    signal ap_block_pp0_stage3 : BOOLEAN;
    signal grp_fu_798_p3 : STD_LOGIC_VECTOR (35 downto 0);
    signal trunc_ln708_2_fu_583_p4 : STD_LOGIC_VECTOR (33 downto 0);
    signal grp_fu_806_p3 : STD_LOGIC_VECTOR (35 downto 0);
    signal trunc_ln708_5_fu_604_p4 : STD_LOGIC_VECTOR (33 downto 0);
    signal grp_fu_814_p3 : STD_LOGIC_VECTOR (35 downto 0);
    signal trunc_ln708_8_fu_625_p4 : STD_LOGIC_VECTOR (33 downto 0);
    signal grp_fu_822_p3 : STD_LOGIC_VECTOR (35 downto 0);
    signal trunc_ln708_s_fu_646_p4 : STD_LOGIC_VECTOR (33 downto 0);
    signal icmp_ln1494_1_fu_613_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1494_2_fu_634_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1494_fu_592_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1494_3_fu_655_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln52_1_fu_666_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln52_fu_660_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln52_2_fu_672_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal mul_ln1118_fu_710_p0 : STD_LOGIC_VECTOR (16 downto 0);
    signal mul_ln1118_fu_710_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal zext_ln1118_fu_364_p1 : STD_LOGIC_VECTOR (33 downto 0);
    signal mul_ln1118_4_fu_716_p0 : STD_LOGIC_VECTOR (16 downto 0);
    signal mul_ln1118_4_fu_716_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal mul_ln1118_8_fu_722_p0 : STD_LOGIC_VECTOR (16 downto 0);
    signal mul_ln1118_8_fu_722_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal mul_ln1118_12_fu_728_p0 : STD_LOGIC_VECTOR (16 downto 0);
    signal mul_ln1118_12_fu_728_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_fu_734_p0 : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_fu_734_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal zext_ln1118_1_fu_411_p1 : STD_LOGIC_VECTOR (33 downto 0);
    signal grp_fu_734_p2 : STD_LOGIC_VECTOR (33 downto 0);
    signal grp_fu_742_p0 : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_fu_742_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_fu_742_p2 : STD_LOGIC_VECTOR (33 downto 0);
    signal grp_fu_750_p0 : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_fu_750_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_fu_750_p2 : STD_LOGIC_VECTOR (33 downto 0);
    signal grp_fu_758_p0 : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_fu_758_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_fu_758_p2 : STD_LOGIC_VECTOR (33 downto 0);
    signal grp_fu_766_p0 : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_fu_766_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal zext_ln1118_2_fu_488_p1 : STD_LOGIC_VECTOR (33 downto 0);
    signal grp_fu_766_p2 : STD_LOGIC_VECTOR (34 downto 0);
    signal grp_fu_774_p0 : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_fu_774_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_fu_774_p2 : STD_LOGIC_VECTOR (34 downto 0);
    signal grp_fu_782_p0 : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_fu_782_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_fu_782_p2 : STD_LOGIC_VECTOR (34 downto 0);
    signal grp_fu_790_p0 : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_fu_790_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_fu_790_p2 : STD_LOGIC_VECTOR (34 downto 0);
    signal grp_fu_798_p0 : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_fu_798_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal zext_ln1118_3_fu_572_p1 : STD_LOGIC_VECTOR (33 downto 0);
    signal grp_fu_798_p2 : STD_LOGIC_VECTOR (35 downto 0);
    signal grp_fu_806_p0 : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_fu_806_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_fu_806_p2 : STD_LOGIC_VECTOR (35 downto 0);
    signal grp_fu_814_p0 : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_fu_814_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_fu_814_p2 : STD_LOGIC_VECTOR (35 downto 0);
    signal grp_fu_822_p0 : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_fu_822_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_fu_822_p2 : STD_LOGIC_VECTOR (35 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal ap_block_pp0_stage2_subdone : BOOLEAN;
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal grp_fu_734_p00 : STD_LOGIC_VECTOR (33 downto 0);
    signal grp_fu_734_p20 : STD_LOGIC_VECTOR (34 downto 0);
    signal grp_fu_742_p00 : STD_LOGIC_VECTOR (33 downto 0);
    signal grp_fu_742_p20 : STD_LOGIC_VECTOR (34 downto 0);
    signal grp_fu_750_p00 : STD_LOGIC_VECTOR (33 downto 0);
    signal grp_fu_750_p20 : STD_LOGIC_VECTOR (34 downto 0);
    signal grp_fu_758_p00 : STD_LOGIC_VECTOR (33 downto 0);
    signal grp_fu_758_p20 : STD_LOGIC_VECTOR (34 downto 0);
    signal grp_fu_766_p00 : STD_LOGIC_VECTOR (33 downto 0);
    signal grp_fu_766_p20 : STD_LOGIC_VECTOR (35 downto 0);
    signal grp_fu_774_p00 : STD_LOGIC_VECTOR (33 downto 0);
    signal grp_fu_774_p20 : STD_LOGIC_VECTOR (35 downto 0);
    signal grp_fu_782_p00 : STD_LOGIC_VECTOR (33 downto 0);
    signal grp_fu_782_p20 : STD_LOGIC_VECTOR (35 downto 0);
    signal grp_fu_790_p00 : STD_LOGIC_VECTOR (33 downto 0);
    signal grp_fu_790_p20 : STD_LOGIC_VECTOR (35 downto 0);
    signal grp_fu_798_p00 : STD_LOGIC_VECTOR (33 downto 0);
    signal grp_fu_806_p00 : STD_LOGIC_VECTOR (33 downto 0);
    signal grp_fu_814_p00 : STD_LOGIC_VECTOR (33 downto 0);
    signal grp_fu_822_p00 : STD_LOGIC_VECTOR (33 downto 0);
    signal mul_ln1118_12_fu_728_p00 : STD_LOGIC_VECTOR (33 downto 0);
    signal mul_ln1118_4_fu_716_p00 : STD_LOGIC_VECTOR (33 downto 0);
    signal mul_ln1118_8_fu_722_p00 : STD_LOGIC_VECTOR (33 downto 0);
    signal mul_ln1118_fu_710_p00 : STD_LOGIC_VECTOR (33 downto 0);
    signal ap_condition_752 : BOOLEAN;
    signal ap_condition_756 : BOOLEAN;
    signal ap_condition_760 : BOOLEAN;
    signal ap_condition_764 : BOOLEAN;

    component myFuncAccel4_mul_mul_17ns_17ns_34_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (16 downto 0);
        din1 : IN STD_LOGIC_VECTOR (16 downto 0);
        dout : OUT STD_LOGIC_VECTOR (33 downto 0) );
    end component;


    component myFuncAccel4_mac_muladd_17ns_17ns_34ns_35_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (16 downto 0);
        din1 : IN STD_LOGIC_VECTOR (16 downto 0);
        din2 : IN STD_LOGIC_VECTOR (33 downto 0);
        dout : OUT STD_LOGIC_VECTOR (34 downto 0) );
    end component;


    component myFuncAccel4_mac_muladd_17ns_17ns_35ns_36_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (16 downto 0);
        din1 : IN STD_LOGIC_VECTOR (16 downto 0);
        din2 : IN STD_LOGIC_VECTOR (34 downto 0);
        dout : OUT STD_LOGIC_VECTOR (35 downto 0) );
    end component;


    component myFuncAccel4_mac_muladd_17ns_17ns_36ns_36_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (16 downto 0);
        din1 : IN STD_LOGIC_VECTOR (16 downto 0);
        din2 : IN STD_LOGIC_VECTOR (35 downto 0);
        dout : OUT STD_LOGIC_VECTOR (35 downto 0) );
    end component;



begin
    myFuncAccel4_mul_mul_17ns_17ns_34_1_1_U1 : component myFuncAccel4_mul_mul_17ns_17ns_34_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 17,
        din1_WIDTH => 17,
        dout_WIDTH => 34)
    port map (
        din0 => mul_ln1118_fu_710_p0,
        din1 => mul_ln1118_fu_710_p1,
        dout => mul_ln1118_fu_710_p2);

    myFuncAccel4_mul_mul_17ns_17ns_34_1_1_U2 : component myFuncAccel4_mul_mul_17ns_17ns_34_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 17,
        din1_WIDTH => 17,
        dout_WIDTH => 34)
    port map (
        din0 => mul_ln1118_4_fu_716_p0,
        din1 => mul_ln1118_4_fu_716_p1,
        dout => mul_ln1118_4_fu_716_p2);

    myFuncAccel4_mul_mul_17ns_17ns_34_1_1_U3 : component myFuncAccel4_mul_mul_17ns_17ns_34_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 17,
        din1_WIDTH => 17,
        dout_WIDTH => 34)
    port map (
        din0 => mul_ln1118_8_fu_722_p0,
        din1 => mul_ln1118_8_fu_722_p1,
        dout => mul_ln1118_8_fu_722_p2);

    myFuncAccel4_mul_mul_17ns_17ns_34_1_1_U4 : component myFuncAccel4_mul_mul_17ns_17ns_34_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 17,
        din1_WIDTH => 17,
        dout_WIDTH => 34)
    port map (
        din0 => mul_ln1118_12_fu_728_p0,
        din1 => mul_ln1118_12_fu_728_p1,
        dout => mul_ln1118_12_fu_728_p2);

    myFuncAccel4_mac_muladd_17ns_17ns_34ns_35_1_1_U5 : component myFuncAccel4_mac_muladd_17ns_17ns_34ns_35_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 17,
        din1_WIDTH => 17,
        din2_WIDTH => 34,
        dout_WIDTH => 35)
    port map (
        din0 => grp_fu_734_p0,
        din1 => grp_fu_734_p1,
        din2 => grp_fu_734_p2,
        dout => grp_fu_734_p3);

    myFuncAccel4_mac_muladd_17ns_17ns_34ns_35_1_1_U6 : component myFuncAccel4_mac_muladd_17ns_17ns_34ns_35_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 17,
        din1_WIDTH => 17,
        din2_WIDTH => 34,
        dout_WIDTH => 35)
    port map (
        din0 => grp_fu_742_p0,
        din1 => grp_fu_742_p1,
        din2 => grp_fu_742_p2,
        dout => grp_fu_742_p3);

    myFuncAccel4_mac_muladd_17ns_17ns_34ns_35_1_1_U7 : component myFuncAccel4_mac_muladd_17ns_17ns_34ns_35_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 17,
        din1_WIDTH => 17,
        din2_WIDTH => 34,
        dout_WIDTH => 35)
    port map (
        din0 => grp_fu_750_p0,
        din1 => grp_fu_750_p1,
        din2 => grp_fu_750_p2,
        dout => grp_fu_750_p3);

    myFuncAccel4_mac_muladd_17ns_17ns_34ns_35_1_1_U8 : component myFuncAccel4_mac_muladd_17ns_17ns_34ns_35_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 17,
        din1_WIDTH => 17,
        din2_WIDTH => 34,
        dout_WIDTH => 35)
    port map (
        din0 => grp_fu_758_p0,
        din1 => grp_fu_758_p1,
        din2 => grp_fu_758_p2,
        dout => grp_fu_758_p3);

    myFuncAccel4_mac_muladd_17ns_17ns_35ns_36_1_1_U9 : component myFuncAccel4_mac_muladd_17ns_17ns_35ns_36_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 17,
        din1_WIDTH => 17,
        din2_WIDTH => 35,
        dout_WIDTH => 36)
    port map (
        din0 => grp_fu_766_p0,
        din1 => grp_fu_766_p1,
        din2 => grp_fu_766_p2,
        dout => grp_fu_766_p3);

    myFuncAccel4_mac_muladd_17ns_17ns_35ns_36_1_1_U10 : component myFuncAccel4_mac_muladd_17ns_17ns_35ns_36_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 17,
        din1_WIDTH => 17,
        din2_WIDTH => 35,
        dout_WIDTH => 36)
    port map (
        din0 => grp_fu_774_p0,
        din1 => grp_fu_774_p1,
        din2 => grp_fu_774_p2,
        dout => grp_fu_774_p3);

    myFuncAccel4_mac_muladd_17ns_17ns_35ns_36_1_1_U11 : component myFuncAccel4_mac_muladd_17ns_17ns_35ns_36_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 17,
        din1_WIDTH => 17,
        din2_WIDTH => 35,
        dout_WIDTH => 36)
    port map (
        din0 => grp_fu_782_p0,
        din1 => grp_fu_782_p1,
        din2 => grp_fu_782_p2,
        dout => grp_fu_782_p3);

    myFuncAccel4_mac_muladd_17ns_17ns_35ns_36_1_1_U12 : component myFuncAccel4_mac_muladd_17ns_17ns_35ns_36_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 17,
        din1_WIDTH => 17,
        din2_WIDTH => 35,
        dout_WIDTH => 36)
    port map (
        din0 => grp_fu_790_p0,
        din1 => grp_fu_790_p1,
        din2 => grp_fu_790_p2,
        dout => grp_fu_790_p3);

    myFuncAccel4_mac_muladd_17ns_17ns_36ns_36_1_1_U13 : component myFuncAccel4_mac_muladd_17ns_17ns_36ns_36_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 17,
        din1_WIDTH => 17,
        din2_WIDTH => 36,
        dout_WIDTH => 36)
    port map (
        din0 => grp_fu_798_p0,
        din1 => grp_fu_798_p1,
        din2 => grp_fu_798_p2,
        dout => grp_fu_798_p3);

    myFuncAccel4_mac_muladd_17ns_17ns_36ns_36_1_1_U14 : component myFuncAccel4_mac_muladd_17ns_17ns_36ns_36_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 17,
        din1_WIDTH => 17,
        din2_WIDTH => 36,
        dout_WIDTH => 36)
    port map (
        din0 => grp_fu_806_p0,
        din1 => grp_fu_806_p1,
        din2 => grp_fu_806_p2,
        dout => grp_fu_806_p3);

    myFuncAccel4_mac_muladd_17ns_17ns_36ns_36_1_1_U15 : component myFuncAccel4_mac_muladd_17ns_17ns_36ns_36_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 17,
        din1_WIDTH => 17,
        din2_WIDTH => 36,
        dout_WIDTH => 36)
    port map (
        din0 => grp_fu_814_p0,
        din1 => grp_fu_814_p1,
        din2 => grp_fu_814_p2,
        dout => grp_fu_814_p3);

    myFuncAccel4_mac_muladd_17ns_17ns_36ns_36_1_1_U16 : component myFuncAccel4_mac_muladd_17ns_17ns_36ns_36_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 17,
        din1_WIDTH => 17,
        din2_WIDTH => 36,
        dout_WIDTH => 36)
    port map (
        din0 => grp_fu_822_p0,
        din1 => grp_fu_822_p1,
        din2 => grp_fu_822_p2,
        dout => grp_fu_822_p3);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_1_reg_252_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                i_1_reg_252 <= ap_const_lv32_0;
            elsif (((icmp_ln33_reg_923 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                i_1_reg_252 <= i_reg_927;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln33_reg_923 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then
                    data_out_V_addr_reg_943(31 downto 2) <= zext_ln41_fu_348_p1(32 - 1 downto 0)(31 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then
                    data_out_V_addr_reg_943_pp0_iter1_reg(31 downto 2) <= data_out_V_addr_reg_943(31 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                i_reg_927 <= i_fu_336_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                icmp_ln33_reg_923 <= icmp_ln33_fu_331_p2;
                icmp_ln33_reg_923_pp0_iter1_reg <= icmp_ln33_reg_923;
                icmp_ln33_reg_923_pp0_iter2_reg <= icmp_ln33_reg_923_pp0_iter1_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln33_reg_923_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001))) then
                p_trunc_ln708_2_reg_1008 <= p_trunc_ln708_2_fu_678_p3;
                p_trunc_ln708_5_reg_1013 <= p_trunc_ln708_5_fu_686_p3;
                p_trunc_ln708_8_reg_1018 <= p_trunc_ln708_8_fu_694_p3;
                p_trunc_ln708_s_reg_1023 <= p_trunc_ln708_s_fu_702_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((icmp_ln33_reg_923 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((icmp_ln33_reg_923 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001)) or ((icmp_ln33_reg_923_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001)) or ((icmp_ln33_reg_923_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)))) then
                reg_263 <= data1_V_datain;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln33_fu_331_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                    shl_ln41_reg_932(31 downto 2) <= shl_ln41_fu_342_p2(31 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln33_reg_923_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then
                tmp_10_reg_983 <= grp_fu_758_p3(34 downto 2);
                tmp_3_reg_968 <= grp_fu_734_p3(34 downto 2);
                tmp_6_reg_973 <= grp_fu_742_p3(34 downto 2);
                tmp_9_reg_978 <= grp_fu_750_p3(34 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln33_reg_923_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001))) then
                tmp_11_reg_1003 <= grp_fu_790_p3(35 downto 2);
                tmp_4_reg_988 <= grp_fu_766_p3(35 downto 2);
                tmp_7_reg_993 <= grp_fu_774_p3(35 downto 2);
                tmp_s_reg_998 <= grp_fu_782_p3(35 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln33_reg_923 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                tmp_1_reg_963 <= mul_ln1118_12_fu_728_p2(33 downto 2);
                tmp_2_reg_948 <= mul_ln1118_fu_710_p2(33 downto 2);
                tmp_5_reg_953 <= mul_ln1118_4_fu_716_p2(33 downto 2);
                tmp_8_reg_958 <= mul_ln1118_8_fu_722_p2(33 downto 2);
            end if;
        end if;
    end process;
    shl_ln41_reg_932(1 downto 0) <= "00";
    data_out_V_addr_reg_943(1 downto 0) <= "00";
    data_out_V_addr_reg_943_pp0_iter1_reg(1 downto 0) <= "00";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_pp0_stage3, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter1, icmp_ln33_fu_331_p2, ap_block_pp0_stage0_subdone, ap_block_pp0_stage3_subdone, ap_block_pp0_stage1_subdone, ap_block_pp0_stage2_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (icmp_ln33_fu_331_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (icmp_ln33_fu_331_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state14;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_pp0_stage2 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage2_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                end if;
            when ap_ST_fsm_pp0_stage3 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) and (ap_const_boolean_0 = ap_block_pp0_stage3_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state14;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                end if;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXX";
        end case;
    end process;
    and_ln52_1_fu_666_p2 <= (icmp_ln1494_fu_592_p2 and icmp_ln1494_3_fu_655_p2);
    and_ln52_2_fu_672_p2 <= (and_ln52_fu_660_p2 and and_ln52_1_fu_666_p2);
    and_ln52_fu_660_p2 <= (icmp_ln1494_2_fu_634_p2 and icmp_ln1494_1_fu_613_p2);
    and_ln728_1_fu_428_p3 <= (tmp_5_reg_953 & ap_const_lv2_0);
    and_ln728_2_fu_448_p3 <= (tmp_8_reg_958 & ap_const_lv2_0);
    and_ln728_3_fu_468_p3 <= (tmp_1_reg_963 & ap_const_lv2_0);
    and_ln_fu_404_p3 <= (tmp_2_reg_948 & ap_const_lv2_0);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(2);
    ap_CS_fsm_pp0_stage2 <= ap_CS_fsm(3);
    ap_CS_fsm_pp0_stage3 <= ap_CS_fsm(4);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state14 <= ap_CS_fsm(5);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_11001_assign_proc : process(data1_V_rsp_empty_n, data_out_V_req_full_n, icmp_ln33_reg_923, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter1, icmp_ln33_reg_923_pp0_iter1_reg)
    begin
                ap_block_pp0_stage0_11001 <= (((icmp_ln33_reg_923_pp0_iter1_reg = ap_const_lv1_0) and (data_out_V_req_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)) or ((icmp_ln33_reg_923 = ap_const_lv1_0) and (data1_V_rsp_empty_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(data1_V_rsp_empty_n, data_out_V_req_full_n, icmp_ln33_reg_923, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter1, icmp_ln33_reg_923_pp0_iter1_reg)
    begin
                ap_block_pp0_stage0_subdone <= (((icmp_ln33_reg_923_pp0_iter1_reg = ap_const_lv1_0) and (data_out_V_req_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)) or ((icmp_ln33_reg_923 = ap_const_lv1_0) and (data1_V_rsp_empty_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)));
    end process;

        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage1_11001_assign_proc : process(data1_V_rsp_empty_n, data_out_V_req_full_n, icmp_ln33_reg_923_pp0_iter2_reg, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter1, icmp_ln33_reg_923_pp0_iter1_reg)
    begin
                ap_block_pp0_stage1_11001 <= (((icmp_ln33_reg_923_pp0_iter2_reg = ap_const_lv1_0) and (data_out_V_req_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)) or ((icmp_ln33_reg_923_pp0_iter1_reg = ap_const_lv1_0) and (data1_V_rsp_empty_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage1_subdone_assign_proc : process(data1_V_rsp_empty_n, data_out_V_req_full_n, icmp_ln33_reg_923_pp0_iter2_reg, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter1, icmp_ln33_reg_923_pp0_iter1_reg)
    begin
                ap_block_pp0_stage1_subdone <= (((icmp_ln33_reg_923_pp0_iter2_reg = ap_const_lv1_0) and (data_out_V_req_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)) or ((icmp_ln33_reg_923_pp0_iter1_reg = ap_const_lv1_0) and (data1_V_rsp_empty_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)));
    end process;

        ap_block_pp0_stage2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage2_11001_assign_proc : process(data1_V_rsp_empty_n, data_out_V_req_full_n, icmp_ln33_reg_923_pp0_iter2_reg, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter1, icmp_ln33_reg_923_pp0_iter1_reg)
    begin
                ap_block_pp0_stage2_11001 <= (((icmp_ln33_reg_923_pp0_iter2_reg = ap_const_lv1_0) and (data_out_V_req_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)) or ((icmp_ln33_reg_923_pp0_iter1_reg = ap_const_lv1_0) and (data1_V_rsp_empty_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage2_subdone_assign_proc : process(data1_V_rsp_empty_n, data_out_V_req_full_n, icmp_ln33_reg_923_pp0_iter2_reg, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter1, icmp_ln33_reg_923_pp0_iter1_reg)
    begin
                ap_block_pp0_stage2_subdone <= (((icmp_ln33_reg_923_pp0_iter2_reg = ap_const_lv1_0) and (data_out_V_req_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)) or ((icmp_ln33_reg_923_pp0_iter1_reg = ap_const_lv1_0) and (data1_V_rsp_empty_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)));
    end process;

        ap_block_pp0_stage3 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage3_11001_assign_proc : process(data1_V_rsp_empty_n, data_out_V_req_full_n, ap_enable_reg_pp0_iter0, icmp_ln33_reg_923, icmp_ln33_reg_923_pp0_iter2_reg, ap_enable_reg_pp0_iter2)
    begin
                ap_block_pp0_stage3_11001 <= (((icmp_ln33_reg_923_pp0_iter2_reg = ap_const_lv1_0) and (data_out_V_req_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)) or ((icmp_ln33_reg_923 = ap_const_lv1_0) and (data1_V_rsp_empty_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage3_subdone_assign_proc : process(data1_V_rsp_empty_n, data_out_V_req_full_n, ap_enable_reg_pp0_iter0, icmp_ln33_reg_923, icmp_ln33_reg_923_pp0_iter2_reg, ap_enable_reg_pp0_iter2)
    begin
                ap_block_pp0_stage3_subdone <= (((icmp_ln33_reg_923_pp0_iter2_reg = ap_const_lv1_0) and (data_out_V_req_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)) or ((icmp_ln33_reg_923 = ap_const_lv1_0) and (data1_V_rsp_empty_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)));
    end process;


    ap_block_state10_pp0_stage0_iter2_assign_proc : process(data_out_V_req_full_n, icmp_ln33_reg_923_pp0_iter1_reg)
    begin
                ap_block_state10_pp0_stage0_iter2 <= ((icmp_ln33_reg_923_pp0_iter1_reg = ap_const_lv1_0) and (data_out_V_req_full_n = ap_const_logic_0));
    end process;


    ap_block_state11_pp0_stage1_iter2_assign_proc : process(data_out_V_req_full_n, icmp_ln33_reg_923_pp0_iter2_reg)
    begin
                ap_block_state11_pp0_stage1_iter2 <= ((icmp_ln33_reg_923_pp0_iter2_reg = ap_const_lv1_0) and (data_out_V_req_full_n = ap_const_logic_0));
    end process;


    ap_block_state12_pp0_stage2_iter2_assign_proc : process(data_out_V_req_full_n, icmp_ln33_reg_923_pp0_iter2_reg)
    begin
                ap_block_state12_pp0_stage2_iter2 <= ((icmp_ln33_reg_923_pp0_iter2_reg = ap_const_lv1_0) and (data_out_V_req_full_n = ap_const_logic_0));
    end process;


    ap_block_state13_pp0_stage3_iter2_assign_proc : process(data_out_V_req_full_n, icmp_ln33_reg_923_pp0_iter2_reg)
    begin
                ap_block_state13_pp0_stage3_iter2 <= ((icmp_ln33_reg_923_pp0_iter2_reg = ap_const_lv1_0) and (data_out_V_req_full_n = ap_const_logic_0));
    end process;

        ap_block_state2_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage2_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state5_pp0_stage3_iter0_assign_proc : process(data1_V_rsp_empty_n, icmp_ln33_reg_923)
    begin
                ap_block_state5_pp0_stage3_iter0 <= ((icmp_ln33_reg_923 = ap_const_lv1_0) and (data1_V_rsp_empty_n = ap_const_logic_0));
    end process;


    ap_block_state6_pp0_stage0_iter1_assign_proc : process(data1_V_rsp_empty_n, icmp_ln33_reg_923)
    begin
                ap_block_state6_pp0_stage0_iter1 <= ((icmp_ln33_reg_923 = ap_const_lv1_0) and (data1_V_rsp_empty_n = ap_const_logic_0));
    end process;


    ap_block_state7_pp0_stage1_iter1_assign_proc : process(data1_V_rsp_empty_n, icmp_ln33_reg_923_pp0_iter1_reg)
    begin
                ap_block_state7_pp0_stage1_iter1 <= ((icmp_ln33_reg_923_pp0_iter1_reg = ap_const_lv1_0) and (data1_V_rsp_empty_n = ap_const_logic_0));
    end process;


    ap_block_state8_pp0_stage2_iter1_assign_proc : process(data1_V_rsp_empty_n, icmp_ln33_reg_923_pp0_iter1_reg)
    begin
                ap_block_state8_pp0_stage2_iter1 <= ((icmp_ln33_reg_923_pp0_iter1_reg = ap_const_lv1_0) and (data1_V_rsp_empty_n = ap_const_logic_0));
    end process;

        ap_block_state9_pp0_stage3_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_752_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln33_reg_923_pp0_iter1_reg, ap_block_pp0_stage0_11001)
    begin
                ap_condition_752 <= ((icmp_ln33_reg_923_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001));
    end process;


    ap_condition_756_assign_proc : process(icmp_ln33_reg_923_pp0_iter2_reg, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
                ap_condition_756 <= ((icmp_ln33_reg_923_pp0_iter2_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001));
    end process;


    ap_condition_760_assign_proc : process(icmp_ln33_reg_923_pp0_iter2_reg, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001)
    begin
                ap_condition_760 <= ((icmp_ln33_reg_923_pp0_iter2_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001));
    end process;


    ap_condition_764_assign_proc : process(ap_CS_fsm_pp0_stage3, icmp_ln33_reg_923_pp0_iter2_reg, ap_block_pp0_stage3_11001)
    begin
                ap_condition_764 <= ((icmp_ln33_reg_923_pp0_iter2_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001));
    end process;


    ap_condition_pp0_exit_iter0_state2_assign_proc : process(icmp_ln33_fu_331_p2)
    begin
        if ((icmp_ln33_fu_331_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_i_1_phi_fu_256_p4_assign_proc : process(i_1_reg_252, icmp_ln33_reg_923, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, i_reg_927, ap_block_pp0_stage0)
    begin
        if (((icmp_ln33_reg_923 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_phi_mux_i_1_phi_fu_256_p4 <= i_reg_927;
        else 
            ap_phi_mux_i_1_phi_fu_256_p4 <= i_1_reg_252;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    data1_V_address <= zext_ln41_fu_348_p1(32 - 1 downto 0);
    data1_V_dataout <= ap_const_lv17_0;
    data1_V_req_din <= ap_const_logic_0;

    data1_V_req_write_assign_proc : process(ap_enable_reg_pp0_iter0, icmp_ln33_reg_923, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
        if (((icmp_ln33_reg_923 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then 
            data1_V_req_write <= ap_const_logic_1;
        else 
            data1_V_req_write <= ap_const_logic_0;
        end if; 
    end process;


    data1_V_rsp_read_assign_proc : process(ap_CS_fsm_pp0_stage3, ap_enable_reg_pp0_iter0, icmp_ln33_reg_923, ap_block_pp0_stage3_11001, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln33_reg_923_pp0_iter1_reg, ap_block_pp0_stage0_11001, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001)
    begin
        if ((((icmp_ln33_reg_923 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((icmp_ln33_reg_923 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001)) or ((icmp_ln33_reg_923_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001)) or ((icmp_ln33_reg_923_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)))) then 
            data1_V_rsp_read <= ap_const_logic_1;
        else 
            data1_V_rsp_read <= ap_const_logic_0;
        end if; 
    end process;

    data1_V_size <= ap_const_lv32_4;
    data_out_V_address <= data_out_V_addr_reg_943_pp0_iter1_reg;

    data_out_V_dataout_assign_proc : process(ap_enable_reg_pp0_iter2, p_trunc_ln708_2_reg_1008, p_trunc_ln708_5_reg_1013, p_trunc_ln708_8_reg_1018, p_trunc_ln708_s_reg_1023, ap_condition_752, ap_condition_756, ap_condition_760, ap_condition_764)
    begin
        if ((ap_enable_reg_pp0_iter2 = ap_const_logic_1)) then
            if ((ap_const_boolean_1 = ap_condition_764)) then 
                data_out_V_dataout <= p_trunc_ln708_s_reg_1023;
            elsif ((ap_const_boolean_1 = ap_condition_760)) then 
                data_out_V_dataout <= p_trunc_ln708_8_reg_1018;
            elsif ((ap_const_boolean_1 = ap_condition_756)) then 
                data_out_V_dataout <= p_trunc_ln708_5_reg_1013;
            elsif ((ap_const_boolean_1 = ap_condition_752)) then 
                data_out_V_dataout <= p_trunc_ln708_2_reg_1008;
            else 
                data_out_V_dataout <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            data_out_V_dataout <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    data_out_V_req_din_assign_proc : process(ap_CS_fsm_pp0_stage3, icmp_ln33_reg_923_pp0_iter2_reg, ap_enable_reg_pp0_iter2, ap_block_pp0_stage3_11001, ap_CS_fsm_pp0_stage0, icmp_ln33_reg_923_pp0_iter1_reg, ap_block_pp0_stage0_11001, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001)
    begin
        if ((((icmp_ln33_reg_923_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((icmp_ln33_reg_923_pp0_iter2_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001)) or ((icmp_ln33_reg_923_pp0_iter2_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)) or ((icmp_ln33_reg_923_pp0_iter2_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001)))) then 
            data_out_V_req_din <= ap_const_logic_1;
        else 
            data_out_V_req_din <= ap_const_logic_0;
        end if; 
    end process;


    data_out_V_req_write_assign_proc : process(ap_CS_fsm_pp0_stage3, icmp_ln33_reg_923_pp0_iter2_reg, ap_enable_reg_pp0_iter2, ap_block_pp0_stage3_11001, ap_CS_fsm_pp0_stage0, icmp_ln33_reg_923_pp0_iter1_reg, ap_block_pp0_stage0_11001, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001)
    begin
        if ((((icmp_ln33_reg_923_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((icmp_ln33_reg_923_pp0_iter2_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001)) or ((icmp_ln33_reg_923_pp0_iter2_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)) or ((icmp_ln33_reg_923_pp0_iter2_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001)))) then 
            data_out_V_req_write <= ap_const_logic_1;
        else 
            data_out_V_req_write <= ap_const_logic_0;
        end if; 
    end process;

    data_out_V_rsp_read <= ap_const_logic_0;
    data_out_V_size <= ap_const_lv32_4;
    grp_fu_734_p0 <= grp_fu_734_p00(17 - 1 downto 0);
    grp_fu_734_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(data0_1_V),34));
    grp_fu_734_p1 <= zext_ln1118_1_fu_411_p1(17 - 1 downto 0);
    grp_fu_734_p2 <= grp_fu_734_p20(34 - 1 downto 0);
    grp_fu_734_p20 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(and_ln_fu_404_p3),35));
    grp_fu_742_p0 <= grp_fu_742_p00(17 - 1 downto 0);
    grp_fu_742_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(data0_5_V),34));
    grp_fu_742_p1 <= zext_ln1118_1_fu_411_p1(17 - 1 downto 0);
    grp_fu_742_p2 <= grp_fu_742_p20(34 - 1 downto 0);
    grp_fu_742_p20 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(and_ln728_1_fu_428_p3),35));
    grp_fu_750_p0 <= grp_fu_750_p00(17 - 1 downto 0);
    grp_fu_750_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(data0_9_V),34));
    grp_fu_750_p1 <= zext_ln1118_1_fu_411_p1(17 - 1 downto 0);
    grp_fu_750_p2 <= grp_fu_750_p20(34 - 1 downto 0);
    grp_fu_750_p20 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(and_ln728_2_fu_448_p3),35));
    grp_fu_758_p0 <= grp_fu_758_p00(17 - 1 downto 0);
    grp_fu_758_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(data0_13_V),34));
    grp_fu_758_p1 <= zext_ln1118_1_fu_411_p1(17 - 1 downto 0);
    grp_fu_758_p2 <= grp_fu_758_p20(34 - 1 downto 0);
    grp_fu_758_p20 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(and_ln728_3_fu_468_p3),35));
    grp_fu_766_p0 <= grp_fu_766_p00(17 - 1 downto 0);
    grp_fu_766_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(data0_2_V),34));
    grp_fu_766_p1 <= zext_ln1118_2_fu_488_p1(17 - 1 downto 0);
    grp_fu_766_p2 <= grp_fu_766_p20(35 - 1 downto 0);
    grp_fu_766_p20 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln1_fu_492_p3),36));
    grp_fu_774_p0 <= grp_fu_774_p00(17 - 1 downto 0);
    grp_fu_774_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(data0_6_V),34));
    grp_fu_774_p1 <= zext_ln1118_2_fu_488_p1(17 - 1 downto 0);
    grp_fu_774_p2 <= grp_fu_774_p20(35 - 1 downto 0);
    grp_fu_774_p20 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln728_2_fu_512_p3),36));
    grp_fu_782_p0 <= grp_fu_782_p00(17 - 1 downto 0);
    grp_fu_782_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(data0_10_V),34));
    grp_fu_782_p1 <= zext_ln1118_2_fu_488_p1(17 - 1 downto 0);
    grp_fu_782_p2 <= grp_fu_782_p20(35 - 1 downto 0);
    grp_fu_782_p20 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln728_4_fu_532_p3),36));
    grp_fu_790_p0 <= grp_fu_790_p00(17 - 1 downto 0);
    grp_fu_790_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(data0_14_V),34));
    grp_fu_790_p1 <= zext_ln1118_2_fu_488_p1(17 - 1 downto 0);
    grp_fu_790_p2 <= grp_fu_790_p20(35 - 1 downto 0);
    grp_fu_790_p20 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln728_6_fu_552_p3),36));
    grp_fu_798_p0 <= grp_fu_798_p00(17 - 1 downto 0);
    grp_fu_798_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(data0_3_V),34));
    grp_fu_798_p1 <= zext_ln1118_3_fu_572_p1(17 - 1 downto 0);
    grp_fu_798_p2 <= (tmp_4_reg_988 & ap_const_lv2_0);
    grp_fu_806_p0 <= grp_fu_806_p00(17 - 1 downto 0);
    grp_fu_806_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(data0_7_V),34));
    grp_fu_806_p1 <= zext_ln1118_3_fu_572_p1(17 - 1 downto 0);
    grp_fu_806_p2 <= (tmp_7_reg_993 & ap_const_lv2_0);
    grp_fu_814_p0 <= grp_fu_814_p00(17 - 1 downto 0);
    grp_fu_814_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(data0_11_V),34));
    grp_fu_814_p1 <= zext_ln1118_3_fu_572_p1(17 - 1 downto 0);
    grp_fu_814_p2 <= (tmp_s_reg_998 & ap_const_lv2_0);
    grp_fu_822_p0 <= grp_fu_822_p00(17 - 1 downto 0);
    grp_fu_822_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(data0_15_V),34));
    grp_fu_822_p1 <= zext_ln1118_3_fu_572_p1(17 - 1 downto 0);
    grp_fu_822_p2 <= (tmp_11_reg_1003 & ap_const_lv2_0);
    i_fu_336_p2 <= std_logic_vector(unsigned(ap_phi_mux_i_1_phi_fu_256_p4) + unsigned(ap_const_lv32_1));
    icmp_ln1494_1_fu_613_p2 <= "1" when (unsigned(trunc_ln708_5_fu_604_p4) > unsigned(threshold_V)) else "0";
    icmp_ln1494_2_fu_634_p2 <= "1" when (unsigned(trunc_ln708_8_fu_625_p4) > unsigned(threshold_V)) else "0";
    icmp_ln1494_3_fu_655_p2 <= "1" when (unsigned(trunc_ln708_s_fu_646_p4) > unsigned(threshold_V)) else "0";
    icmp_ln1494_fu_592_p2 <= "1" when (unsigned(trunc_ln708_2_fu_583_p4) > unsigned(threshold_V)) else "0";
    icmp_ln33_fu_331_p2 <= "1" when (ap_phi_mux_i_1_phi_fu_256_p4 = size) else "0";
    mul_ln1118_12_fu_728_p0 <= mul_ln1118_12_fu_728_p00(17 - 1 downto 0);
    mul_ln1118_12_fu_728_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(data0_12_V),34));
    mul_ln1118_12_fu_728_p1 <= zext_ln1118_fu_364_p1(17 - 1 downto 0);
    mul_ln1118_4_fu_716_p0 <= mul_ln1118_4_fu_716_p00(17 - 1 downto 0);
    mul_ln1118_4_fu_716_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(data0_4_V),34));
    mul_ln1118_4_fu_716_p1 <= zext_ln1118_fu_364_p1(17 - 1 downto 0);
    mul_ln1118_8_fu_722_p0 <= mul_ln1118_8_fu_722_p00(17 - 1 downto 0);
    mul_ln1118_8_fu_722_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(data0_8_V),34));
    mul_ln1118_8_fu_722_p1 <= zext_ln1118_fu_364_p1(17 - 1 downto 0);
    mul_ln1118_fu_710_p0 <= mul_ln1118_fu_710_p00(17 - 1 downto 0);
    mul_ln1118_fu_710_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(data0_0_V),34));
    mul_ln1118_fu_710_p1 <= zext_ln1118_fu_364_p1(17 - 1 downto 0);
    p_trunc_ln708_2_fu_678_p3 <= 
        ap_const_lv34_0 when (and_ln52_2_fu_672_p2(0) = '1') else 
        trunc_ln708_2_fu_583_p4;
    p_trunc_ln708_5_fu_686_p3 <= 
        ap_const_lv34_0 when (and_ln52_2_fu_672_p2(0) = '1') else 
        trunc_ln708_5_fu_604_p4;
    p_trunc_ln708_8_fu_694_p3 <= 
        ap_const_lv34_0 when (and_ln52_2_fu_672_p2(0) = '1') else 
        trunc_ln708_8_fu_625_p4;
    p_trunc_ln708_s_fu_702_p3 <= 
        ap_const_lv34_0 when (and_ln52_2_fu_672_p2(0) = '1') else 
        trunc_ln708_s_fu_646_p4;
    shl_ln1_fu_492_p3 <= (tmp_3_reg_968 & ap_const_lv2_0);
    shl_ln41_fu_342_p2 <= std_logic_vector(shift_left(unsigned(ap_phi_mux_i_1_phi_fu_256_p4),to_integer(unsigned('0' & ap_const_lv32_2(31-1 downto 0)))));
    shl_ln728_2_fu_512_p3 <= (tmp_6_reg_973 & ap_const_lv2_0);
    shl_ln728_4_fu_532_p3 <= (tmp_9_reg_978 & ap_const_lv2_0);
    shl_ln728_6_fu_552_p3 <= (tmp_10_reg_983 & ap_const_lv2_0);
    trunc_ln708_2_fu_583_p4 <= grp_fu_798_p3(35 downto 2);
    trunc_ln708_5_fu_604_p4 <= grp_fu_806_p3(35 downto 2);
    trunc_ln708_8_fu_625_p4 <= grp_fu_814_p3(35 downto 2);
    trunc_ln708_s_fu_646_p4 <= grp_fu_822_p3(35 downto 2);
    zext_ln1118_1_fu_411_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(reg_263),34));
    zext_ln1118_2_fu_488_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(reg_263),34));
    zext_ln1118_3_fu_572_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(reg_263),34));
    zext_ln1118_fu_364_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(reg_263),34));
    zext_ln41_fu_348_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln41_reg_932),64));
end behav;
