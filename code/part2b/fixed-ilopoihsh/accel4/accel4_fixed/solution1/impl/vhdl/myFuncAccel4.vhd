-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity myFuncAccel4 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    size : IN STD_LOGIC_VECTOR (31 downto 0);
    dim : IN STD_LOGIC_VECTOR (31 downto 0);
    threshold_V : IN STD_LOGIC_VECTOR (33 downto 0);
    data0_0_V : IN STD_LOGIC_VECTOR (16 downto 0);
    data0_1_V : IN STD_LOGIC_VECTOR (16 downto 0);
    data0_2_V : IN STD_LOGIC_VECTOR (16 downto 0);
    data0_3_V : IN STD_LOGIC_VECTOR (16 downto 0);
    data0_4_V : IN STD_LOGIC_VECTOR (16 downto 0);
    data0_5_V : IN STD_LOGIC_VECTOR (16 downto 0);
    data0_6_V : IN STD_LOGIC_VECTOR (16 downto 0);
    data0_7_V : IN STD_LOGIC_VECTOR (16 downto 0);
    data0_8_V : IN STD_LOGIC_VECTOR (16 downto 0);
    data0_9_V : IN STD_LOGIC_VECTOR (16 downto 0);
    data0_10_V : IN STD_LOGIC_VECTOR (16 downto 0);
    data0_11_V : IN STD_LOGIC_VECTOR (16 downto 0);
    data0_12_V : IN STD_LOGIC_VECTOR (16 downto 0);
    data0_13_V : IN STD_LOGIC_VECTOR (16 downto 0);
    data0_14_V : IN STD_LOGIC_VECTOR (16 downto 0);
    data0_15_V : IN STD_LOGIC_VECTOR (16 downto 0);
    my_input1_V_TDATA : IN STD_LOGIC_VECTOR (23 downto 0);
    my_input1_V_TVALID : IN STD_LOGIC;
    my_input1_V_TREADY : OUT STD_LOGIC;
    my_output_V_TDATA : OUT STD_LOGIC_VECTOR (39 downto 0);
    my_output_V_TVALID : OUT STD_LOGIC;
    my_output_V_TREADY : IN STD_LOGIC );
end;


architecture behav of myFuncAccel4 is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "myFuncAccel4,hls_ip_2019_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z020-clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.868000,HLS_SYN_LAT=403,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=16,HLS_SYN_FF=644,HLS_SYN_LUT=391,HLS_VERSION=2019_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (5 downto 0) := "000010";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (5 downto 0) := "000100";
    constant ap_ST_fsm_pp0_stage2 : STD_LOGIC_VECTOR (5 downto 0) := "001000";
    constant ap_ST_fsm_pp0_stage3 : STD_LOGIC_VECTOR (5 downto 0) := "010000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_21 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100001";
    constant ap_const_lv32_22 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100010";
    constant ap_const_lv32_23 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100011";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv34_0 : STD_LOGIC_VECTOR (33 downto 0) := "0000000000000000000000000000000000";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal my_input1_V_0_data_out : STD_LOGIC_VECTOR (23 downto 0);
    signal my_input1_V_0_vld_in : STD_LOGIC;
    signal my_input1_V_0_vld_out : STD_LOGIC;
    signal my_input1_V_0_ack_in : STD_LOGIC;
    signal my_input1_V_0_ack_out : STD_LOGIC;
    signal my_input1_V_0_payload_A : STD_LOGIC_VECTOR (23 downto 0);
    signal my_input1_V_0_payload_B : STD_LOGIC_VECTOR (23 downto 0);
    signal my_input1_V_0_sel_rd : STD_LOGIC := '0';
    signal my_input1_V_0_sel_wr : STD_LOGIC := '0';
    signal my_input1_V_0_sel : STD_LOGIC;
    signal my_input1_V_0_load_A : STD_LOGIC;
    signal my_input1_V_0_load_B : STD_LOGIC;
    signal my_input1_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal my_input1_V_0_state_cmp_full : STD_LOGIC;
    signal my_output_V_1_data_out : STD_LOGIC_VECTOR (39 downto 0);
    signal my_output_V_1_vld_in : STD_LOGIC;
    signal my_output_V_1_vld_out : STD_LOGIC;
    signal my_output_V_1_ack_in : STD_LOGIC;
    signal my_output_V_1_ack_out : STD_LOGIC;
    signal my_output_V_1_payload_A : STD_LOGIC_VECTOR (39 downto 0);
    signal my_output_V_1_payload_B : STD_LOGIC_VECTOR (39 downto 0);
    signal my_output_V_1_sel_rd : STD_LOGIC := '0';
    signal my_output_V_1_sel_wr : STD_LOGIC := '0';
    signal my_output_V_1_sel : STD_LOGIC;
    signal my_output_V_1_load_A : STD_LOGIC;
    signal my_output_V_1_load_B : STD_LOGIC;
    signal my_output_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal my_output_V_1_state_cmp_full : STD_LOGIC;
    signal my_input1_V_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal icmp_ln33_fu_318_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal icmp_ln33_reg_910 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage2 : signal is "none";
    signal ap_block_pp0_stage2 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage3 : signal is "none";
    signal ap_block_pp0_stage3 : BOOLEAN;
    signal my_output_V_TDATA_blk_n : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal icmp_ln33_reg_910_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal i_1_reg_243 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state6_io : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal i_fu_323_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_reg_914 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_reg_919 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_reg_924 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_7_reg_929 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_s_reg_934 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_reg_939 : STD_LOGIC_VECTOR (32 downto 0);
    signal ap_block_state3_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_state7_pp0_stage1_iter1 : BOOLEAN;
    signal ap_block_state7_io : BOOLEAN;
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal tmp_5_reg_944 : STD_LOGIC_VECTOR (32 downto 0);
    signal tmp_8_reg_949 : STD_LOGIC_VECTOR (32 downto 0);
    signal tmp_10_reg_954 : STD_LOGIC_VECTOR (32 downto 0);
    signal tmp_3_reg_959 : STD_LOGIC_VECTOR (33 downto 0);
    signal ap_block_state4_pp0_stage2_iter0 : BOOLEAN;
    signal ap_block_pp0_stage2_11001 : BOOLEAN;
    signal tmp_6_reg_964 : STD_LOGIC_VECTOR (33 downto 0);
    signal tmp_9_reg_969 : STD_LOGIC_VECTOR (33 downto 0);
    signal tmp_11_reg_974 : STD_LOGIC_VECTOR (33 downto 0);
    signal icmp_ln1494_fu_573_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1494_reg_979 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state5_pp0_stage3_iter0 : BOOLEAN;
    signal ap_block_pp0_stage3_11001 : BOOLEAN;
    signal icmp_ln1494_1_fu_594_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1494_1_reg_984 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1494_2_fu_615_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1494_2_reg_989 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln708_s_fu_627_p4 : STD_LOGIC_VECTOR (33 downto 0);
    signal trunc_ln708_s_reg_994 : STD_LOGIC_VECTOR (33 downto 0);
    signal icmp_ln1494_3_fu_636_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1494_3_reg_999 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln356_fu_692_p1 : STD_LOGIC_VECTOR (39 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state2 : STD_LOGIC;
    signal ap_block_pp0_stage3_subdone : BOOLEAN;
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal ap_phi_mux_i_1_phi_fu_247_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal trunc_ln356_fu_329_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal mul_ln1118_fu_697_p2 : STD_LOGIC_VECTOR (33 downto 0);
    signal mul_ln1118_4_fu_703_p2 : STD_LOGIC_VECTOR (33 downto 0);
    signal mul_ln1118_8_fu_709_p2 : STD_LOGIC_VECTOR (33 downto 0);
    signal mul_ln1118_12_fu_715_p2 : STD_LOGIC_VECTOR (33 downto 0);
    signal trunc_ln356_1_fu_373_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal and_ln_fu_377_p3 : STD_LOGIC_VECTOR (33 downto 0);
    signal grp_fu_721_p3 : STD_LOGIC_VECTOR (34 downto 0);
    signal and_ln728_1_fu_401_p3 : STD_LOGIC_VECTOR (33 downto 0);
    signal grp_fu_729_p3 : STD_LOGIC_VECTOR (34 downto 0);
    signal and_ln728_2_fu_421_p3 : STD_LOGIC_VECTOR (33 downto 0);
    signal grp_fu_737_p3 : STD_LOGIC_VECTOR (34 downto 0);
    signal and_ln728_3_fu_441_p3 : STD_LOGIC_VECTOR (33 downto 0);
    signal grp_fu_745_p3 : STD_LOGIC_VECTOR (34 downto 0);
    signal trunc_ln356_2_fu_461_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal shl_ln_fu_469_p3 : STD_LOGIC_VECTOR (34 downto 0);
    signal grp_fu_753_p3 : STD_LOGIC_VECTOR (35 downto 0);
    signal shl_ln728_2_fu_489_p3 : STD_LOGIC_VECTOR (34 downto 0);
    signal grp_fu_761_p3 : STD_LOGIC_VECTOR (35 downto 0);
    signal shl_ln728_4_fu_509_p3 : STD_LOGIC_VECTOR (34 downto 0);
    signal grp_fu_769_p3 : STD_LOGIC_VECTOR (35 downto 0);
    signal shl_ln728_6_fu_529_p3 : STD_LOGIC_VECTOR (34 downto 0);
    signal grp_fu_777_p3 : STD_LOGIC_VECTOR (35 downto 0);
    signal trunc_ln356_3_fu_549_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_fu_785_p3 : STD_LOGIC_VECTOR (35 downto 0);
    signal trunc_ln708_2_fu_564_p4 : STD_LOGIC_VECTOR (33 downto 0);
    signal grp_fu_793_p3 : STD_LOGIC_VECTOR (35 downto 0);
    signal trunc_ln708_5_fu_585_p4 : STD_LOGIC_VECTOR (33 downto 0);
    signal grp_fu_801_p3 : STD_LOGIC_VECTOR (35 downto 0);
    signal trunc_ln708_8_fu_606_p4 : STD_LOGIC_VECTOR (33 downto 0);
    signal grp_fu_809_p3 : STD_LOGIC_VECTOR (35 downto 0);
    signal zext_ln1118_4_fu_641_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal zext_ln1118_5_fu_644_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln52_fu_653_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal zext_ln52_fu_650_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal zext_ln1118_6_fu_647_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln52_1_fu_663_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal zext_ln52_1_fu_659_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal zext_ln52_2_fu_669_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln52_2_fu_673_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal icmp_ln54_fu_679_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln54_fu_685_p3 : STD_LOGIC_VECTOR (33 downto 0);
    signal mul_ln1118_fu_697_p0 : STD_LOGIC_VECTOR (16 downto 0);
    signal mul_ln1118_fu_697_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal zext_ln1118_fu_333_p1 : STD_LOGIC_VECTOR (33 downto 0);
    signal mul_ln1118_4_fu_703_p0 : STD_LOGIC_VECTOR (16 downto 0);
    signal mul_ln1118_4_fu_703_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal mul_ln1118_8_fu_709_p0 : STD_LOGIC_VECTOR (16 downto 0);
    signal mul_ln1118_8_fu_709_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal mul_ln1118_12_fu_715_p0 : STD_LOGIC_VECTOR (16 downto 0);
    signal mul_ln1118_12_fu_715_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_fu_721_p0 : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_fu_721_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal zext_ln1118_1_fu_384_p1 : STD_LOGIC_VECTOR (33 downto 0);
    signal grp_fu_721_p2 : STD_LOGIC_VECTOR (33 downto 0);
    signal grp_fu_729_p0 : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_fu_729_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_fu_729_p2 : STD_LOGIC_VECTOR (33 downto 0);
    signal grp_fu_737_p0 : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_fu_737_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_fu_737_p2 : STD_LOGIC_VECTOR (33 downto 0);
    signal grp_fu_745_p0 : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_fu_745_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_fu_745_p2 : STD_LOGIC_VECTOR (33 downto 0);
    signal grp_fu_753_p0 : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_fu_753_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal zext_ln1118_2_fu_465_p1 : STD_LOGIC_VECTOR (33 downto 0);
    signal grp_fu_753_p2 : STD_LOGIC_VECTOR (34 downto 0);
    signal grp_fu_761_p0 : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_fu_761_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_fu_761_p2 : STD_LOGIC_VECTOR (34 downto 0);
    signal grp_fu_769_p0 : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_fu_769_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_fu_769_p2 : STD_LOGIC_VECTOR (34 downto 0);
    signal grp_fu_777_p0 : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_fu_777_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_fu_777_p2 : STD_LOGIC_VECTOR (34 downto 0);
    signal grp_fu_785_p0 : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_fu_785_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal zext_ln1118_3_fu_553_p1 : STD_LOGIC_VECTOR (33 downto 0);
    signal grp_fu_785_p2 : STD_LOGIC_VECTOR (35 downto 0);
    signal grp_fu_793_p0 : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_fu_793_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_fu_793_p2 : STD_LOGIC_VECTOR (35 downto 0);
    signal grp_fu_801_p0 : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_fu_801_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_fu_801_p2 : STD_LOGIC_VECTOR (35 downto 0);
    signal grp_fu_809_p0 : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_fu_809_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_fu_809_p2 : STD_LOGIC_VECTOR (35 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal ap_block_state8 : BOOLEAN;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_block_pp0_stage2_subdone : BOOLEAN;
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal grp_fu_721_p00 : STD_LOGIC_VECTOR (33 downto 0);
    signal grp_fu_721_p20 : STD_LOGIC_VECTOR (34 downto 0);
    signal grp_fu_729_p00 : STD_LOGIC_VECTOR (33 downto 0);
    signal grp_fu_729_p20 : STD_LOGIC_VECTOR (34 downto 0);
    signal grp_fu_737_p00 : STD_LOGIC_VECTOR (33 downto 0);
    signal grp_fu_737_p20 : STD_LOGIC_VECTOR (34 downto 0);
    signal grp_fu_745_p00 : STD_LOGIC_VECTOR (33 downto 0);
    signal grp_fu_745_p20 : STD_LOGIC_VECTOR (34 downto 0);
    signal grp_fu_753_p00 : STD_LOGIC_VECTOR (33 downto 0);
    signal grp_fu_753_p20 : STD_LOGIC_VECTOR (35 downto 0);
    signal grp_fu_761_p00 : STD_LOGIC_VECTOR (33 downto 0);
    signal grp_fu_761_p20 : STD_LOGIC_VECTOR (35 downto 0);
    signal grp_fu_769_p00 : STD_LOGIC_VECTOR (33 downto 0);
    signal grp_fu_769_p20 : STD_LOGIC_VECTOR (35 downto 0);
    signal grp_fu_777_p00 : STD_LOGIC_VECTOR (33 downto 0);
    signal grp_fu_777_p20 : STD_LOGIC_VECTOR (35 downto 0);
    signal grp_fu_785_p00 : STD_LOGIC_VECTOR (33 downto 0);
    signal grp_fu_793_p00 : STD_LOGIC_VECTOR (33 downto 0);
    signal grp_fu_801_p00 : STD_LOGIC_VECTOR (33 downto 0);
    signal grp_fu_809_p00 : STD_LOGIC_VECTOR (33 downto 0);
    signal mul_ln1118_12_fu_715_p00 : STD_LOGIC_VECTOR (33 downto 0);
    signal mul_ln1118_4_fu_703_p00 : STD_LOGIC_VECTOR (33 downto 0);
    signal mul_ln1118_8_fu_709_p00 : STD_LOGIC_VECTOR (33 downto 0);
    signal mul_ln1118_fu_697_p00 : STD_LOGIC_VECTOR (33 downto 0);

    component myFuncAccel4_mul_mul_17ns_17ns_34_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (16 downto 0);
        din1 : IN STD_LOGIC_VECTOR (16 downto 0);
        dout : OUT STD_LOGIC_VECTOR (33 downto 0) );
    end component;


    component myFuncAccel4_mac_muladd_17ns_17ns_34ns_35_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (16 downto 0);
        din1 : IN STD_LOGIC_VECTOR (16 downto 0);
        din2 : IN STD_LOGIC_VECTOR (33 downto 0);
        dout : OUT STD_LOGIC_VECTOR (34 downto 0) );
    end component;


    component myFuncAccel4_mac_muladd_17ns_17ns_35ns_36_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (16 downto 0);
        din1 : IN STD_LOGIC_VECTOR (16 downto 0);
        din2 : IN STD_LOGIC_VECTOR (34 downto 0);
        dout : OUT STD_LOGIC_VECTOR (35 downto 0) );
    end component;


    component myFuncAccel4_mac_muladd_17ns_17ns_36ns_36_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (16 downto 0);
        din1 : IN STD_LOGIC_VECTOR (16 downto 0);
        din2 : IN STD_LOGIC_VECTOR (35 downto 0);
        dout : OUT STD_LOGIC_VECTOR (35 downto 0) );
    end component;



begin
    myFuncAccel4_mul_mul_17ns_17ns_34_1_1_U1 : component myFuncAccel4_mul_mul_17ns_17ns_34_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 17,
        din1_WIDTH => 17,
        dout_WIDTH => 34)
    port map (
        din0 => mul_ln1118_fu_697_p0,
        din1 => mul_ln1118_fu_697_p1,
        dout => mul_ln1118_fu_697_p2);

    myFuncAccel4_mul_mul_17ns_17ns_34_1_1_U2 : component myFuncAccel4_mul_mul_17ns_17ns_34_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 17,
        din1_WIDTH => 17,
        dout_WIDTH => 34)
    port map (
        din0 => mul_ln1118_4_fu_703_p0,
        din1 => mul_ln1118_4_fu_703_p1,
        dout => mul_ln1118_4_fu_703_p2);

    myFuncAccel4_mul_mul_17ns_17ns_34_1_1_U3 : component myFuncAccel4_mul_mul_17ns_17ns_34_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 17,
        din1_WIDTH => 17,
        dout_WIDTH => 34)
    port map (
        din0 => mul_ln1118_8_fu_709_p0,
        din1 => mul_ln1118_8_fu_709_p1,
        dout => mul_ln1118_8_fu_709_p2);

    myFuncAccel4_mul_mul_17ns_17ns_34_1_1_U4 : component myFuncAccel4_mul_mul_17ns_17ns_34_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 17,
        din1_WIDTH => 17,
        dout_WIDTH => 34)
    port map (
        din0 => mul_ln1118_12_fu_715_p0,
        din1 => mul_ln1118_12_fu_715_p1,
        dout => mul_ln1118_12_fu_715_p2);

    myFuncAccel4_mac_muladd_17ns_17ns_34ns_35_1_1_U5 : component myFuncAccel4_mac_muladd_17ns_17ns_34ns_35_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 17,
        din1_WIDTH => 17,
        din2_WIDTH => 34,
        dout_WIDTH => 35)
    port map (
        din0 => grp_fu_721_p0,
        din1 => grp_fu_721_p1,
        din2 => grp_fu_721_p2,
        dout => grp_fu_721_p3);

    myFuncAccel4_mac_muladd_17ns_17ns_34ns_35_1_1_U6 : component myFuncAccel4_mac_muladd_17ns_17ns_34ns_35_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 17,
        din1_WIDTH => 17,
        din2_WIDTH => 34,
        dout_WIDTH => 35)
    port map (
        din0 => grp_fu_729_p0,
        din1 => grp_fu_729_p1,
        din2 => grp_fu_729_p2,
        dout => grp_fu_729_p3);

    myFuncAccel4_mac_muladd_17ns_17ns_34ns_35_1_1_U7 : component myFuncAccel4_mac_muladd_17ns_17ns_34ns_35_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 17,
        din1_WIDTH => 17,
        din2_WIDTH => 34,
        dout_WIDTH => 35)
    port map (
        din0 => grp_fu_737_p0,
        din1 => grp_fu_737_p1,
        din2 => grp_fu_737_p2,
        dout => grp_fu_737_p3);

    myFuncAccel4_mac_muladd_17ns_17ns_34ns_35_1_1_U8 : component myFuncAccel4_mac_muladd_17ns_17ns_34ns_35_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 17,
        din1_WIDTH => 17,
        din2_WIDTH => 34,
        dout_WIDTH => 35)
    port map (
        din0 => grp_fu_745_p0,
        din1 => grp_fu_745_p1,
        din2 => grp_fu_745_p2,
        dout => grp_fu_745_p3);

    myFuncAccel4_mac_muladd_17ns_17ns_35ns_36_1_1_U9 : component myFuncAccel4_mac_muladd_17ns_17ns_35ns_36_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 17,
        din1_WIDTH => 17,
        din2_WIDTH => 35,
        dout_WIDTH => 36)
    port map (
        din0 => grp_fu_753_p0,
        din1 => grp_fu_753_p1,
        din2 => grp_fu_753_p2,
        dout => grp_fu_753_p3);

    myFuncAccel4_mac_muladd_17ns_17ns_35ns_36_1_1_U10 : component myFuncAccel4_mac_muladd_17ns_17ns_35ns_36_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 17,
        din1_WIDTH => 17,
        din2_WIDTH => 35,
        dout_WIDTH => 36)
    port map (
        din0 => grp_fu_761_p0,
        din1 => grp_fu_761_p1,
        din2 => grp_fu_761_p2,
        dout => grp_fu_761_p3);

    myFuncAccel4_mac_muladd_17ns_17ns_35ns_36_1_1_U11 : component myFuncAccel4_mac_muladd_17ns_17ns_35ns_36_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 17,
        din1_WIDTH => 17,
        din2_WIDTH => 35,
        dout_WIDTH => 36)
    port map (
        din0 => grp_fu_769_p0,
        din1 => grp_fu_769_p1,
        din2 => grp_fu_769_p2,
        dout => grp_fu_769_p3);

    myFuncAccel4_mac_muladd_17ns_17ns_35ns_36_1_1_U12 : component myFuncAccel4_mac_muladd_17ns_17ns_35ns_36_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 17,
        din1_WIDTH => 17,
        din2_WIDTH => 35,
        dout_WIDTH => 36)
    port map (
        din0 => grp_fu_777_p0,
        din1 => grp_fu_777_p1,
        din2 => grp_fu_777_p2,
        dout => grp_fu_777_p3);

    myFuncAccel4_mac_muladd_17ns_17ns_36ns_36_1_1_U13 : component myFuncAccel4_mac_muladd_17ns_17ns_36ns_36_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 17,
        din1_WIDTH => 17,
        din2_WIDTH => 36,
        dout_WIDTH => 36)
    port map (
        din0 => grp_fu_785_p0,
        din1 => grp_fu_785_p1,
        din2 => grp_fu_785_p2,
        dout => grp_fu_785_p3);

    myFuncAccel4_mac_muladd_17ns_17ns_36ns_36_1_1_U14 : component myFuncAccel4_mac_muladd_17ns_17ns_36ns_36_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 17,
        din1_WIDTH => 17,
        din2_WIDTH => 36,
        dout_WIDTH => 36)
    port map (
        din0 => grp_fu_793_p0,
        din1 => grp_fu_793_p1,
        din2 => grp_fu_793_p2,
        dout => grp_fu_793_p3);

    myFuncAccel4_mac_muladd_17ns_17ns_36ns_36_1_1_U15 : component myFuncAccel4_mac_muladd_17ns_17ns_36ns_36_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 17,
        din1_WIDTH => 17,
        din2_WIDTH => 36,
        dout_WIDTH => 36)
    port map (
        din0 => grp_fu_801_p0,
        din1 => grp_fu_801_p1,
        din2 => grp_fu_801_p2,
        dout => grp_fu_801_p3);

    myFuncAccel4_mac_muladd_17ns_17ns_36ns_36_1_1_U16 : component myFuncAccel4_mac_muladd_17ns_17ns_36ns_36_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 17,
        din1_WIDTH => 17,
        din2_WIDTH => 36,
        dout_WIDTH => 36)
    port map (
        din0 => grp_fu_809_p0,
        din1 => grp_fu_809_p1,
        din2 => grp_fu_809_p2,
        dout => grp_fu_809_p3);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((((ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    my_input1_V_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                my_input1_V_0_sel_rd <= ap_const_logic_0;
            else
                if (((my_input1_V_0_ack_out = ap_const_logic_1) and (my_input1_V_0_vld_out = ap_const_logic_1))) then 
                                        my_input1_V_0_sel_rd <= not(my_input1_V_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    my_input1_V_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                my_input1_V_0_sel_wr <= ap_const_logic_0;
            else
                if (((my_input1_V_0_ack_in = ap_const_logic_1) and (my_input1_V_0_vld_in = ap_const_logic_1))) then 
                                        my_input1_V_0_sel_wr <= not(my_input1_V_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    my_input1_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                my_input1_V_0_state <= ap_const_lv2_0;
            else
                if ((((my_input1_V_0_state = ap_const_lv2_2) and (my_input1_V_0_vld_in = ap_const_logic_0)) or ((my_input1_V_0_state = ap_const_lv2_3) and (my_input1_V_0_vld_in = ap_const_logic_0) and (my_input1_V_0_ack_out = ap_const_logic_1)))) then 
                    my_input1_V_0_state <= ap_const_lv2_2;
                elsif ((((my_input1_V_0_state = ap_const_lv2_1) and (my_input1_V_0_ack_out = ap_const_logic_0)) or ((my_input1_V_0_state = ap_const_lv2_3) and (my_input1_V_0_ack_out = ap_const_logic_0) and (my_input1_V_0_vld_in = ap_const_logic_1)))) then 
                    my_input1_V_0_state <= ap_const_lv2_1;
                elsif (((not(((my_input1_V_0_vld_in = ap_const_logic_0) and (my_input1_V_0_ack_out = ap_const_logic_1))) and not(((my_input1_V_0_ack_out = ap_const_logic_0) and (my_input1_V_0_vld_in = ap_const_logic_1))) and (my_input1_V_0_state = ap_const_lv2_3)) or ((my_input1_V_0_state = ap_const_lv2_1) and (my_input1_V_0_ack_out = ap_const_logic_1)) or ((my_input1_V_0_state = ap_const_lv2_2) and (my_input1_V_0_vld_in = ap_const_logic_1)))) then 
                    my_input1_V_0_state <= ap_const_lv2_3;
                else 
                    my_input1_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    my_output_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                my_output_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((my_output_V_1_ack_out = ap_const_logic_1) and (my_output_V_1_vld_out = ap_const_logic_1))) then 
                                        my_output_V_1_sel_rd <= not(my_output_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    my_output_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                my_output_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((my_output_V_1_ack_in = ap_const_logic_1) and (my_output_V_1_vld_in = ap_const_logic_1))) then 
                                        my_output_V_1_sel_wr <= not(my_output_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    my_output_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                my_output_V_1_state <= ap_const_lv2_0;
            else
                if ((((my_output_V_1_state = ap_const_lv2_2) and (my_output_V_1_vld_in = ap_const_logic_0)) or ((my_output_V_1_state = ap_const_lv2_3) and (my_output_V_1_vld_in = ap_const_logic_0) and (my_output_V_1_ack_out = ap_const_logic_1)))) then 
                    my_output_V_1_state <= ap_const_lv2_2;
                elsif ((((my_output_V_1_state = ap_const_lv2_1) and (my_output_V_TREADY = ap_const_logic_0)) or ((my_output_V_1_state = ap_const_lv2_3) and (my_output_V_TREADY = ap_const_logic_0) and (my_output_V_1_vld_in = ap_const_logic_1)))) then 
                    my_output_V_1_state <= ap_const_lv2_1;
                elsif (((not(((my_output_V_1_vld_in = ap_const_logic_0) and (my_output_V_1_ack_out = ap_const_logic_1))) and not(((my_output_V_TREADY = ap_const_logic_0) and (my_output_V_1_vld_in = ap_const_logic_1))) and (my_output_V_1_state = ap_const_lv2_3)) or ((my_output_V_1_state = ap_const_lv2_1) and (my_output_V_1_ack_out = ap_const_logic_1)) or ((my_output_V_1_state = ap_const_lv2_2) and (my_output_V_1_vld_in = ap_const_logic_1)))) then 
                    my_output_V_1_state <= ap_const_lv2_3;
                else 
                    my_output_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    i_1_reg_243_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                i_1_reg_243 <= ap_const_lv32_0;
            elsif (((icmp_ln33_reg_910 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                i_1_reg_243 <= i_reg_914;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                i_reg_914 <= i_fu_323_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln33_reg_910 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then
                icmp_ln1494_1_reg_984 <= icmp_ln1494_1_fu_594_p2;
                icmp_ln1494_2_reg_989 <= icmp_ln1494_2_fu_615_p2;
                icmp_ln1494_3_reg_999 <= icmp_ln1494_3_fu_636_p2;
                icmp_ln1494_reg_979 <= icmp_ln1494_fu_573_p2;
                trunc_ln708_s_reg_994 <= grp_fu_809_p3(35 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln33_reg_910 <= icmp_ln33_fu_318_p2;
                icmp_ln33_reg_910_pp0_iter1_reg <= icmp_ln33_reg_910;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((my_input1_V_0_load_A = ap_const_logic_1)) then
                my_input1_V_0_payload_A <= my_input1_V_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((my_input1_V_0_load_B = ap_const_logic_1)) then
                my_input1_V_0_payload_B <= my_input1_V_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((my_output_V_1_load_A = ap_const_logic_1)) then
                my_output_V_1_payload_A <= zext_ln356_fu_692_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((my_output_V_1_load_B = ap_const_logic_1)) then
                my_output_V_1_payload_B <= zext_ln356_fu_692_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln33_reg_910 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                tmp_10_reg_954 <= grp_fu_745_p3(34 downto 2);
                tmp_2_reg_939 <= grp_fu_721_p3(34 downto 2);
                tmp_5_reg_944 <= grp_fu_729_p3(34 downto 2);
                tmp_8_reg_949 <= grp_fu_737_p3(34 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln33_reg_910 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then
                tmp_11_reg_974 <= grp_fu_777_p3(35 downto 2);
                tmp_3_reg_959 <= grp_fu_753_p3(35 downto 2);
                tmp_6_reg_964 <= grp_fu_761_p3(35 downto 2);
                tmp_9_reg_969 <= grp_fu_769_p3(35 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln33_fu_318_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                tmp_1_reg_919 <= mul_ln1118_fu_697_p2(33 downto 2);
                tmp_4_reg_924 <= mul_ln1118_4_fu_703_p2(33 downto 2);
                tmp_7_reg_929 <= mul_ln1118_8_fu_709_p2(33 downto 2);
                tmp_s_reg_934 <= mul_ln1118_12_fu_715_p2(33 downto 2);
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, my_output_V_TREADY, my_output_V_1_state, ap_enable_reg_pp0_iter0, icmp_ln33_fu_318_p2, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_subdone, ap_block_pp0_stage3_subdone, ap_block_pp0_stage1_subdone, ap_CS_fsm_state8, ap_block_pp0_stage2_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((icmp_ln33_fu_318_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                elsif (((icmp_ln33_fu_318_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_pp0_stage2 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage2_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                end if;
            when ap_ST_fsm_pp0_stage3 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage3_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                end if;
            when ap_ST_fsm_state8 => 
                if ((not(((my_output_V_1_state = ap_const_lv2_1) or ((my_output_V_1_state = ap_const_lv2_3) and (my_output_V_TREADY = ap_const_logic_0)))) and (ap_const_logic_1 = ap_CS_fsm_state8))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXX";
        end case;
    end process;
    add_ln52_1_fu_663_p2 <= std_logic_vector(unsigned(zext_ln52_fu_650_p1) + unsigned(zext_ln1118_6_fu_647_p1));
    add_ln52_2_fu_673_p2 <= std_logic_vector(unsigned(zext_ln52_1_fu_659_p1) + unsigned(zext_ln52_2_fu_669_p1));
    add_ln52_fu_653_p2 <= std_logic_vector(unsigned(zext_ln1118_4_fu_641_p1) + unsigned(zext_ln1118_5_fu_644_p1));
    and_ln728_1_fu_401_p3 <= (tmp_4_reg_924 & ap_const_lv2_0);
    and_ln728_2_fu_421_p3 <= (tmp_7_reg_929 & ap_const_lv2_0);
    and_ln728_3_fu_441_p3 <= (tmp_s_reg_934 & ap_const_lv2_0);
    and_ln_fu_377_p3 <= (tmp_1_reg_919 & ap_const_lv2_0);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(2);
    ap_CS_fsm_pp0_stage2 <= ap_CS_fsm(3);
    ap_CS_fsm_pp0_stage3 <= ap_CS_fsm(4);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state8 <= ap_CS_fsm(5);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(my_input1_V_0_vld_out, ap_enable_reg_pp0_iter0, icmp_ln33_fu_318_p2)
    begin
                ap_block_pp0_stage0_01001 <= ((icmp_ln33_fu_318_p2 = ap_const_lv1_0) and (my_input1_V_0_vld_out = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(my_input1_V_0_vld_out, ap_enable_reg_pp0_iter0, icmp_ln33_fu_318_p2, ap_enable_reg_pp0_iter1, ap_block_state6_io)
    begin
                ap_block_pp0_stage0_11001 <= (((ap_const_boolean_1 = ap_block_state6_io) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)) or ((icmp_ln33_fu_318_p2 = ap_const_lv1_0) and (my_input1_V_0_vld_out = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(my_input1_V_0_vld_out, ap_enable_reg_pp0_iter0, icmp_ln33_fu_318_p2, ap_enable_reg_pp0_iter1, ap_block_state6_io)
    begin
                ap_block_pp0_stage0_subdone <= (((ap_const_boolean_1 = ap_block_state6_io) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)) or ((icmp_ln33_fu_318_p2 = ap_const_lv1_0) and (my_input1_V_0_vld_out = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)));
    end process;

        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage1_11001_assign_proc : process(my_input1_V_0_vld_out, ap_enable_reg_pp0_iter0, icmp_ln33_reg_910, ap_enable_reg_pp0_iter1, ap_block_state7_io)
    begin
                ap_block_pp0_stage1_11001 <= (((ap_const_boolean_1 = ap_block_state7_io) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)) or ((icmp_ln33_reg_910 = ap_const_lv1_0) and (my_input1_V_0_vld_out = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage1_subdone_assign_proc : process(my_input1_V_0_vld_out, ap_enable_reg_pp0_iter0, icmp_ln33_reg_910, ap_enable_reg_pp0_iter1, ap_block_state7_io)
    begin
                ap_block_pp0_stage1_subdone <= (((ap_const_boolean_1 = ap_block_state7_io) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)) or ((icmp_ln33_reg_910 = ap_const_lv1_0) and (my_input1_V_0_vld_out = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)));
    end process;

        ap_block_pp0_stage2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage2_11001_assign_proc : process(my_input1_V_0_vld_out, ap_enable_reg_pp0_iter0, icmp_ln33_reg_910)
    begin
                ap_block_pp0_stage2_11001 <= ((icmp_ln33_reg_910 = ap_const_lv1_0) and (my_input1_V_0_vld_out = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage2_subdone_assign_proc : process(my_input1_V_0_vld_out, ap_enable_reg_pp0_iter0, icmp_ln33_reg_910)
    begin
                ap_block_pp0_stage2_subdone <= ((icmp_ln33_reg_910 = ap_const_lv1_0) and (my_input1_V_0_vld_out = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1));
    end process;

        ap_block_pp0_stage3 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage3_11001_assign_proc : process(my_input1_V_0_vld_out, ap_enable_reg_pp0_iter0, icmp_ln33_reg_910)
    begin
                ap_block_pp0_stage3_11001 <= ((icmp_ln33_reg_910 = ap_const_lv1_0) and (my_input1_V_0_vld_out = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage3_subdone_assign_proc : process(my_input1_V_0_vld_out, ap_enable_reg_pp0_iter0, icmp_ln33_reg_910)
    begin
                ap_block_pp0_stage3_subdone <= ((icmp_ln33_reg_910 = ap_const_lv1_0) and (my_input1_V_0_vld_out = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1));
    end process;


    ap_block_state2_pp0_stage0_iter0_assign_proc : process(my_input1_V_0_vld_out, icmp_ln33_fu_318_p2)
    begin
                ap_block_state2_pp0_stage0_iter0 <= ((icmp_ln33_fu_318_p2 = ap_const_lv1_0) and (my_input1_V_0_vld_out = ap_const_logic_0));
    end process;


    ap_block_state3_pp0_stage1_iter0_assign_proc : process(my_input1_V_0_vld_out, icmp_ln33_reg_910)
    begin
                ap_block_state3_pp0_stage1_iter0 <= ((icmp_ln33_reg_910 = ap_const_lv1_0) and (my_input1_V_0_vld_out = ap_const_logic_0));
    end process;


    ap_block_state4_pp0_stage2_iter0_assign_proc : process(my_input1_V_0_vld_out, icmp_ln33_reg_910)
    begin
                ap_block_state4_pp0_stage2_iter0 <= ((icmp_ln33_reg_910 = ap_const_lv1_0) and (my_input1_V_0_vld_out = ap_const_logic_0));
    end process;


    ap_block_state5_pp0_stage3_iter0_assign_proc : process(my_input1_V_0_vld_out, icmp_ln33_reg_910)
    begin
                ap_block_state5_pp0_stage3_iter0 <= ((icmp_ln33_reg_910 = ap_const_lv1_0) and (my_input1_V_0_vld_out = ap_const_logic_0));
    end process;


    ap_block_state6_io_assign_proc : process(my_output_V_1_ack_in, icmp_ln33_reg_910)
    begin
                ap_block_state6_io <= ((icmp_ln33_reg_910 = ap_const_lv1_0) and (my_output_V_1_ack_in = ap_const_logic_0));
    end process;

        ap_block_state6_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state7_io_assign_proc : process(my_output_V_1_ack_in, icmp_ln33_reg_910_pp0_iter1_reg)
    begin
                ap_block_state7_io <= ((icmp_ln33_reg_910_pp0_iter1_reg = ap_const_lv1_0) and (my_output_V_1_ack_in = ap_const_logic_0));
    end process;

        ap_block_state7_pp0_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state8_assign_proc : process(my_output_V_TREADY, my_output_V_1_state)
    begin
                ap_block_state8 <= ((my_output_V_1_state = ap_const_lv2_1) or ((my_output_V_1_state = ap_const_lv2_3) and (my_output_V_TREADY = ap_const_logic_0)));
    end process;


    ap_condition_pp0_exit_iter0_state2_assign_proc : process(icmp_ln33_fu_318_p2)
    begin
        if ((icmp_ln33_fu_318_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(my_output_V_TREADY, my_output_V_1_state, ap_CS_fsm_state8)
    begin
        if ((not(((my_output_V_1_state = ap_const_lv2_1) or ((my_output_V_1_state = ap_const_lv2_3) and (my_output_V_TREADY = ap_const_logic_0)))) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_i_1_phi_fu_247_p4_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, icmp_ln33_reg_910, ap_enable_reg_pp0_iter1, i_1_reg_243, i_reg_914)
    begin
        if (((icmp_ln33_reg_910 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_phi_mux_i_1_phi_fu_247_p4 <= i_reg_914;
        else 
            ap_phi_mux_i_1_phi_fu_247_p4 <= i_1_reg_243;
        end if; 
    end process;


    ap_ready_assign_proc : process(my_output_V_TREADY, my_output_V_1_state, ap_CS_fsm_state8)
    begin
        if ((not(((my_output_V_1_state = ap_const_lv2_1) or ((my_output_V_1_state = ap_const_lv2_3) and (my_output_V_TREADY = ap_const_logic_0)))) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    grp_fu_721_p0 <= grp_fu_721_p00(17 - 1 downto 0);
    grp_fu_721_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(data0_1_V),34));
    grp_fu_721_p1 <= zext_ln1118_1_fu_384_p1(17 - 1 downto 0);
    grp_fu_721_p2 <= grp_fu_721_p20(34 - 1 downto 0);
    grp_fu_721_p20 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(and_ln_fu_377_p3),35));
    grp_fu_729_p0 <= grp_fu_729_p00(17 - 1 downto 0);
    grp_fu_729_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(data0_5_V),34));
    grp_fu_729_p1 <= zext_ln1118_1_fu_384_p1(17 - 1 downto 0);
    grp_fu_729_p2 <= grp_fu_729_p20(34 - 1 downto 0);
    grp_fu_729_p20 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(and_ln728_1_fu_401_p3),35));
    grp_fu_737_p0 <= grp_fu_737_p00(17 - 1 downto 0);
    grp_fu_737_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(data0_9_V),34));
    grp_fu_737_p1 <= zext_ln1118_1_fu_384_p1(17 - 1 downto 0);
    grp_fu_737_p2 <= grp_fu_737_p20(34 - 1 downto 0);
    grp_fu_737_p20 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(and_ln728_2_fu_421_p3),35));
    grp_fu_745_p0 <= grp_fu_745_p00(17 - 1 downto 0);
    grp_fu_745_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(data0_13_V),34));
    grp_fu_745_p1 <= zext_ln1118_1_fu_384_p1(17 - 1 downto 0);
    grp_fu_745_p2 <= grp_fu_745_p20(34 - 1 downto 0);
    grp_fu_745_p20 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(and_ln728_3_fu_441_p3),35));
    grp_fu_753_p0 <= grp_fu_753_p00(17 - 1 downto 0);
    grp_fu_753_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(data0_2_V),34));
    grp_fu_753_p1 <= zext_ln1118_2_fu_465_p1(17 - 1 downto 0);
    grp_fu_753_p2 <= grp_fu_753_p20(35 - 1 downto 0);
    grp_fu_753_p20 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln_fu_469_p3),36));
    grp_fu_761_p0 <= grp_fu_761_p00(17 - 1 downto 0);
    grp_fu_761_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(data0_6_V),34));
    grp_fu_761_p1 <= zext_ln1118_2_fu_465_p1(17 - 1 downto 0);
    grp_fu_761_p2 <= grp_fu_761_p20(35 - 1 downto 0);
    grp_fu_761_p20 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln728_2_fu_489_p3),36));
    grp_fu_769_p0 <= grp_fu_769_p00(17 - 1 downto 0);
    grp_fu_769_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(data0_10_V),34));
    grp_fu_769_p1 <= zext_ln1118_2_fu_465_p1(17 - 1 downto 0);
    grp_fu_769_p2 <= grp_fu_769_p20(35 - 1 downto 0);
    grp_fu_769_p20 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln728_4_fu_509_p3),36));
    grp_fu_777_p0 <= grp_fu_777_p00(17 - 1 downto 0);
    grp_fu_777_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(data0_14_V),34));
    grp_fu_777_p1 <= zext_ln1118_2_fu_465_p1(17 - 1 downto 0);
    grp_fu_777_p2 <= grp_fu_777_p20(35 - 1 downto 0);
    grp_fu_777_p20 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln728_6_fu_529_p3),36));
    grp_fu_785_p0 <= grp_fu_785_p00(17 - 1 downto 0);
    grp_fu_785_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(data0_3_V),34));
    grp_fu_785_p1 <= zext_ln1118_3_fu_553_p1(17 - 1 downto 0);
    grp_fu_785_p2 <= (tmp_3_reg_959 & ap_const_lv2_0);
    grp_fu_793_p0 <= grp_fu_793_p00(17 - 1 downto 0);
    grp_fu_793_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(data0_7_V),34));
    grp_fu_793_p1 <= zext_ln1118_3_fu_553_p1(17 - 1 downto 0);
    grp_fu_793_p2 <= (tmp_6_reg_964 & ap_const_lv2_0);
    grp_fu_801_p0 <= grp_fu_801_p00(17 - 1 downto 0);
    grp_fu_801_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(data0_11_V),34));
    grp_fu_801_p1 <= zext_ln1118_3_fu_553_p1(17 - 1 downto 0);
    grp_fu_801_p2 <= (tmp_9_reg_969 & ap_const_lv2_0);
    grp_fu_809_p0 <= grp_fu_809_p00(17 - 1 downto 0);
    grp_fu_809_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(data0_15_V),34));
    grp_fu_809_p1 <= zext_ln1118_3_fu_553_p1(17 - 1 downto 0);
    grp_fu_809_p2 <= (tmp_11_reg_974 & ap_const_lv2_0);
    i_fu_323_p2 <= std_logic_vector(unsigned(ap_phi_mux_i_1_phi_fu_247_p4) + unsigned(ap_const_lv32_1));
    icmp_ln1494_1_fu_594_p2 <= "1" when (unsigned(trunc_ln708_5_fu_585_p4) > unsigned(threshold_V)) else "0";
    icmp_ln1494_2_fu_615_p2 <= "1" when (unsigned(trunc_ln708_8_fu_606_p4) > unsigned(threshold_V)) else "0";
    icmp_ln1494_3_fu_636_p2 <= "1" when (unsigned(trunc_ln708_s_fu_627_p4) > unsigned(threshold_V)) else "0";
    icmp_ln1494_fu_573_p2 <= "1" when (unsigned(trunc_ln708_2_fu_564_p4) > unsigned(threshold_V)) else "0";
    icmp_ln33_fu_318_p2 <= "1" when (ap_phi_mux_i_1_phi_fu_247_p4 = size) else "0";
    icmp_ln54_fu_679_p2 <= "1" when (add_ln52_2_fu_673_p2 = ap_const_lv3_4) else "0";
    mul_ln1118_12_fu_715_p0 <= mul_ln1118_12_fu_715_p00(17 - 1 downto 0);
    mul_ln1118_12_fu_715_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(data0_12_V),34));
    mul_ln1118_12_fu_715_p1 <= zext_ln1118_fu_333_p1(17 - 1 downto 0);
    mul_ln1118_4_fu_703_p0 <= mul_ln1118_4_fu_703_p00(17 - 1 downto 0);
    mul_ln1118_4_fu_703_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(data0_4_V),34));
    mul_ln1118_4_fu_703_p1 <= zext_ln1118_fu_333_p1(17 - 1 downto 0);
    mul_ln1118_8_fu_709_p0 <= mul_ln1118_8_fu_709_p00(17 - 1 downto 0);
    mul_ln1118_8_fu_709_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(data0_8_V),34));
    mul_ln1118_8_fu_709_p1 <= zext_ln1118_fu_333_p1(17 - 1 downto 0);
    mul_ln1118_fu_697_p0 <= mul_ln1118_fu_697_p00(17 - 1 downto 0);
    mul_ln1118_fu_697_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(data0_0_V),34));
    mul_ln1118_fu_697_p1 <= zext_ln1118_fu_333_p1(17 - 1 downto 0);
    my_input1_V_0_ack_in <= my_input1_V_0_state(1);

    my_input1_V_0_ack_out_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, icmp_ln33_fu_318_p2, ap_CS_fsm_pp0_stage1, icmp_ln33_reg_910, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage0_11001, ap_block_pp0_stage1_11001, ap_block_pp0_stage2_11001, ap_block_pp0_stage3_11001)
    begin
        if ((((icmp_ln33_reg_910 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((icmp_ln33_reg_910 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((icmp_ln33_reg_910 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((icmp_ln33_fu_318_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            my_input1_V_0_ack_out <= ap_const_logic_1;
        else 
            my_input1_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    my_input1_V_0_data_out_assign_proc : process(my_input1_V_0_payload_A, my_input1_V_0_payload_B, my_input1_V_0_sel)
    begin
        if ((my_input1_V_0_sel = ap_const_logic_1)) then 
            my_input1_V_0_data_out <= my_input1_V_0_payload_B;
        else 
            my_input1_V_0_data_out <= my_input1_V_0_payload_A;
        end if; 
    end process;

    my_input1_V_0_load_A <= (my_input1_V_0_state_cmp_full and not(my_input1_V_0_sel_wr));
    my_input1_V_0_load_B <= (my_input1_V_0_state_cmp_full and my_input1_V_0_sel_wr);
    my_input1_V_0_sel <= my_input1_V_0_sel_rd;
    my_input1_V_0_state_cmp_full <= '0' when (my_input1_V_0_state = ap_const_lv2_1) else '1';
    my_input1_V_0_vld_in <= my_input1_V_TVALID;
    my_input1_V_0_vld_out <= my_input1_V_0_state(0);

    my_input1_V_TDATA_blk_n_assign_proc : process(my_input1_V_0_state, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0, icmp_ln33_fu_318_p2, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1, icmp_ln33_reg_910, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3)
    begin
        if ((((icmp_ln33_reg_910 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((icmp_ln33_reg_910 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((icmp_ln33_reg_910 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1)) or ((icmp_ln33_fu_318_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0)))) then 
            my_input1_V_TDATA_blk_n <= my_input1_V_0_state(0);
        else 
            my_input1_V_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    my_input1_V_TREADY <= my_input1_V_0_state(1);
    my_output_V_1_ack_in <= my_output_V_1_state(1);
    my_output_V_1_ack_out <= my_output_V_TREADY;

    my_output_V_1_data_out_assign_proc : process(my_output_V_1_payload_A, my_output_V_1_payload_B, my_output_V_1_sel)
    begin
        if ((my_output_V_1_sel = ap_const_logic_1)) then 
            my_output_V_1_data_out <= my_output_V_1_payload_B;
        else 
            my_output_V_1_data_out <= my_output_V_1_payload_A;
        end if; 
    end process;

    my_output_V_1_load_A <= (my_output_V_1_state_cmp_full and not(my_output_V_1_sel_wr));
    my_output_V_1_load_B <= (my_output_V_1_state_cmp_full and my_output_V_1_sel_wr);
    my_output_V_1_sel <= my_output_V_1_sel_rd;
    my_output_V_1_state_cmp_full <= '0' when (my_output_V_1_state = ap_const_lv2_1) else '1';

    my_output_V_1_vld_in_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln33_reg_910, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln33_reg_910 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            my_output_V_1_vld_in <= ap_const_logic_1;
        else 
            my_output_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    my_output_V_1_vld_out <= my_output_V_1_state(0);
    my_output_V_TDATA <= my_output_V_1_data_out;

    my_output_V_TDATA_blk_n_assign_proc : process(my_output_V_1_state, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1, icmp_ln33_reg_910, ap_enable_reg_pp0_iter1, icmp_ln33_reg_910_pp0_iter1_reg)
    begin
        if ((((icmp_ln33_reg_910_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1)) or ((icmp_ln33_reg_910 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0)))) then 
            my_output_V_TDATA_blk_n <= my_output_V_1_state(1);
        else 
            my_output_V_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    my_output_V_TVALID <= my_output_V_1_state(0);
    select_ln54_fu_685_p3 <= 
        ap_const_lv34_0 when (icmp_ln54_fu_679_p2(0) = '1') else 
        trunc_ln708_s_reg_994;
    shl_ln728_2_fu_489_p3 <= (tmp_5_reg_944 & ap_const_lv2_0);
    shl_ln728_4_fu_509_p3 <= (tmp_8_reg_949 & ap_const_lv2_0);
    shl_ln728_6_fu_529_p3 <= (tmp_10_reg_954 & ap_const_lv2_0);
    shl_ln_fu_469_p3 <= (tmp_2_reg_939 & ap_const_lv2_0);
    trunc_ln356_1_fu_373_p1 <= my_input1_V_0_data_out(17 - 1 downto 0);
    trunc_ln356_2_fu_461_p1 <= my_input1_V_0_data_out(17 - 1 downto 0);
    trunc_ln356_3_fu_549_p1 <= my_input1_V_0_data_out(17 - 1 downto 0);
    trunc_ln356_fu_329_p1 <= my_input1_V_0_data_out(17 - 1 downto 0);
    trunc_ln708_2_fu_564_p4 <= grp_fu_785_p3(35 downto 2);
    trunc_ln708_5_fu_585_p4 <= grp_fu_793_p3(35 downto 2);
    trunc_ln708_8_fu_606_p4 <= grp_fu_801_p3(35 downto 2);
    trunc_ln708_s_fu_627_p4 <= grp_fu_809_p3(35 downto 2);
    zext_ln1118_1_fu_384_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln356_1_fu_373_p1),34));
    zext_ln1118_2_fu_465_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln356_2_fu_461_p1),34));
    zext_ln1118_3_fu_553_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln356_3_fu_549_p1),34));
    zext_ln1118_4_fu_641_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(icmp_ln1494_reg_979),2));
    zext_ln1118_5_fu_644_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(icmp_ln1494_1_reg_984),2));
    zext_ln1118_6_fu_647_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(icmp_ln1494_2_reg_989),2));
    zext_ln1118_fu_333_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln356_fu_329_p1),34));
    zext_ln356_fu_692_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln54_fu_685_p3),40));
    zext_ln52_1_fu_659_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln52_fu_653_p2),3));
    zext_ln52_2_fu_669_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln52_1_fu_663_p2),3));
    zext_ln52_fu_650_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(icmp_ln1494_3_reg_999),2));
end behav;
